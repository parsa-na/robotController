
keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08007bf8  08007bf8  00017bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f48  08007f48  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08007f48  08007f48  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f48  08007f48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000090  08007fe0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08007fe0  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000866e  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001870  00000000  00000000  00028727  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  00029f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002a788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001732a  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000719a  00000000  00000000  000421da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083603  00000000  00000000  00049374  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c8  00000000  00000000  000cc9f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08007be0 	.word	0x08007be0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08007be0 	.word	0x08007be0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <DWT_Delay_Init+0x58>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <DWT_Delay_Init+0x58>)
 8000a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a86:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <DWT_Delay_Init+0x58>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <DWT_Delay_Init+0x58>)
 8000a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a92:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <DWT_Delay_Init+0x5c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <DWT_Delay_Init+0x5c>)
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000ab2:	bf00      	nop
  __NOP();
 8000ab4:	bf00      	nop
  __NOP();
 8000ab6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e000      	b.n	8000ac6 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000ac4:	2301      	movs	r3, #1
  }
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000edf0 	.word	0xe000edf0
 8000ad4:	e0001000 	.word	0xe0001000

08000ad8 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <DWT_Delay_us+0x3c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ae6:	f004 ff35 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8000aea:	4602      	mov	r2, r0
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <DWT_Delay_us+0x40>)
 8000aee:	fba3 2302 	umull	r2, r3, r3, r2
 8000af2:	0c9b      	lsrs	r3, r3, #18
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000afc:	bf00      	nop
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <DWT_Delay_us+0x3c>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d3f8      	bcc.n	8000afe <DWT_Delay_us+0x26>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	e0001000 	.word	0xe0001000
 8000b18:	431bde83 	.word	0x431bde83

08000b1c <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <lcd16x2_enablePulse+0x34>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <lcd16x2_enablePulse+0x38>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f004 fb2d 	bl	800518a <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000b30:	2014      	movs	r0, #20
 8000b32:	f7ff ffd1 	bl	8000ad8 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <lcd16x2_enablePulse+0x34>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <lcd16x2_enablePulse+0x38>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	f004 fb22 	bl	800518a <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000b46:	203c      	movs	r0, #60	; 0x3c
 8000b48:	f7ff ffc6 	bl	8000ad8 <DWT_Delay_us>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000ac 	.word	0x200000ac
 8000b54:	200000b2 	.word	0x200000b2

08000b58 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <lcd16x2_rs+0x24>)
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <lcd16x2_rs+0x28>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f004 fb0c 	bl	800518a <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000ac 	.word	0x200000ac
 8000b80:	200000b0 	.word	0x200000b0

08000b84 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000b9c:	4b5f      	ldr	r3, [pc, #380]	; (8000d1c <lcd16x2_write+0x198>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d05a      	beq.n	8000c5a <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <lcd16x2_write+0x19c>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	4b5e      	ldr	r3, [pc, #376]	; (8000d24 <lcd16x2_write+0x1a0>)
 8000baa:	8819      	ldrh	r1, [r3, #0]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f004 fae8 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000bba:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <lcd16x2_write+0x19c>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <lcd16x2_write+0x1a4>)
 8000bc0:	8819      	ldrh	r1, [r3, #0]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f004 fadd 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000bd0:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <lcd16x2_write+0x19c>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <lcd16x2_write+0x1a8>)
 8000bd6:	8819      	ldrh	r1, [r3, #0]
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	f004 fad2 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000be6:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <lcd16x2_write+0x19c>)
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <lcd16x2_write+0x1ac>)
 8000bec:	8819      	ldrh	r1, [r3, #0]
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f004 fac7 	bl	800518a <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <lcd16x2_write+0x1b4>)
 8000c02:	8819      	ldrh	r1, [r3, #0]
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f004 fabc 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c12:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	4b49      	ldr	r3, [pc, #292]	; (8000d3c <lcd16x2_write+0x1b8>)
 8000c18:	8819      	ldrh	r1, [r3, #0]
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	f004 fab1 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c28:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <lcd16x2_write+0x1bc>)
 8000c2e:	8819      	ldrh	r1, [r3, #0]
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f004 faa6 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <lcd16x2_write+0x1c0>)
 8000c44:	8819      	ldrh	r1, [r3, #0]
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f004 fa9b 	bl	800518a <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000c54:	f7ff ff62 	bl	8000b1c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000c58:	e05b      	b.n	8000d12 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <lcd16x2_write+0x1b4>)
 8000c60:	8819      	ldrh	r1, [r3, #0]
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f004 fa8d 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <lcd16x2_write+0x1b8>)
 8000c76:	8819      	ldrh	r1, [r3, #0]
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	f004 fa82 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <lcd16x2_write+0x1bc>)
 8000c8c:	8819      	ldrh	r1, [r3, #0]
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	f004 fa77 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <lcd16x2_write+0x1c0>)
 8000ca2:	8819      	ldrh	r1, [r3, #0]
 8000ca4:	7bbb      	ldrb	r3, [r7, #14]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	f004 fa6c 	bl	800518a <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000cb2:	f7ff ff33 	bl	8000b1c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <lcd16x2_write+0x1b4>)
 8000cbc:	8819      	ldrh	r1, [r3, #0]
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f004 fa5f 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <lcd16x2_write+0x1b8>)
 8000cd2:	8819      	ldrh	r1, [r3, #0]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f004 fa54 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <lcd16x2_write+0x1bc>)
 8000ce8:	8819      	ldrh	r1, [r3, #0]
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f004 fa49 	bl	800518a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <lcd16x2_write+0x1b0>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <lcd16x2_write+0x1c0>)
 8000cfe:	8819      	ldrh	r1, [r3, #0]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f004 fa3e 	bl	800518a <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000d0e:	f7ff ff05 	bl	8000b1c <lcd16x2_enablePulse>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	200000b4 	.word	0x200000b4
 8000d24:	200000b8 	.word	0x200000b8
 8000d28:	200000ba 	.word	0x200000ba
 8000d2c:	200000bc 	.word	0x200000bc
 8000d30:	200000be 	.word	0x200000be
 8000d34:	200000c0 	.word	0x200000c0
 8000d38:	200000c4 	.word	0x200000c4
 8000d3c:	200000c6 	.word	0x200000c6
 8000d40:	200000c8 	.word	0x200000c8
 8000d44:	200000ca 	.word	0x200000ca

08000d48 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff00 	bl	8000b58 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff12 	bl	8000b84 <lcd16x2_write>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff fef0 	bl	8000b58 <lcd16x2_rs>
  lcd16x2_write(data);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff02 	bl	8000b84 <lcd16x2_write>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fedc 	bl	8000b58 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <lcd16x2_write4+0x7c>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <lcd16x2_write4+0x80>)
 8000da6:	8819      	ldrh	r1, [r3, #0]
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f004 f9ea 	bl	800518a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <lcd16x2_write4+0x7c>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <lcd16x2_write4+0x84>)
 8000dbc:	8819      	ldrh	r1, [r3, #0]
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f004 f9df 	bl	800518a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <lcd16x2_write4+0x7c>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <lcd16x2_write4+0x88>)
 8000dd2:	8819      	ldrh	r1, [r3, #0]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f004 f9d4 	bl	800518a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <lcd16x2_write4+0x7c>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <lcd16x2_write4+0x8c>)
 8000de8:	8819      	ldrh	r1, [r3, #0]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	461a      	mov	r2, r3
 8000df4:	f004 f9c9 	bl	800518a <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000df8:	f7ff fe90 	bl	8000b1c <lcd16x2_enablePulse>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000c0 	.word	0x200000c0
 8000e08:	200000c4 	.word	0x200000c4
 8000e0c:	200000c6 	.word	0x200000c6
 8000e10:	200000c8 	.word	0x200000c8
 8000e14:	200000ca 	.word	0x200000ca

08000e18 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	817b      	strh	r3, [r7, #10]
 8000e26:	4613      	mov	r3, r2
 8000e28:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000e2a:	f7ff fe25 	bl	8000a78 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <lcd16x2_init_4bits+0xa8>)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000e34:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <lcd16x2_init_4bits+0xac>)
 8000e36:	897b      	ldrh	r3, [r7, #10]
 8000e38:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <lcd16x2_init_4bits+0xb0>)
 8000e3c:	893b      	ldrh	r3, [r7, #8]
 8000e3e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000e40:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <lcd16x2_init_4bits+0xb4>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000e46:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <lcd16x2_init_4bits+0xb8>)
 8000e48:	8b3b      	ldrh	r3, [r7, #24]
 8000e4a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <lcd16x2_init_4bits+0xbc>)
 8000e4e:	8bbb      	ldrh	r3, [r7, #28]
 8000e50:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <lcd16x2_init_4bits+0xc0>)
 8000e54:	8c3b      	ldrh	r3, [r7, #32]
 8000e56:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <lcd16x2_init_4bits+0xc4>)
 8000e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e5c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <lcd16x2_init_4bits+0xc8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <lcd16x2_init_4bits+0xcc>)
 8000e66:	2228      	movs	r2, #40	; 0x28
 8000e68:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000e6a:	2014      	movs	r0, #20
 8000e6c:	f003 fd16 	bl	800489c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff ff89 	bl	8000d88 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000e76:	2005      	movs	r0, #5
 8000e78:	f003 fd10 	bl	800489c <HAL_Delay>
  lcd16x2_write4(0x3);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f7ff ff83 	bl	8000d88 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f003 fd0a 	bl	800489c <HAL_Delay>
  lcd16x2_write4(0x3);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f7ff ff7d 	bl	8000d88 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f003 fd04 	bl	800489c <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff ff77 	bl	8000d88 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f003 fcfe 	bl	800489c <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ea0:	2028      	movs	r0, #40	; 0x28
 8000ea2:	f7ff ff51 	bl	8000d48 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff ff4e 	bl	8000d48 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff ff4b 	bl	8000d48 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f003 fcf2 	bl	800489c <HAL_Delay>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200000ac 	.word	0x200000ac
 8000ec4:	200000b0 	.word	0x200000b0
 8000ec8:	200000b2 	.word	0x200000b2
 8000ecc:	200000c0 	.word	0x200000c0
 8000ed0:	200000c4 	.word	0x200000c4
 8000ed4:	200000c6 	.word	0x200000c6
 8000ed8:	200000c8 	.word	0x200000c8
 8000edc:	200000ca 	.word	0x200000ca
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000002 	.word	0x20000002

08000ee8 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d108      	bne.n	8000f18 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff19 	bl	8000d48 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8000f16:	e007      	b.n	8000f28 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000f1e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff10 	bl	8000d48 <lcd16x2_writeCommand>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <lcd16x2_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff ffd6 	bl	8000ee8 <lcd16x2_setCursor>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if(state)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00c      	beq.n	8000f6a <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <lcd16x2_cursorShow+0x4c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f043 0303 	orr.w	r3, r3, #3
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <lcd16x2_cursorShow+0x4c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <lcd16x2_cursorShow+0x4c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fef0 	bl	8000d48 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8000f68:	e00b      	b.n	8000f82 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <lcd16x2_cursorShow+0x4c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f023 0303 	bic.w	r3, r3, #3
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <lcd16x2_cursorShow+0x4c>)
 8000f76:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <lcd16x2_cursorShow+0x4c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fee3 	bl	8000d48 <lcd16x2_writeCommand>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000001 	.word	0x20000001

08000f90 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fed7 	bl	8000d48 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f003 fc7e 	bl	800489c <HAL_Delay>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8000fa4:	b40f      	push	{r0, r1, r2, r3}
 8000fa6:	b590      	push	{r4, r7, lr}
 8000fa8:	b089      	sub	sp, #36	; 0x24
 8000faa:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000fac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 f9ec 	bl	8006398 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
 8000fc4:	e00b      	b.n	8000fde <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8000fc6:	7ffb      	ldrb	r3, [r7, #31]
 8000fc8:	f107 0220 	add.w	r2, r7, #32
 8000fcc:	4413      	add	r3, r2
 8000fce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fec8 	bl	8000d68 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	77fb      	strb	r3, [r7, #31]
 8000fde:	7ffc      	ldrb	r4, [r7, #31]
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f8b3 	bl	8000150 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	429c      	cmp	r4, r3
 8000fee:	d202      	bcs.n	8000ff6 <lcd16x2_printf+0x52>
 8000ff0:	7ffb      	ldrb	r3, [r7, #31]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d9e7      	bls.n	8000fc6 <lcd16x2_printf+0x22>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001000:	b004      	add	sp, #16
 8001002:	4770      	bx	lr

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b08d      	sub	sp, #52	; 0x34
 8001008:	af04      	add	r7, sp, #16
  HAL_Init();
 800100a:	f003 fbe5 	bl	80047d8 <HAL_Init>
  SystemClock_Config();
 800100e:	f003 f945 	bl	800429c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f003 f9d9 	bl	80043c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001016:	f003 f9b1 	bl	800437c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800101a:	f003 f985 	bl	8004328 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  st=MENU;
 800101e:	4b86      	ldr	r3, [pc, #536]	; (8001238 <main+0x234>)
 8001020:	2203      	movs	r2, #3
 8001022:	701a      	strb	r2, [r3, #0]
  uint8_t f=0;
 8001024:	2300      	movs	r3, #0
 8001026:	77fb      	strb	r3, [r7, #31]
  cursor=MENU_RUN;
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <main+0x238>)
 800102a:	2204      	movs	r2, #4
 800102c:	701a      	strb	r2, [r3, #0]
  uint16_t speed_man=0;
 800102e:	2300      	movs	r3, #0
 8001030:	813b      	strh	r3, [r7, #8]
  uint32_t waiting_time=0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  uint32_t log_waiting_time=0;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    lcd16x2_init_4bits(GPIOB, RS_PIN_Pin, E_PIN_Pin, GPIOA, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 800103a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800103e:	9303      	str	r3, [sp, #12]
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <main+0x23c>)
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	2101      	movs	r1, #1
 8001058:	487a      	ldr	r0, [pc, #488]	; (8001244 <main+0x240>)
 800105a:	f7ff fedd 	bl	8000e18 <lcd16x2_init_4bits>


   lcd16x2_clear();
 800105e:	f7ff ff97 	bl	8000f90 <lcd16x2_clear>
  lcd16x2_printf("enter password:");
 8001062:	4879      	ldr	r0, [pc, #484]	; (8001248 <main+0x244>)
 8001064:	f7ff ff9e 	bl	8000fa4 <lcd16x2_printf>
  lcd16x2_2ndLine();
 8001068:	f7ff ff62 	bl	8000f30 <lcd16x2_2ndLine>
  //st=WAIT;
      /* Infinite loop */
      /* USER CODE BEGIN WHILE */
    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // row 1 reset
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	4873      	ldr	r0, [pc, #460]	; (8001240 <main+0x23c>)
 8001072:	f004 f88a 	bl	800518a <HAL_GPIO_WritePin>
      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2120      	movs	r1, #32
 800107a:	4871      	ldr	r0, [pc, #452]	; (8001240 <main+0x23c>)
 800107c:	f004 f885 	bl	800518a <HAL_GPIO_WritePin>
      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	486e      	ldr	r0, [pc, #440]	; (8001240 <main+0x23c>)
 8001086:	f004 f880 	bl	800518a <HAL_GPIO_WritePin>
      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	486c      	ldr	r0, [pc, #432]	; (8001240 <main+0x23c>)
 8001090:	f004 f87b 	bl	800518a <HAL_GPIO_WritePin>
      while (1)
       {
  //    	if(st==WAIT){
  //
  //    	}
      	if(st==PASSWORD){
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <main+0x234>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d139      	bne.n	8001110 <main+0x10c>
      			key=get_key();
 800109c:	f002 fe00 	bl	8003ca0 <get_key>
 80010a0:	4603      	mov	r3, r0
 80010a2:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	2b73      	cmp	r3, #115	; 0x73
 80010a8:	d129      	bne.n	80010fe <main+0xfa>
      				for(int i=0;i<4;i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	e011      	b.n	80010d4 <main+0xd0>
      					if(pass[i]!=PASS[i]-48){
 80010b0:	4a66      	ldr	r2, [pc, #408]	; (800124c <main+0x248>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4a65      	ldr	r2, [pc, #404]	; (8001250 <main+0x24c>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3b30      	subs	r3, #48	; 0x30
 80010c4:	4299      	cmp	r1, r3
 80010c6:	d002      	beq.n	80010ce <main+0xca>
      						f=1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	77fb      	strb	r3, [r7, #31]
      						break;
 80010cc:	e005      	b.n	80010da <main+0xd6>
      				for(int i=0;i<4;i++){
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	ddea      	ble.n	80010b0 <main+0xac>
      					}
      				}
      					if(f!=1){
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d006      	beq.n	80010ee <main+0xea>
      						st=MENU;
 80010e0:	4b55      	ldr	r3, [pc, #340]	; (8001238 <main+0x234>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	701a      	strb	r2, [r3, #0]

      						cursor=MENU_RUN;
 80010e6:	4b55      	ldr	r3, [pc, #340]	; (800123c <main+0x238>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e002      	b.n	80010f4 <main+0xf0>
      					}
      					else{
      						st=ERR;
 80010ee:	4b52      	ldr	r3, [pc, #328]	; (8001238 <main+0x234>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	701a      	strb	r2, [r3, #0]
      					}
      					counterP=0;
 80010f4:	4b57      	ldr	r3, [pc, #348]	; (8001254 <main+0x250>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	f001 ba8b 	b.w	8002614 <main+0x1610>
      				}
      			else{
      				set_char(key);
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fb6d 	bl	80037e0 <set_char>
      				HAL_Delay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f003 fbc8 	bl	800489c <HAL_Delay>
 800110c:	f001 ba82 	b.w	8002614 <main+0x1610>
      			}
      		}
      	else if(st== ERR){
 8001110:	4b49      	ldr	r3, [pc, #292]	; (8001238 <main+0x234>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d124      	bne.n	8001162 <main+0x15e>
      		lcd16x2_clear();
 8001118:	f7ff ff3a 	bl	8000f90 <lcd16x2_clear>
      		lcd16x2_printf("Incorrect!!");
 800111c:	484e      	ldr	r0, [pc, #312]	; (8001258 <main+0x254>)
 800111e:	f7ff ff41 	bl	8000fa4 <lcd16x2_printf>
      		key=get_key();
 8001122:	f002 fdbd 	bl	8003ca0 <get_key>
 8001126:	4603      	mov	r3, r0
 8001128:	72fb      	strb	r3, [r7, #11]
      		if(key=='s'){
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2b73      	cmp	r3, #115	; 0x73
 800112e:	f041 8271 	bne.w	8002614 <main+0x1610>
      			st=PASSWORD;
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <main+0x234>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
      			pass[0]=0;
 8001138:	4b44      	ldr	r3, [pc, #272]	; (800124c <main+0x248>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
      			pass[1]=0;
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <main+0x248>)
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
      			pass[2]=0;
 8001144:	4b41      	ldr	r3, [pc, #260]	; (800124c <main+0x248>)
 8001146:	2200      	movs	r2, #0
 8001148:	709a      	strb	r2, [r3, #2]
      			pass[3]=0;
 800114a:	4b40      	ldr	r3, [pc, #256]	; (800124c <main+0x248>)
 800114c:	2200      	movs	r2, #0
 800114e:	70da      	strb	r2, [r3, #3]
      			lcd16x2_clear();
 8001150:	f7ff ff1e 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("Enter Password:");
 8001154:	4841      	ldr	r0, [pc, #260]	; (800125c <main+0x258>)
 8001156:	f7ff ff25 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 800115a:	f7ff fee9 	bl	8000f30 <lcd16x2_2ndLine>
 800115e:	f001 ba59 	b.w	8002614 <main+0x1610>
      		}
      	}
      	else if(st==MENU){    /// MENU STATE **********************************************************
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <main+0x234>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d17c      	bne.n	8001264 <main+0x260>
      			if(col_t==0){
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <main+0x25c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10c      	bne.n	800118c <main+0x188>
      				lcd16x2_clear();
 8001172:	f7ff ff0d 	bl	8000f90 <lcd16x2_clear>
      				show_cursor(cursor);
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <main+0x238>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fe1e 	bl	8002dbc <show_cursor>
      				lcd16x2_cursorShow(0);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fedd 	bl	8000f40 <lcd16x2_cursorShow>
      				col_t=1;
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <main+0x25c>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
      			}

      			key=get_key();
 800118c:	f002 fd88 	bl	8003ca0 <get_key>
 8001190:	4603      	mov	r3, r0
 8001192:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	2b73      	cmp	r3, #115	; 0x73
 8001198:	d124      	bne.n	80011e4 <main+0x1e0>
      				st=cursor;
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <main+0x238>)
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <main+0x234>)
 80011a0:	701a      	strb	r2, [r3, #0]
      				lcd16x2_clear();
 80011a2:	f7ff fef5 	bl	8000f90 <lcd16x2_clear>
      				if(st==LEARNING)
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <main+0x234>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d102      	bne.n	80011b4 <main+0x1b0>
      					cursor=MODE1;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <main+0x238>)
 80011b0:	220b      	movs	r2, #11
 80011b2:	701a      	strb	r2, [r3, #0]
      				if(st==PARAMETER_SETTING)
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <main+0x234>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d102      	bne.n	80011c2 <main+0x1be>
      					cursor=SPEED;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <main+0x238>)
 80011be:	2211      	movs	r2, #17
 80011c0:	701a      	strb	r2, [r3, #0]
      				if(st==LOG)
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <main+0x234>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d102      	bne.n	80011d0 <main+0x1cc>
      					cursor=LOG_WORKING_TIME;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <main+0x238>)
 80011cc:	221f      	movs	r2, #31
 80011ce:	701a      	strb	r2, [r3, #0]
      				if(st==MENU_RUN)
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <main+0x234>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d102      	bne.n	80011de <main+0x1da>
      					cursor=MENU_RUN;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <main+0x238>)
 80011da:	2204      	movs	r2, #4
 80011dc:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <main+0x25c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='d'){
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d10f      	bne.n	800120a <main+0x206>
      				cursor++;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <main+0x238>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <main+0x238>)
 80011f4:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <main+0x25c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
      				if(cursor==MANUAL_CONTROL+1)
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <main+0x238>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b0b      	cmp	r3, #11
 8001202:	d102      	bne.n	800120a <main+0x206>
      					cursor=MENU_RUN;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <main+0x238>)
 8001206:	2204      	movs	r2, #4
 8001208:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='u'){
 800120a:	7afb      	ldrb	r3, [r7, #11]
 800120c:	2b75      	cmp	r3, #117	; 0x75
 800120e:	f041 8201 	bne.w	8002614 <main+0x1610>
      				cursor--;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <main+0x238>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	3b01      	subs	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <main+0x238>)
 800121c:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <main+0x25c>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
      			    if(cursor==MENU_RUN-1)
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <main+0x238>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b03      	cmp	r3, #3
 800122a:	f041 81f3 	bne.w	8002614 <main+0x1610>
      			    	cursor=MANUAL_CONTROL;
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <main+0x238>)
 8001230:	220a      	movs	r2, #10
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	f001 b9ee 	b.w	8002614 <main+0x1610>
 8001238:	200001cd 	.word	0x200001cd
 800123c:	200001c0 	.word	0x200001c0
 8001240:	40010800 	.word	0x40010800
 8001244:	40010c00 	.word	0x40010c00
 8001248:	08007bf8 	.word	0x08007bf8
 800124c:	200000d8 	.word	0x200000d8
 8001250:	20000014 	.word	0x20000014
 8001254:	200000d4 	.word	0x200000d4
 8001258:	08007c08 	.word	0x08007c08
 800125c:	08007c14 	.word	0x08007c14
 8001260:	200000ea 	.word	0x200000ea
      			 }
      		}
      	else if(st==MENU_RUN){
 8001264:	4bb1      	ldr	r3, [pc, #708]	; (800152c <main+0x528>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b04      	cmp	r3, #4
 800126a:	f001 81d3 	beq.w	8002614 <main+0x1610>
//
//      		}


      	}
      	else if(st==LEARNING){  /// LEARNING STATE ****************************************************
 800126e:	4baf      	ldr	r3, [pc, #700]	; (800152c <main+0x528>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d153      	bne.n	800131e <main+0x31a>
      			if(col_t==0){
 8001276:	4bae      	ldr	r3, [pc, #696]	; (8001530 <main+0x52c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <main+0x294>
      			    lcd16x2_clear();
 800127e:	f7ff fe87 	bl	8000f90 <lcd16x2_clear>
      			    show_cursor(cursor);
 8001282:	4bac      	ldr	r3, [pc, #688]	; (8001534 <main+0x530>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fd98 	bl	8002dbc <show_cursor>
      			    lcd16x2_cursorShow(0);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe57 	bl	8000f40 <lcd16x2_cursorShow>
      			    col_t=1;
 8001292:	4ba7      	ldr	r3, [pc, #668]	; (8001530 <main+0x52c>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
      			}
      			key=get_key();
 8001298:	f002 fd02 	bl	8003ca0 <get_key>
 800129c:	4603      	mov	r3, r0
 800129e:	72fb      	strb	r3, [r7, #11]
      			if(key=='d'){
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d10f      	bne.n	80012c6 <main+0x2c2>
      				cursor++;
 80012a6:	4ba3      	ldr	r3, [pc, #652]	; (8001534 <main+0x530>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4ba1      	ldr	r3, [pc, #644]	; (8001534 <main+0x530>)
 80012b0:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80012b2:	4b9f      	ldr	r3, [pc, #636]	; (8001530 <main+0x52c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
      			    if(cursor==MODE2+1)
 80012b8:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <main+0x530>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b0d      	cmp	r3, #13
 80012be:	d102      	bne.n	80012c6 <main+0x2c2>
      			    	cursor=MODE1;
 80012c0:	4b9c      	ldr	r3, [pc, #624]	; (8001534 <main+0x530>)
 80012c2:	220b      	movs	r2, #11
 80012c4:	701a      	strb	r2, [r3, #0]
      			}
      			 if(key=='u'){
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	2b75      	cmp	r3, #117	; 0x75
 80012ca:	d10f      	bne.n	80012ec <main+0x2e8>
      			   cursor--;
 80012cc:	4b99      	ldr	r3, [pc, #612]	; (8001534 <main+0x530>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b97      	ldr	r3, [pc, #604]	; (8001534 <main+0x530>)
 80012d6:	701a      	strb	r2, [r3, #0]
      			   col_t=0;
 80012d8:	4b95      	ldr	r3, [pc, #596]	; (8001530 <main+0x52c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
      			   if(cursor==MODE1-1)
 80012de:	4b95      	ldr	r3, [pc, #596]	; (8001534 <main+0x530>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d102      	bne.n	80012ec <main+0x2e8>
      			    	cursor=MODE2;
 80012e6:	4b93      	ldr	r3, [pc, #588]	; (8001534 <main+0x530>)
 80012e8:	220c      	movs	r2, #12
 80012ea:	701a      	strb	r2, [r3, #0]
      			 }
      			 if(key=='s'){
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	2b73      	cmp	r3, #115	; 0x73
 80012f0:	d106      	bne.n	8001300 <main+0x2fc>
      				 st=cursor;
 80012f2:	4b90      	ldr	r3, [pc, #576]	; (8001534 <main+0x530>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b8d      	ldr	r3, [pc, #564]	; (800152c <main+0x528>)
 80012f8:	701a      	strb	r2, [r3, #0]
      				 col_t=0;
 80012fa:	4b8d      	ldr	r3, [pc, #564]	; (8001530 <main+0x52c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
      			 }
      			 if(key=='m'){
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	2b6d      	cmp	r3, #109	; 0x6d
 8001304:	f041 8186 	bne.w	8002614 <main+0x1610>
      				 col_t=0;
 8001308:	4b89      	ldr	r3, [pc, #548]	; (8001530 <main+0x52c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
      			     st=MENU;
 800130e:	4b87      	ldr	r3, [pc, #540]	; (800152c <main+0x528>)
 8001310:	2203      	movs	r2, #3
 8001312:	701a      	strb	r2, [r3, #0]
      			     cursor=LEARNING;
 8001314:	4b87      	ldr	r3, [pc, #540]	; (8001534 <main+0x530>)
 8001316:	2205      	movs	r2, #5
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	f001 b97b 	b.w	8002614 <main+0x1610>
      			 }
      		}

      	else if(st==MODE1){  /// MODE1  *******************************************************
 800131e:	4b83      	ldr	r3, [pc, #524]	; (800152c <main+0x528>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b0b      	cmp	r3, #11
 8001324:	d12d      	bne.n	8001382 <main+0x37e>
      		if(cc==0){
 8001326:	4b84      	ldr	r3, [pc, #528]	; (8001538 <main+0x534>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d125      	bne.n	800137a <main+0x376>
      			send_write_coil(0x9fe, 0xff00);
 800132e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001332:	f640 10fe 	movw	r0, #2558	; 0x9fe
 8001336:	f002 f899 	bl	800346c <send_write_coil>
      	//	if(mm==1){
      			lcd16x2_clear();
 800133a:	f7ff fe29 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("move and");
 800133e:	487f      	ldr	r0, [pc, #508]	; (800153c <main+0x538>)
 8001340:	f7ff fe30 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 8001344:	f7ff fdf4 	bl	8000f30 <lcd16x2_2ndLine>
      			lcd16x2_printf("set points  ");
 8001348:	487d      	ldr	r0, [pc, #500]	; (8001540 <main+0x53c>)
 800134a:	f7ff fe2b 	bl	8000fa4 <lcd16x2_printf>

      			lcd16x2_cursorShow(0);
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fdf6 	bl	8000f40 <lcd16x2_cursorShow>
      			if(cc==0){
 8001354:	4b78      	ldr	r3, [pc, #480]	; (8001538 <main+0x534>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <main+0x36c>
      			send_read_one_register(0x1006);
 800135c:	f241 0006 	movw	r0, #4102	; 0x1006
 8001360:	f002 f940 	bl	80035e4 <send_read_one_register>
      			cc++;
 8001364:	4b74      	ldr	r3, [pc, #464]	; (8001538 <main+0x534>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b72      	ldr	r3, [pc, #456]	; (8001538 <main+0x534>)
 800136e:	701a      	strb	r2, [r3, #0]
      			}
      			set_counter(counter);
 8001370:	4b74      	ldr	r3, [pc, #464]	; (8001544 <main+0x540>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f001 ff1f 	bl	80031b8 <set_counter>
      		}
      			run_repeat_command_learning();
 800137a:	f001 fb1d 	bl	80029b8 <run_repeat_command_learning>
 800137e:	f001 b949 	b.w	8002614 <main+0x1610>


//      		}

      		}
      	else if(st==LEARN_QUESTION){
 8001382:	4b6a      	ldr	r3, [pc, #424]	; (800152c <main+0x528>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b0d      	cmp	r3, #13
 8001388:	d144      	bne.n	8001414 <main+0x410>
      			lcd16x2_clear();
 800138a:	f7ff fe01 	bl	8000f90 <lcd16x2_clear>
      			show_cursor(cursor);
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <main+0x530>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fd12 	bl	8002dbc <show_cursor>
      			key=get_key();
 8001398:	f002 fc82 	bl	8003ca0 <get_key>
 800139c:	4603      	mov	r3, r0
 800139e:	72fb      	strb	r3, [r7, #11]
      			if(key=='d'){
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d10c      	bne.n	80013c0 <main+0x3bc>
      				cursor++;
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <main+0x530>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b61      	ldr	r3, [pc, #388]	; (8001534 <main+0x530>)
 80013b0:	701a      	strb	r2, [r3, #0]
      				if(cursor==WAIT_FOR_SENSOR+1)
 80013b2:	4b60      	ldr	r3, [pc, #384]	; (8001534 <main+0x530>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d102      	bne.n	80013c0 <main+0x3bc>
      				cursor=TIME_TO_WAIT;
 80013ba:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <main+0x530>)
 80013bc:	220f      	movs	r2, #15
 80013be:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='u'){
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	2b75      	cmp	r3, #117	; 0x75
 80013c4:	d10c      	bne.n	80013e0 <main+0x3dc>
      			    cursor--;
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <main+0x530>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b59      	ldr	r3, [pc, #356]	; (8001534 <main+0x530>)
 80013d0:	701a      	strb	r2, [r3, #0]
      			   if(cursor==TIME_TO_WAIT-1)
 80013d2:	4b58      	ldr	r3, [pc, #352]	; (8001534 <main+0x530>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b0e      	cmp	r3, #14
 80013d8:	d102      	bne.n	80013e0 <main+0x3dc>
      			    cursor=WAIT_FOR_SENSOR;
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <main+0x530>)
 80013dc:	220e      	movs	r2, #14
 80013de:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='s'){
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	2b73      	cmp	r3, #115	; 0x73
 80013e4:	d105      	bne.n	80013f2 <main+0x3ee>
      				st=cursor;
 80013e6:	4b53      	ldr	r3, [pc, #332]	; (8001534 <main+0x530>)
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	4b50      	ldr	r3, [pc, #320]	; (800152c <main+0x528>)
 80013ec:	701a      	strb	r2, [r3, #0]
      				lcd16x2_clear();
 80013ee:	f7ff fdcf 	bl	8000f90 <lcd16x2_clear>
      				//TO DO
      			}
      			if(key=='m'){
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	2b6d      	cmp	r3, #109	; 0x6d
 80013f6:	f041 810d 	bne.w	8002614 <main+0x1610>
      			   st=MODE1;
 80013fa:	4b4c      	ldr	r3, [pc, #304]	; (800152c <main+0x528>)
 80013fc:	220b      	movs	r2, #11
 80013fe:	701a      	strb	r2, [r3, #0]
      			   send_write_coil(0x09e0, 0x0);
 8001400:	2100      	movs	r1, #0
 8001402:	f44f 601e 	mov.w	r0, #2528	; 0x9e0
 8001406:	f002 f831 	bl	800346c <send_write_coil>
      			   cursor=MODE1;
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <main+0x530>)
 800140c:	220b      	movs	r2, #11
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	f001 b900 	b.w	8002614 <main+0x1610>
      		}




      	else if(st==TIME_TO_WAIT){
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <main+0x528>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d142      	bne.n	80014a2 <main+0x49e>
      			if(col_t==0){
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <main+0x52c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d107      	bne.n	8001434 <main+0x430>
      			    lcd16x2_clear();
 8001424:	f7ff fdb4 	bl	8000f90 <lcd16x2_clear>
      			    lcd16x2_printf("wait time(0-72000):");
 8001428:	4847      	ldr	r0, [pc, #284]	; (8001548 <main+0x544>)
 800142a:	f7ff fdbb 	bl	8000fa4 <lcd16x2_printf>
      			    lcd16x2_2ndLine();
 800142e:	f7ff fd7f 	bl	8000f30 <lcd16x2_2ndLine>
 8001432:	e005      	b.n	8001440 <main+0x43c>
      			}
      			else{

      			   lcd16x2_setCursor(2, col_t);
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <main+0x52c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff fd54 	bl	8000ee8 <lcd16x2_setCursor>
      			}

      			key=get_key();
 8001440:	f002 fc2e 	bl	8003ca0 <get_key>
 8001444:	4603      	mov	r3, r0
 8001446:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){//speed_man=40;
 8001448:	7afb      	ldrb	r3, [r7, #11]
 800144a:	2b73      	cmp	r3, #115	; 0x73
 800144c:	d113      	bne.n	8001476 <main+0x472>
      			   if( waiting_time>72000){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a3e      	ldr	r2, [pc, #248]	; (800154c <main+0x548>)
 8001452:	4293      	cmp	r3, r2
 8001454:	f201 80de 	bhi.w	8002614 <main+0x1610>
      			    					// to_Do

      			   }
      			   else{

      				   send_write_two_register(0x100B,0x100A,waiting_time);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	f241 010a 	movw	r1, #4106	; 0x100a
 8001460:	f241 000b 	movw	r0, #4107	; 0x100b
 8001464:	f001 ff86 	bl	8003374 <send_write_two_register>
      				   waiting_time=0;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
      				  lcd16x2_printf("  saved!!");
 800146c:	4838      	ldr	r0, [pc, #224]	; (8001550 <main+0x54c>)
 800146e:	f7ff fd99 	bl	8000fa4 <lcd16x2_printf>
 8001472:	f001 b8cf 	b.w	8002614 <main+0x1610>
      			   }
      			 }
      			else if(key=='m'){
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	2b6d      	cmp	r3, #109	; 0x6d
 800147a:	d10a      	bne.n	8001492 <main+0x48e>
      				 st=LEARN_QUESTION;
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <main+0x528>)
 800147e:	220d      	movs	r2, #13
 8001480:	701a      	strb	r2, [r3, #0]
      				 cursor=TIME_TO_WAIT;
 8001482:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <main+0x530>)
 8001484:	220f      	movs	r2, #15
 8001486:	701a      	strb	r2, [r3, #0]
      				 col_t=0;
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <main+0x52c>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	f001 b8c1 	b.w	8002614 <main+0x1610>
      			}
      			 else{
      			    set_time_wait(key, &waiting_time);
 8001492:	1d3a      	adds	r2, r7, #4
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fe45 	bl	8003128 <set_time_wait>
 800149e:	f001 b8b9 	b.w	8002614 <main+0x1610>
      			 }

      		}

      	else if(st==WAIT_FOR_SENSOR){
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <main+0x528>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b0e      	cmp	r3, #14
 80014a8:	f040 813c 	bne.w	8001724 <main+0x720>

      		if(sensor_num_cursor%2==1){
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <main+0x550>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d073      	beq.n	80015a2 <main+0x59e>
      			key=get_key_for_sensor_number();
 80014ba:	f002 fd59 	bl	8003f70 <get_key_for_sensor_number>
 80014be:	4603      	mov	r3, r0
 80014c0:	72fb      	strb	r3, [r7, #11]
      			if(key=='m'){
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b6d      	cmp	r3, #109	; 0x6d
 80014c6:	d125      	bne.n	8001514 <main+0x510>
      				st=LEARN_QUESTION;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <main+0x528>)
 80014ca:	220d      	movs	r2, #13
 80014cc:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <main+0x52c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
      				cursor=TIME_TO_WAIT;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <main+0x530>)
 80014d6:	220f      	movs	r2, #15
 80014d8:	701a      	strb	r2, [r3, #0]
      				sensor_num_cursor=1;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <main+0x550>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]

      				// char sensor_numbers[5]={};
      				for(uint8_t i=0;i<5;i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]
 80014e4:	e00d      	b.n	8001502 <main+0x4fe>
      					sensor_temp[i]=0;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <main+0x554>)
 80014ea:	2100      	movs	r1, #0
 80014ec:	54d1      	strb	r1, [r2, r3]
      					if(i<4)
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d803      	bhi.n	80014fc <main+0x4f8>
      						sensor_temp_andor[i]=0;
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	4a19      	ldr	r2, [pc, #100]	; (800155c <main+0x558>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	54d1      	strb	r1, [r2, r3]
      				for(uint8_t i=0;i<5;i++){
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3301      	adds	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d9ee      	bls.n	80014e6 <main+0x4e2>
      				}
      				sensor_counter=0;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <main+0x55c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
      				sensor_counter_andor=0;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <main+0x560>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
      			}



      			if(key=='r'){
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b72      	cmp	r3, #114	; 0x72
 8001518:	d13f      	bne.n	800159a <main+0x596>
      				st=WAIT_FOR_SENSOR;
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <main+0x528>)
 800151c:	220e      	movs	r2, #14
 800151e:	701a      	strb	r2, [r3, #0]
      				sensor_num_cursor=1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <main+0x550>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
      				for(uint8_t i=0;i<5;i++){
 8001526:	2300      	movs	r3, #0
 8001528:	75bb      	strb	r3, [r7, #22]
 800152a:	e02b      	b.n	8001584 <main+0x580>
 800152c:	200001cd 	.word	0x200001cd
 8001530:	200000ea 	.word	0x200000ea
 8001534:	200001c0 	.word	0x200001c0
 8001538:	200000eb 	.word	0x200000eb
 800153c:	08007c24 	.word	0x08007c24
 8001540:	08007c30 	.word	0x08007c30
 8001544:	200000cc 	.word	0x200000cc
 8001548:	08007c40 	.word	0x08007c40
 800154c:	00011940 	.word	0x00011940
 8001550:	08007c54 	.word	0x08007c54
 8001554:	20000018 	.word	0x20000018
 8001558:	200000dc 	.word	0x200000dc
 800155c:	200000e4 	.word	0x200000e4
 8001560:	200000e1 	.word	0x200000e1
 8001564:	200000e8 	.word	0x200000e8
      					sensor_temp[i]=0;
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	4aa1      	ldr	r2, [pc, #644]	; (80017f0 <main+0x7ec>)
 800156c:	2100      	movs	r1, #0
 800156e:	54d1      	strb	r1, [r2, r3]
      					if(i<4)
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d803      	bhi.n	800157e <main+0x57a>
      						sensor_temp_andor[i]=0;
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	4a9e      	ldr	r2, [pc, #632]	; (80017f4 <main+0x7f0>)
 800157a:	2100      	movs	r1, #0
 800157c:	54d1      	strb	r1, [r2, r3]
      				for(uint8_t i=0;i<5;i++){
 800157e:	7dbb      	ldrb	r3, [r7, #22]
 8001580:	3301      	adds	r3, #1
 8001582:	75bb      	strb	r3, [r7, #22]
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d9ee      	bls.n	8001568 <main+0x564>
      				}
      				sensor_counter=0;
 800158a:	4b9b      	ldr	r3, [pc, #620]	; (80017f8 <main+0x7f4>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
      				sensor_counter_andor=0;
 8001590:	4b9a      	ldr	r3, [pc, #616]	; (80017fc <main+0x7f8>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
      				lcd16x2_clear();
 8001596:	f7ff fcfb 	bl	8000f90 <lcd16x2_clear>
      			}
      			set_char_for_sensor(key);
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fa6d 	bl	8003a7c <set_char_for_sensor>


      		}


      		if(sensor_num_cursor%2==0){
 80015a2:	4b97      	ldr	r3, [pc, #604]	; (8001800 <main+0x7fc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f041 8031 	bne.w	8002614 <main+0x1610>
      			key=get_key_for_sensor_andor();
 80015b2:	f002 fd99 	bl	80040e8 <get_key_for_sensor_andor>
 80015b6:	4603      	mov	r3, r0
 80015b8:	72fb      	strb	r3, [r7, #11]
      			if(key=='m'){
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	2b6d      	cmp	r3, #109	; 0x6d
 80015be:	d125      	bne.n	800160c <main+0x608>
      				st=LEARN_QUESTION;
 80015c0:	4b90      	ldr	r3, [pc, #576]	; (8001804 <main+0x800>)
 80015c2:	220d      	movs	r2, #13
 80015c4:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80015c6:	4b90      	ldr	r3, [pc, #576]	; (8001808 <main+0x804>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
      				cursor=TIME_TO_WAIT;
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <main+0x808>)
 80015ce:	220f      	movs	r2, #15
 80015d0:	701a      	strb	r2, [r3, #0]
      				sensor_num_cursor=1;
 80015d2:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <main+0x7fc>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]

      				// char sensor_numbers[5]={};
      				for(uint8_t i=0;i<5;i++){
 80015d8:	2300      	movs	r3, #0
 80015da:	757b      	strb	r3, [r7, #21]
 80015dc:	e00d      	b.n	80015fa <main+0x5f6>
      					sensor_temp[i]=0;
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	4a83      	ldr	r2, [pc, #524]	; (80017f0 <main+0x7ec>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	54d1      	strb	r1, [r2, r3]
      					if(i<4)
 80015e6:	7d7b      	ldrb	r3, [r7, #21]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d803      	bhi.n	80015f4 <main+0x5f0>
      						sensor_temp_andor[i]=0;
 80015ec:	7d7b      	ldrb	r3, [r7, #21]
 80015ee:	4a81      	ldr	r2, [pc, #516]	; (80017f4 <main+0x7f0>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	54d1      	strb	r1, [r2, r3]
      				for(uint8_t i=0;i<5;i++){
 80015f4:	7d7b      	ldrb	r3, [r7, #21]
 80015f6:	3301      	adds	r3, #1
 80015f8:	757b      	strb	r3, [r7, #21]
 80015fa:	7d7b      	ldrb	r3, [r7, #21]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d9ee      	bls.n	80015de <main+0x5da>
      				}
      				sensor_counter=0;
 8001600:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <main+0x7f4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
      				sensor_counter_andor=0;
 8001606:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <main+0x7f8>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
      			}

      			if(key=='s'){
 800160c:	7afb      	ldrb	r3, [r7, #11]
 800160e:	2b73      	cmp	r3, #115	; 0x73
 8001610:	d15d      	bne.n	80016ce <main+0x6ca>
      				uint32_t sum_t=0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
      				uint16_t sum_t_andor=0;
 8001616:	2300      	movs	r3, #0
 8001618:	81fb      	strh	r3, [r7, #14]
      				for(uint8_t i=0;i<5;i++){
 800161a:	2300      	movs	r3, #0
 800161c:	737b      	strb	r3, [r7, #13]
 800161e:	e041      	b.n	80016a4 <main+0x6a0>
      					sum_t+=sensor_temp[i]*((uint32_t)pow(10,4-i));
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	4a73      	ldr	r2, [pc, #460]	; (80017f0 <main+0x7ec>)
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	461c      	mov	r4, r3
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	f1c3 0304 	rsb	r3, r3, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fee8 	bl	8000404 <__aeabi_i2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	4974      	ldr	r1, [pc, #464]	; (8001810 <main+0x80c>)
 800163e:	f005 faa7 	bl	8006b90 <pow>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff f9f5 	bl	8000a38 <__aeabi_d2uiz>
 800164e:	4603      	mov	r3, r0
 8001650:	fb03 f304 	mul.w	r3, r3, r4
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4413      	add	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
      					if(i<4){
 800165a:	7b7b      	ldrb	r3, [r7, #13]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d81e      	bhi.n	800169e <main+0x69a>
      						sum_t_andor+=sensor_temp_andor[i]*((uint16_t)pow(10,3-i));
 8001660:	7b7b      	ldrb	r3, [r7, #13]
 8001662:	4a64      	ldr	r2, [pc, #400]	; (80017f4 <main+0x7f0>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	461c      	mov	r4, r3
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	f1c3 0303 	rsb	r3, r3, #3
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fec8 	bl	8000404 <__aeabi_i2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	4964      	ldr	r1, [pc, #400]	; (8001810 <main+0x80c>)
 800167e:	f005 fa87 	bl	8006b90 <pow>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff f9d5 	bl	8000a38 <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	b29b      	uxth	r3, r3
 8001692:	fb03 f304 	mul.w	r3, r3, r4
 8001696:	b29a      	uxth	r2, r3
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	4413      	add	r3, r2
 800169c:	81fb      	strh	r3, [r7, #14]
      				for(uint8_t i=0;i<5;i++){
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	3301      	adds	r3, #1
 80016a2:	737b      	strb	r3, [r7, #13]
 80016a4:	7b7b      	ldrb	r3, [r7, #13]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d9ba      	bls.n	8001620 <main+0x61c>
      					}
      				}
      				send_write_two_register(0x100d, 0x100c, sum_t);
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	f241 010c 	movw	r1, #4108	; 0x100c
 80016b0:	f241 000d 	movw	r0, #4109	; 0x100d
 80016b4:	f001 fe5e 	bl	8003374 <send_write_two_register>
      				send_write_register(0x100e, sum_t_andor);
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	4619      	mov	r1, r3
 80016bc:	f241 000e 	movw	r0, #4110	; 0x100e
 80016c0:	f001 fe12 	bl	80032e8 <send_write_register>
      				lcd16x2_2ndLine();
 80016c4:	f7ff fc34 	bl	8000f30 <lcd16x2_2ndLine>
      				lcd16x2_printf("saved!!");
 80016c8:	4852      	ldr	r0, [pc, #328]	; (8001814 <main+0x810>)
 80016ca:	f7ff fc6b 	bl	8000fa4 <lcd16x2_printf>





      			if(key=='r'){
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	2b72      	cmp	r3, #114	; 0x72
 80016d2:	d121      	bne.n	8001718 <main+0x714>
      				st=WAIT_FOR_SENSOR;
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <main+0x800>)
 80016d6:	220e      	movs	r2, #14
 80016d8:	701a      	strb	r2, [r3, #0]
      				sensor_num_cursor=1;
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <main+0x7fc>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]

      				// char sensor_numbers[5]={};
      				for(uint8_t i=0;i<5;i++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	733b      	strb	r3, [r7, #12]
 80016e4:	e00d      	b.n	8001702 <main+0x6fe>
      					sensor_temp[i]=0;
 80016e6:	7b3b      	ldrb	r3, [r7, #12]
 80016e8:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <main+0x7ec>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	54d1      	strb	r1, [r2, r3]
      					if(i<4)
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d803      	bhi.n	80016fc <main+0x6f8>
      						sensor_temp_andor[i]=0;
 80016f4:	7b3b      	ldrb	r3, [r7, #12]
 80016f6:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <main+0x7f0>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	54d1      	strb	r1, [r2, r3]
      				for(uint8_t i=0;i<5;i++){
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	733b      	strb	r3, [r7, #12]
 8001702:	7b3b      	ldrb	r3, [r7, #12]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d9ee      	bls.n	80016e6 <main+0x6e2>
      				}
      				sensor_counter=0;
 8001708:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <main+0x7f4>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
      				sensor_counter_andor=0;
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <main+0x7f8>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
      				lcd16x2_clear();
 8001714:	f7ff fc3c 	bl	8000f90 <lcd16x2_clear>
      			}
      			set_char_for_sensor_andor(key);
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fa62 	bl	8003be4 <set_char_for_sensor_andor>
 8001720:	f000 bf78 	b.w	8002614 <main+0x1610>
      		}

      		}


      	else if(st==PARAMETER_SETTING){  /// LEARNING STATE ****************************************************
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <main+0x800>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d175      	bne.n	8001818 <main+0x814>
      			if(col_t==0){
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <main+0x804>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <main+0x74a>
      				lcd16x2_clear();
 8001734:	f7ff fc2c 	bl	8000f90 <lcd16x2_clear>
      				show_cursor(cursor);
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <main+0x808>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fb3d 	bl	8002dbc <show_cursor>
      				lcd16x2_cursorShow(0);
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fbfc 	bl	8000f40 <lcd16x2_cursorShow>
      				col_t=1;
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <main+0x804>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
      			}
      			key=get_key();
 800174e:	f002 faa7 	bl	8003ca0 <get_key>
 8001752:	4603      	mov	r3, r0
 8001754:	72fb      	strb	r3, [r7, #11]
      			if(key=='d'){
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	2b64      	cmp	r3, #100	; 0x64
 800175a:	d10f      	bne.n	800177c <main+0x778>
      				cursor++;
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <main+0x808>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <main+0x808>)
 8001766:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <main+0x804>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
      				if(cursor==BREAK+1)
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <main+0x808>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b13      	cmp	r3, #19
 8001774:	d102      	bne.n	800177c <main+0x778>
      					cursor=SPEED;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <main+0x808>)
 8001778:	2211      	movs	r2, #17
 800177a:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='u'){
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	2b75      	cmp	r3, #117	; 0x75
 8001780:	d10f      	bne.n	80017a2 <main+0x79e>
      				cursor--;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <main+0x808>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <main+0x808>)
 800178c:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <main+0x804>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
      				if(cursor==SPEED-1)
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <main+0x808>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b10      	cmp	r3, #16
 800179a:	d102      	bne.n	80017a2 <main+0x79e>
      					cursor=BREAK;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <main+0x808>)
 800179e:	2212      	movs	r2, #18
 80017a0:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='s'){
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	2b73      	cmp	r3, #115	; 0x73
 80017a6:	d114      	bne.n	80017d2 <main+0x7ce>
      				st=cursor;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <main+0x808>)
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <main+0x800>)
 80017ae:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <main+0x804>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
      				if(st==SPEED)
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <main+0x800>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	d102      	bne.n	80017c4 <main+0x7c0>
      					cursor=SPEED_MODE1;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <main+0x808>)
 80017c0:	2213      	movs	r2, #19
 80017c2:	701a      	strb	r2, [r3, #0]
      				if(st==BREAK)
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <main+0x800>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b12      	cmp	r3, #18
 80017ca:	d102      	bne.n	80017d2 <main+0x7ce>
      					cursor=BREAK_VERTICAL_ACTUATOR;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <main+0x808>)
 80017ce:	2219      	movs	r2, #25
 80017d0:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='m'){
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	2b6d      	cmp	r3, #109	; 0x6d
 80017d6:	f040 871d 	bne.w	8002614 <main+0x1610>
      				st=MENU;
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <main+0x800>)
 80017dc:	2203      	movs	r2, #3
 80017de:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <main+0x804>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
      				cursor=MENU_RUN;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <main+0x808>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	f000 bf12 	b.w	8002614 <main+0x1610>
 80017f0:	200000dc 	.word	0x200000dc
 80017f4:	200000e4 	.word	0x200000e4
 80017f8:	200000e1 	.word	0x200000e1
 80017fc:	200000e8 	.word	0x200000e8
 8001800:	20000018 	.word	0x20000018
 8001804:	200001cd 	.word	0x200001cd
 8001808:	200000ea 	.word	0x200000ea
 800180c:	200001c0 	.word	0x200001c0
 8001810:	40240000 	.word	0x40240000
 8001814:	08007c60 	.word	0x08007c60
      			}
      		}
      	else if(st==SPEED){  /// LEARNING STATE ****************************************************
 8001818:	4bad      	ldr	r3, [pc, #692]	; (8001ad0 <main+0xacc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b11      	cmp	r3, #17
 800181e:	d161      	bne.n	80018e4 <main+0x8e0>
      			if(col_t==0){
 8001820:	4bac      	ldr	r3, [pc, #688]	; (8001ad4 <main+0xad0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10c      	bne.n	8001842 <main+0x83e>
      				lcd16x2_clear();
 8001828:	f7ff fbb2 	bl	8000f90 <lcd16x2_clear>
      				show_cursor(cursor);
 800182c:	4baa      	ldr	r3, [pc, #680]	; (8001ad8 <main+0xad4>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fac3 	bl	8002dbc <show_cursor>
      				lcd16x2_cursorShow(0);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fb82 	bl	8000f40 <lcd16x2_cursorShow>
      				col_t=1;
 800183c:	4ba5      	ldr	r3, [pc, #660]	; (8001ad4 <main+0xad0>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
      			}
      			key=get_key();
 8001842:	f002 fa2d 	bl	8003ca0 <get_key>
 8001846:	4603      	mov	r3, r0
 8001848:	72fb      	strb	r3, [r7, #11]
      			if(key=='d'){
 800184a:	7afb      	ldrb	r3, [r7, #11]
 800184c:	2b64      	cmp	r3, #100	; 0x64
 800184e:	d10f      	bne.n	8001870 <main+0x86c>
      				cursor++;
 8001850:	4ba1      	ldr	r3, [pc, #644]	; (8001ad8 <main+0xad4>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b9f      	ldr	r3, [pc, #636]	; (8001ad8 <main+0xad4>)
 800185a:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 800185c:	4b9d      	ldr	r3, [pc, #628]	; (8001ad4 <main+0xad0>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
      				if(cursor==SPEED_MODE2+1)
 8001862:	4b9d      	ldr	r3, [pc, #628]	; (8001ad8 <main+0xad4>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b15      	cmp	r3, #21
 8001868:	d102      	bne.n	8001870 <main+0x86c>
      					cursor=SPEED_MODE1;
 800186a:	4b9b      	ldr	r3, [pc, #620]	; (8001ad8 <main+0xad4>)
 800186c:	2213      	movs	r2, #19
 800186e:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='u'){
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	2b75      	cmp	r3, #117	; 0x75
 8001874:	d10f      	bne.n	8001896 <main+0x892>
      				cursor--;
 8001876:	4b98      	ldr	r3, [pc, #608]	; (8001ad8 <main+0xad4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <main+0xad4>)
 8001880:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 8001882:	4b94      	ldr	r3, [pc, #592]	; (8001ad4 <main+0xad0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
      				if(cursor==SPEED_MODE1-1)
 8001888:	4b93      	ldr	r3, [pc, #588]	; (8001ad8 <main+0xad4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d102      	bne.n	8001896 <main+0x892>
      					cursor=SPEED_MODE2;
 8001890:	4b91      	ldr	r3, [pc, #580]	; (8001ad8 <main+0xad4>)
 8001892:	2214      	movs	r2, #20
 8001894:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='s'){
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	2b73      	cmp	r3, #115	; 0x73
 800189a:	d114      	bne.n	80018c6 <main+0x8c2>
      				st=cursor;
 800189c:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <main+0xad4>)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <main+0xacc>)
 80018a2:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80018a4:	4b8b      	ldr	r3, [pc, #556]	; (8001ad4 <main+0xad0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
      				if(st==SPEED_MODE1)
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <main+0xacc>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b13      	cmp	r3, #19
 80018b0:	d102      	bne.n	80018b8 <main+0x8b4>
      					cursor=SPEED_MODE1_CALIBRATION;
 80018b2:	4b89      	ldr	r3, [pc, #548]	; (8001ad8 <main+0xad4>)
 80018b4:	2215      	movs	r2, #21
 80018b6:	701a      	strb	r2, [r3, #0]
      				if(st==SPEED_MODE2)
 80018b8:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <main+0xacc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b14      	cmp	r3, #20
 80018be:	d102      	bne.n	80018c6 <main+0x8c2>
      					cursor=SPEED_MODE2_CALIBRATION;
 80018c0:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <main+0xad4>)
 80018c2:	2217      	movs	r2, #23
 80018c4:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='m'){
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	2b6d      	cmp	r3, #109	; 0x6d
 80018ca:	f040 86a3 	bne.w	8002614 <main+0x1610>
      				st=PARAMETER_SETTING;
 80018ce:	4b80      	ldr	r3, [pc, #512]	; (8001ad0 <main+0xacc>)
 80018d0:	2206      	movs	r2, #6
 80018d2:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 80018d4:	4b7f      	ldr	r3, [pc, #508]	; (8001ad4 <main+0xad0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
      				cursor=SPEED;
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <main+0xad4>)
 80018dc:	2211      	movs	r2, #17
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	f000 be98 	b.w	8002614 <main+0x1610>
      			}
      		}
      	else if(st==SPEED_MODE1){  /// SPEED MODE1 STATE ****************************************************
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <main+0xacc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b13      	cmp	r3, #19
 80018ea:	d153      	bne.n	8001994 <main+0x990>
      			if(col_t==0){
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <main+0xad0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10c      	bne.n	800190e <main+0x90a>
      				lcd16x2_clear();
 80018f4:	f7ff fb4c 	bl	8000f90 <lcd16x2_clear>
      				show_cursor(cursor);
 80018f8:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <main+0xad4>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fa5d 	bl	8002dbc <show_cursor>
      				lcd16x2_cursorShow(0);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fb1c 	bl	8000f40 <lcd16x2_cursorShow>
      				col_t=1;
 8001908:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <main+0xad0>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
      			}
      			key=get_key();
 800190e:	f002 f9c7 	bl	8003ca0 <get_key>
 8001912:	4603      	mov	r3, r0
 8001914:	72fb      	strb	r3, [r7, #11]
      			if(key=='d'){
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	2b64      	cmp	r3, #100	; 0x64
 800191a:	d10f      	bne.n	800193c <main+0x938>
      				cursor++;
 800191c:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <main+0xad4>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <main+0xad4>)
 8001926:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 8001928:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <main+0xad0>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
      				if(cursor==SPEED_MODE1_CYCLE+1)
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <main+0xad4>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b17      	cmp	r3, #23
 8001934:	d102      	bne.n	800193c <main+0x938>
      					cursor=SPEED_MODE1_CALIBRATION;
 8001936:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <main+0xad4>)
 8001938:	2215      	movs	r2, #21
 800193a:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='u'){
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	2b75      	cmp	r3, #117	; 0x75
 8001940:	d10f      	bne.n	8001962 <main+0x95e>
      				cursor--;
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <main+0xad4>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3b01      	subs	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <main+0xad4>)
 800194c:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 800194e:	4b61      	ldr	r3, [pc, #388]	; (8001ad4 <main+0xad0>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
      				if(cursor==SPEED_MODE1_CALIBRATION-1)
 8001954:	4b60      	ldr	r3, [pc, #384]	; (8001ad8 <main+0xad4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b14      	cmp	r3, #20
 800195a:	d102      	bne.n	8001962 <main+0x95e>
      					cursor=SPEED_MODE1_CYCLE;
 800195c:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <main+0xad4>)
 800195e:	2216      	movs	r2, #22
 8001960:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='s'){
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	2b73      	cmp	r3, #115	; 0x73
 8001966:	d106      	bne.n	8001976 <main+0x972>
      				st=cursor;
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <main+0xad4>)
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <main+0xacc>)
 800196e:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 8001970:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <main+0xad0>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='m'){
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	2b6d      	cmp	r3, #109	; 0x6d
 800197a:	f040 864b 	bne.w	8002614 <main+0x1610>
      				col_t=0;
 800197e:	4b55      	ldr	r3, [pc, #340]	; (8001ad4 <main+0xad0>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
      				st=SPEED;
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <main+0xacc>)
 8001986:	2211      	movs	r2, #17
 8001988:	701a      	strb	r2, [r3, #0]
      				cursor=SPEED_MODE1;
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <main+0xad4>)
 800198c:	2213      	movs	r2, #19
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	f000 be40 	b.w	8002614 <main+0x1610>
      			}
      		}


      	else if(st==SPEED_MODE1_CALIBRATION){
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <main+0xacc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b15      	cmp	r3, #21
 800199a:	d14a      	bne.n	8001a32 <main+0xa2e>
      		if(col==0){
 800199c:	4b4f      	ldr	r3, [pc, #316]	; (8001adc <main+0xad8>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <main+0x9b0>
      			lcd16x2_clear();
 80019a4:	f7ff faf4 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("speed(6-40):");
 80019a8:	484d      	ldr	r0, [pc, #308]	; (8001ae0 <main+0xadc>)
 80019aa:	f7ff fafb 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 80019ae:	f7ff fabf 	bl	8000f30 <lcd16x2_2ndLine>
 80019b2:	e008      	b.n	80019c6 <main+0x9c2>
      		}
      		else{
      			lcd16x2_setCursor(2, col);
 80019b4:	4b49      	ldr	r3, [pc, #292]	; (8001adc <main+0xad8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	2002      	movs	r0, #2
 80019bc:	f7ff fa94 	bl	8000ee8 <lcd16x2_setCursor>
      			lcd16x2_cursorShow(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff fabd 	bl	8000f40 <lcd16x2_cursorShow>
      		}
      		key=get_key();
 80019c6:	f002 f96b 	bl	8003ca0 <get_key>
 80019ca:	4603      	mov	r3, r0
 80019cc:	72fb      	strb	r3, [r7, #11]
      		if(key=='s'){//speed_man=40;
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	2b73      	cmp	r3, #115	; 0x73
 80019d2:	d112      	bne.n	80019fa <main+0x9f6>
      			if( speed_man>40 || speed_man<6){
 80019d4:	893b      	ldrh	r3, [r7, #8]
 80019d6:	2b28      	cmp	r3, #40	; 0x28
 80019d8:	f200 861c 	bhi.w	8002614 <main+0x1610>
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	f240 8618 	bls.w	8002614 <main+0x1610>

      			    					// to_Do
      			}
      			else{
      				send_write_register(0x119B,speed_man);
 80019e4:	893b      	ldrh	r3, [r7, #8]
 80019e6:	4619      	mov	r1, r3
 80019e8:	f241 109b 	movw	r0, #4507	; 0x119b
 80019ec:	f001 fc7c 	bl	80032e8 <send_write_register>
      				lcd16x2_printf("   saved!!");
 80019f0:	483c      	ldr	r0, [pc, #240]	; (8001ae4 <main+0xae0>)
 80019f2:	f7ff fad7 	bl	8000fa4 <lcd16x2_printf>
 80019f6:	f000 be0d 	b.w	8002614 <main+0x1610>
      			}
      		}
      		else if(key=='m'){
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	2b6d      	cmp	r3, #109	; 0x6d
 80019fe:	d10f      	bne.n	8001a20 <main+0xa1c>
      			col_t=0;
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <main+0xad0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
      			col=0;
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <main+0xad8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
      			st=SPEED_MODE1;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <main+0xacc>)
 8001a0e:	2213      	movs	r2, #19
 8001a10:	701a      	strb	r2, [r3, #0]
      			cursor=SPEED_MODE1_CALIBRATION;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <main+0xad4>)
 8001a14:	2215      	movs	r2, #21
 8001a16:	701a      	strb	r2, [r3, #0]
      			speed_man=0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	813b      	strh	r3, [r7, #8]
 8001a1c:	f000 bdfa 	b.w	8002614 <main+0x1610>
      		}
      		else{
      			set_speed(key, &speed_man);
 8001a20:	f107 0208 	add.w	r2, r7, #8
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fb33 	bl	8003094 <set_speed>
 8001a2e:	f000 bdf1 	b.w	8002614 <main+0x1610>
      		}
      	}



      	else if(st==SPEED_MODE1_CYCLE){
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <main+0xacc>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b16      	cmp	r3, #22
 8001a38:	d156      	bne.n	8001ae8 <main+0xae4>
      		if(col==0){
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <main+0xad8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <main+0xa4e>
      			lcd16x2_clear();
 8001a42:	f7ff faa5 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("speed(6-40):");
 8001a46:	4826      	ldr	r0, [pc, #152]	; (8001ae0 <main+0xadc>)
 8001a48:	f7ff faac 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 8001a4c:	f7ff fa70 	bl	8000f30 <lcd16x2_2ndLine>
 8001a50:	e008      	b.n	8001a64 <main+0xa60>
      		}
      		else{
      			lcd16x2_setCursor(2, col);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <main+0xad8>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff fa45 	bl	8000ee8 <lcd16x2_setCursor>
      			lcd16x2_cursorShow(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fa6e 	bl	8000f40 <lcd16x2_cursorShow>
      		}
      		key=get_key();
 8001a64:	f002 f91c 	bl	8003ca0 <get_key>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	72fb      	strb	r3, [r7, #11]
      		if(key=='s'){//speed_man=40;
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	2b73      	cmp	r3, #115	; 0x73
 8001a70:	d112      	bne.n	8001a98 <main+0xa94>
      			if( speed_man>40 || speed_man<6){
 8001a72:	893b      	ldrh	r3, [r7, #8]
 8001a74:	2b28      	cmp	r3, #40	; 0x28
 8001a76:	f200 85cd 	bhi.w	8002614 <main+0x1610>
 8001a7a:	893b      	ldrh	r3, [r7, #8]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	f240 85c9 	bls.w	8002614 <main+0x1610>

      		    			    					// to_Do
      			}
      			else{
      				send_write_register(0x119c,speed_man);
 8001a82:	893b      	ldrh	r3, [r7, #8]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f241 109c 	movw	r0, #4508	; 0x119c
 8001a8a:	f001 fc2d 	bl	80032e8 <send_write_register>
      				lcd16x2_printf("   saved!!");
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <main+0xae0>)
 8001a90:	f7ff fa88 	bl	8000fa4 <lcd16x2_printf>
 8001a94:	f000 bdbe 	b.w	8002614 <main+0x1610>
      			}
      		}
      		else if(key=='m'){
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	2b6d      	cmp	r3, #109	; 0x6d
 8001a9c:	d10f      	bne.n	8001abe <main+0xaba>
      			col_t=0;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <main+0xad0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
      			col=0;
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <main+0xad8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
      			st=SPEED_MODE1;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <main+0xacc>)
 8001aac:	2213      	movs	r2, #19
 8001aae:	701a      	strb	r2, [r3, #0]
      			cursor=SPEED_MODE1_CALIBRATION;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <main+0xad4>)
 8001ab2:	2215      	movs	r2, #21
 8001ab4:	701a      	strb	r2, [r3, #0]
      			speed_man=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	f000 bdab 	b.w	8002614 <main+0x1610>
      		    			    		    			}
      		else{
      			set_speed(key, &speed_man);
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fae4 	bl	8003094 <set_speed>
 8001acc:	f000 bda2 	b.w	8002614 <main+0x1610>
 8001ad0:	200001cd 	.word	0x200001cd
 8001ad4:	200000ea 	.word	0x200000ea
 8001ad8:	200001c0 	.word	0x200001c0
 8001adc:	200000e9 	.word	0x200000e9
 8001ae0:	08007c68 	.word	0x08007c68
 8001ae4:	08007c78 	.word	0x08007c78
      		}
      	}
      	else if(st==SPEED_MODE2){  /// SPEED MODE2 STATE ****************************************************
 8001ae8:	4bad      	ldr	r3, [pc, #692]	; (8001da0 <main+0xd9c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b14      	cmp	r3, #20
 8001aee:	d153      	bne.n	8001b98 <main+0xb94>
      		if(col_t==0){
 8001af0:	4bac      	ldr	r3, [pc, #688]	; (8001da4 <main+0xda0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <main+0xb0e>
      			lcd16x2_clear();
 8001af8:	f7ff fa4a 	bl	8000f90 <lcd16x2_clear>
      			show_cursor(cursor);
 8001afc:	4baa      	ldr	r3, [pc, #680]	; (8001da8 <main+0xda4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 f95b 	bl	8002dbc <show_cursor>
      			lcd16x2_cursorShow(0);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fa1a 	bl	8000f40 <lcd16x2_cursorShow>
      			col_t=1;
 8001b0c:	4ba5      	ldr	r3, [pc, #660]	; (8001da4 <main+0xda0>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 8001b12:	f002 f8c5 	bl	8003ca0 <get_key>
 8001b16:	4603      	mov	r3, r0
 8001b18:	72fb      	strb	r3, [r7, #11]
      		if(key=='d'){
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	2b64      	cmp	r3, #100	; 0x64
 8001b1e:	d10f      	bne.n	8001b40 <main+0xb3c>
      			cursor++;
 8001b20:	4ba1      	ldr	r3, [pc, #644]	; (8001da8 <main+0xda4>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <main+0xda4>)
 8001b2a:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001b2c:	4b9d      	ldr	r3, [pc, #628]	; (8001da4 <main+0xda0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
      			if(cursor==SPEED_MODE2_CYCLE+1)
 8001b32:	4b9d      	ldr	r3, [pc, #628]	; (8001da8 <main+0xda4>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b19      	cmp	r3, #25
 8001b38:	d102      	bne.n	8001b40 <main+0xb3c>
      				cursor=SPEED_MODE2_CALIBRATION;
 8001b3a:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <main+0xda4>)
 8001b3c:	2217      	movs	r2, #23
 8001b3e:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='u'){
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	2b75      	cmp	r3, #117	; 0x75
 8001b44:	d10f      	bne.n	8001b66 <main+0xb62>
      			cursor--;
 8001b46:	4b98      	ldr	r3, [pc, #608]	; (8001da8 <main+0xda4>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <main+0xda4>)
 8001b50:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001b52:	4b94      	ldr	r3, [pc, #592]	; (8001da4 <main+0xda0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
      			if(cursor==SPEED_MODE2_CALIBRATION-1)
 8001b58:	4b93      	ldr	r3, [pc, #588]	; (8001da8 <main+0xda4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b16      	cmp	r3, #22
 8001b5e:	d102      	bne.n	8001b66 <main+0xb62>
      				cursor=SPEED_MODE2_CYCLE;
 8001b60:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <main+0xda4>)
 8001b62:	2218      	movs	r2, #24
 8001b64:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='s'){
 8001b66:	7afb      	ldrb	r3, [r7, #11]
 8001b68:	2b73      	cmp	r3, #115	; 0x73
 8001b6a:	d106      	bne.n	8001b7a <main+0xb76>
      			st=cursor;
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <main+0xda4>)
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <main+0xd9c>)
 8001b72:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <main+0xda0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='m'){
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	2b6d      	cmp	r3, #109	; 0x6d
 8001b7e:	f040 8549 	bne.w	8002614 <main+0x1610>
      			col_t=0;
 8001b82:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <main+0xda0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
      			st=SPEED;
 8001b88:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <main+0xd9c>)
 8001b8a:	2211      	movs	r2, #17
 8001b8c:	701a      	strb	r2, [r3, #0]
      			cursor=SPEED_MODE1;
 8001b8e:	4b86      	ldr	r3, [pc, #536]	; (8001da8 <main+0xda4>)
 8001b90:	2213      	movs	r2, #19
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	f000 bd3e 	b.w	8002614 <main+0x1610>
      		}
      	}



      	else if(st==SPEED_MODE2_CALIBRATION){
 8001b98:	4b81      	ldr	r3, [pc, #516]	; (8001da0 <main+0xd9c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b17      	cmp	r3, #23
 8001b9e:	d14a      	bne.n	8001c36 <main+0xc32>
      		if(col==0){
 8001ba0:	4b82      	ldr	r3, [pc, #520]	; (8001dac <main+0xda8>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <main+0xbb4>
      			lcd16x2_clear();
 8001ba8:	f7ff f9f2 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("speed(6-40):");
 8001bac:	4880      	ldr	r0, [pc, #512]	; (8001db0 <main+0xdac>)
 8001bae:	f7ff f9f9 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 8001bb2:	f7ff f9bd 	bl	8000f30 <lcd16x2_2ndLine>
 8001bb6:	e008      	b.n	8001bca <main+0xbc6>
      		}
      		else{
      			lcd16x2_setCursor(2, col);
 8001bb8:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <main+0xda8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7ff f992 	bl	8000ee8 <lcd16x2_setCursor>
      			lcd16x2_cursorShow(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff f9bb 	bl	8000f40 <lcd16x2_cursorShow>
      		}
      		key=get_key();
 8001bca:	f002 f869 	bl	8003ca0 <get_key>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	72fb      	strb	r3, [r7, #11]
      		if(key=='s'){//speed_man=40;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	2b73      	cmp	r3, #115	; 0x73
 8001bd6:	d112      	bne.n	8001bfe <main+0xbfa>
      			if( speed_man>40 || speed_man<6){
 8001bd8:	893b      	ldrh	r3, [r7, #8]
 8001bda:	2b28      	cmp	r3, #40	; 0x28
 8001bdc:	f200 851a 	bhi.w	8002614 <main+0x1610>
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	f240 8516 	bls.w	8002614 <main+0x1610>
      		    			    					// to_Do
      			}
      			else{
      				send_write_register(0x119D,speed_man);
 8001be8:	893b      	ldrh	r3, [r7, #8]
 8001bea:	4619      	mov	r1, r3
 8001bec:	f241 109d 	movw	r0, #4509	; 0x119d
 8001bf0:	f001 fb7a 	bl	80032e8 <send_write_register>
      				lcd16x2_printf("   saved!!");
 8001bf4:	486f      	ldr	r0, [pc, #444]	; (8001db4 <main+0xdb0>)
 8001bf6:	f7ff f9d5 	bl	8000fa4 <lcd16x2_printf>
 8001bfa:	f000 bd0b 	b.w	8002614 <main+0x1610>
      			}
      		}
      		else if(key=='m'){
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	2b6d      	cmp	r3, #109	; 0x6d
 8001c02:	d10f      	bne.n	8001c24 <main+0xc20>
      			col_t=0;
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <main+0xda0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
      			col=0;
 8001c0a:	4b68      	ldr	r3, [pc, #416]	; (8001dac <main+0xda8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
      			st=SPEED_MODE2;
 8001c10:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <main+0xd9c>)
 8001c12:	2214      	movs	r2, #20
 8001c14:	701a      	strb	r2, [r3, #0]
      			cursor=SPEED_MODE2_CALIBRATION;
 8001c16:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <main+0xda4>)
 8001c18:	2217      	movs	r2, #23
 8001c1a:	701a      	strb	r2, [r3, #0]
      			speed_man=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	813b      	strh	r3, [r7, #8]
 8001c20:	f000 bcf8 	b.w	8002614 <main+0x1610>
      		}
      		else{
      			set_speed(key, &speed_man);
 8001c24:	f107 0208 	add.w	r2, r7, #8
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fa31 	bl	8003094 <set_speed>
 8001c32:	f000 bcef 	b.w	8002614 <main+0x1610>
      		}
      	}



      	else if(st==SPEED_MODE2_CYCLE){
 8001c36:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <main+0xd9c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b18      	cmp	r3, #24
 8001c3c:	d14a      	bne.n	8001cd4 <main+0xcd0>
      		if(col==0){
 8001c3e:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <main+0xda8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <main+0xc52>
      			lcd16x2_clear();
 8001c46:	f7ff f9a3 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("speed(6-40):");
 8001c4a:	4859      	ldr	r0, [pc, #356]	; (8001db0 <main+0xdac>)
 8001c4c:	f7ff f9aa 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 8001c50:	f7ff f96e 	bl	8000f30 <lcd16x2_2ndLine>
 8001c54:	e008      	b.n	8001c68 <main+0xc64>
      		}
      		else{
      			lcd16x2_setCursor(2, col);
 8001c56:	4b55      	ldr	r3, [pc, #340]	; (8001dac <main+0xda8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7ff f943 	bl	8000ee8 <lcd16x2_setCursor>
      			lcd16x2_cursorShow(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff f96c 	bl	8000f40 <lcd16x2_cursorShow>
      		}
      		key=get_key();
 8001c68:	f002 f81a 	bl	8003ca0 <get_key>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	72fb      	strb	r3, [r7, #11]
      		if(key=='s'){//speed_man=40;
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	2b73      	cmp	r3, #115	; 0x73
 8001c74:	d112      	bne.n	8001c9c <main+0xc98>
      			if( speed_man>40 || speed_man<6){
 8001c76:	893b      	ldrh	r3, [r7, #8]
 8001c78:	2b28      	cmp	r3, #40	; 0x28
 8001c7a:	f200 84cb 	bhi.w	8002614 <main+0x1610>
 8001c7e:	893b      	ldrh	r3, [r7, #8]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	f240 84c7 	bls.w	8002614 <main+0x1610>

      		    		    			    					// to_Do
      			}
      			else{
      				send_write_register(0x119e,speed_man);
 8001c86:	893b      	ldrh	r3, [r7, #8]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f241 109e 	movw	r0, #4510	; 0x119e
 8001c8e:	f001 fb2b 	bl	80032e8 <send_write_register>
      				lcd16x2_printf("   saved!!");
 8001c92:	4848      	ldr	r0, [pc, #288]	; (8001db4 <main+0xdb0>)
 8001c94:	f7ff f986 	bl	8000fa4 <lcd16x2_printf>
 8001c98:	f000 bcbc 	b.w	8002614 <main+0x1610>
      			}
      		}
      		else if(key=='m'){
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	2b6d      	cmp	r3, #109	; 0x6d
 8001ca0:	d10f      	bne.n	8001cc2 <main+0xcbe>
      			col_t=0;
 8001ca2:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <main+0xda0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
      			col=0;
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <main+0xda8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
      			st=SPEED_MODE2;
 8001cae:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <main+0xd9c>)
 8001cb0:	2214      	movs	r2, #20
 8001cb2:	701a      	strb	r2, [r3, #0]
      			cursor=SPEED_MODE2_CALIBRATION;
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <main+0xda4>)
 8001cb6:	2217      	movs	r2, #23
 8001cb8:	701a      	strb	r2, [r3, #0]
      			speed_man=0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	813b      	strh	r3, [r7, #8]
 8001cbe:	f000 bca9 	b.w	8002614 <main+0x1610>
      		}
      		else{
      			set_speed(key, &speed_man);
 8001cc2:	f107 0208 	add.w	r2, r7, #8
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 f9e2 	bl	8003094 <set_speed>
 8001cd0:	f000 bca0 	b.w	8002614 <main+0x1610>
      		}

      	}

      	else if(st==BREAK){  /// LEARNING STATE ****************************************************
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <main+0xd9c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d16d      	bne.n	8001db8 <main+0xdb4>
      		if(col_t==0){
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <main+0xda0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <main+0xcfa>
      			lcd16x2_clear();
 8001ce4:	f7ff f954 	bl	8000f90 <lcd16x2_clear>
      			show_cursor(cursor);
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <main+0xda4>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 f865 	bl	8002dbc <show_cursor>
      			lcd16x2_cursorShow(0);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff f924 	bl	8000f40 <lcd16x2_cursorShow>
      			col_t=1;
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <main+0xda0>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 8001cfe:	f001 ffcf 	bl	8003ca0 <get_key>
 8001d02:	4603      	mov	r3, r0
 8001d04:	72fb      	strb	r3, [r7, #11]
      		if(key=='d'){
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d10f      	bne.n	8001d2c <main+0xd28>
      			cursor++;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <main+0xda4>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <main+0xda4>)
 8001d16:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <main+0xda0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
      			if(cursor==BREAK_HORIZONTAL_ACTUATOR+1)
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <main+0xda4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b1b      	cmp	r3, #27
 8001d24:	d102      	bne.n	8001d2c <main+0xd28>
      				cursor=BREAK_VERTICAL_ACTUATOR;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <main+0xda4>)
 8001d28:	2219      	movs	r2, #25
 8001d2a:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='u'){
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	2b75      	cmp	r3, #117	; 0x75
 8001d30:	d10f      	bne.n	8001d52 <main+0xd4e>
      			cursor--;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <main+0xda4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <main+0xda4>)
 8001d3c:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <main+0xda0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
      			if(cursor==BREAK_VERTICAL_ACTUATOR-1)
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <main+0xda4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b18      	cmp	r3, #24
 8001d4a:	d102      	bne.n	8001d52 <main+0xd4e>
      				cursor=BREAK_HORIZONTAL_ACTUATOR;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <main+0xda4>)
 8001d4e:	221a      	movs	r2, #26
 8001d50:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='s'){
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	2b73      	cmp	r3, #115	; 0x73
 8001d56:	d114      	bne.n	8001d82 <main+0xd7e>
      			st=cursor;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <main+0xda4>)
 8001d5a:	781a      	ldrb	r2, [r3, #0]
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <main+0xd9c>)
 8001d5e:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <main+0xda0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
      			if(st==BREAK_VERTICAL_ACTUATOR)
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <main+0xd9c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b19      	cmp	r3, #25
 8001d6c:	d102      	bne.n	8001d74 <main+0xd70>
      				cursor=BREAK_VERTICAL_ACTUATOR_UP;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <main+0xda4>)
 8001d70:	221b      	movs	r2, #27
 8001d72:	701a      	strb	r2, [r3, #0]
      			if(st==BREAK_HORIZONTAL_ACTUATOR)
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <main+0xd9c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b1a      	cmp	r3, #26
 8001d7a:	d102      	bne.n	8001d82 <main+0xd7e>
      				cursor=BREAK_HORIZONTAL_ACTUATOR_FRONT;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <main+0xda4>)
 8001d7e:	221d      	movs	r2, #29
 8001d80:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='m'){
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	2b6d      	cmp	r3, #109	; 0x6d
 8001d86:	f040 8445 	bne.w	8002614 <main+0x1610>
      			col_t=0;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <main+0xda0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
      			st=PARAMETER_SETTING;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <main+0xd9c>)
 8001d92:	2206      	movs	r2, #6
 8001d94:	701a      	strb	r2, [r3, #0]
      			cursor=SPEED;
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <main+0xda4>)
 8001d98:	2211      	movs	r2, #17
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	f000 bc3a 	b.w	8002614 <main+0x1610>
 8001da0:	200001cd 	.word	0x200001cd
 8001da4:	200000ea 	.word	0x200000ea
 8001da8:	200001c0 	.word	0x200001c0
 8001dac:	200000e9 	.word	0x200000e9
 8001db0:	08007c68 	.word	0x08007c68
 8001db4:	08007c78 	.word	0x08007c78
      		}
      	}

      	else if(st==BREAK_VERTICAL_ACTUATOR){
 8001db8:	4ba8      	ldr	r3, [pc, #672]	; (800205c <main+0x1058>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b19      	cmp	r3, #25
 8001dbe:	d152      	bne.n	8001e66 <main+0xe62>
      		if(col_t==0){
 8001dc0:	4ba7      	ldr	r3, [pc, #668]	; (8002060 <main+0x105c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10c      	bne.n	8001de2 <main+0xdde>
      			lcd16x2_clear();
 8001dc8:	f7ff f8e2 	bl	8000f90 <lcd16x2_clear>
      			show_cursor(cursor);
 8001dcc:	4ba5      	ldr	r3, [pc, #660]	; (8002064 <main+0x1060>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fff3 	bl	8002dbc <show_cursor>
      			lcd16x2_cursorShow(0);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff f8b2 	bl	8000f40 <lcd16x2_cursorShow>
      			col_t=1;
 8001ddc:	4ba0      	ldr	r3, [pc, #640]	; (8002060 <main+0x105c>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 8001de2:	f001 ff5d 	bl	8003ca0 <get_key>
 8001de6:	4603      	mov	r3, r0
 8001de8:	72fb      	strb	r3, [r7, #11]
      		if(key=='d'){
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d10f      	bne.n	8001e10 <main+0xe0c>
      			cursor++;
 8001df0:	4b9c      	ldr	r3, [pc, #624]	; (8002064 <main+0x1060>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b9a      	ldr	r3, [pc, #616]	; (8002064 <main+0x1060>)
 8001dfa:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001dfc:	4b98      	ldr	r3, [pc, #608]	; (8002060 <main+0x105c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
      			if(cursor==BREAK_VERTICAL_ACTUATOR_DOWN+1)
 8001e02:	4b98      	ldr	r3, [pc, #608]	; (8002064 <main+0x1060>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b1d      	cmp	r3, #29
 8001e08:	d102      	bne.n	8001e10 <main+0xe0c>
      				cursor=BREAK_VERTICAL_ACTUATOR_UP;
 8001e0a:	4b96      	ldr	r3, [pc, #600]	; (8002064 <main+0x1060>)
 8001e0c:	221b      	movs	r2, #27
 8001e0e:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='u'){
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	2b75      	cmp	r3, #117	; 0x75
 8001e14:	d10f      	bne.n	8001e36 <main+0xe32>
      			cursor--;
 8001e16:	4b93      	ldr	r3, [pc, #588]	; (8002064 <main+0x1060>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b91      	ldr	r3, [pc, #580]	; (8002064 <main+0x1060>)
 8001e20:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001e22:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <main+0x105c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
      			if(cursor==BREAK_VERTICAL_ACTUATOR_UP-1)
 8001e28:	4b8e      	ldr	r3, [pc, #568]	; (8002064 <main+0x1060>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b1a      	cmp	r3, #26
 8001e2e:	d102      	bne.n	8001e36 <main+0xe32>
      				cursor=BREAK_VERTICAL_ACTUATOR_DOWN;
 8001e30:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <main+0x1060>)
 8001e32:	221c      	movs	r2, #28
 8001e34:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='s'){
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	2b73      	cmp	r3, #115	; 0x73
 8001e3a:	d106      	bne.n	8001e4a <main+0xe46>
      			st=cursor;
 8001e3c:	4b89      	ldr	r3, [pc, #548]	; (8002064 <main+0x1060>)
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b86      	ldr	r3, [pc, #536]	; (800205c <main+0x1058>)
 8001e42:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001e44:	4b86      	ldr	r3, [pc, #536]	; (8002060 <main+0x105c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='m'){
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	2b6d      	cmp	r3, #109	; 0x6d
 8001e4e:	f040 83e1 	bne.w	8002614 <main+0x1610>
      			col_t=0;
 8001e52:	4b83      	ldr	r3, [pc, #524]	; (8002060 <main+0x105c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
      			st=BREAK;
 8001e58:	4b80      	ldr	r3, [pc, #512]	; (800205c <main+0x1058>)
 8001e5a:	2212      	movs	r2, #18
 8001e5c:	701a      	strb	r2, [r3, #0]
      			cursor=BREAK_VERTICAL_ACTUATOR;
 8001e5e:	4b81      	ldr	r3, [pc, #516]	; (8002064 <main+0x1060>)
 8001e60:	2219      	movs	r2, #25
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e3d6      	b.n	8002614 <main+0x1610>
      		}
      	}
      	else if(st==BREAK_VERTICAL_ACTUATOR_UP){
 8001e66:	4b7d      	ldr	r3, [pc, #500]	; (800205c <main+0x1058>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b1b      	cmp	r3, #27
 8001e6c:	d143      	bne.n	8001ef6 <main+0xef2>
      			if(col==0){
 8001e6e:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <main+0x1064>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <main+0xe82>
      			    lcd16x2_clear();
 8001e76:	f7ff f88b 	bl	8000f90 <lcd16x2_clear>
      			    lcd16x2_printf("breaking delay(0-20)(0.1ms):");
 8001e7a:	487c      	ldr	r0, [pc, #496]	; (800206c <main+0x1068>)
 8001e7c:	f7ff f892 	bl	8000fa4 <lcd16x2_printf>
      			   	lcd16x2_2ndLine();
 8001e80:	f7ff f856 	bl	8000f30 <lcd16x2_2ndLine>
 8001e84:	e008      	b.n	8001e98 <main+0xe94>
      			}
      			else{
      			    lcd16x2_setCursor(2, col);
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <main+0x1064>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f7ff f82b 	bl	8000ee8 <lcd16x2_setCursor>
      			    lcd16x2_cursorShow(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff f854 	bl	8000f40 <lcd16x2_cursorShow>
      			}
      			key=get_key();
 8001e98:	f001 ff02 	bl	8003ca0 <get_key>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){//speed_man=40;
 8001ea0:	7afb      	ldrb	r3, [r7, #11]
 8001ea2:	2b73      	cmp	r3, #115	; 0x73
 8001ea4:	d10d      	bne.n	8001ec2 <main+0xebe>
      			    if( speed_man>20 || speed_man<0){
 8001ea6:	893b      	ldrh	r3, [r7, #8]
 8001ea8:	2b14      	cmp	r3, #20
 8001eaa:	f200 83b3 	bhi.w	8002614 <main+0x1610>

      			    		    		    			    					// to_Do
      			    }
      			    else{
      			    	send_write_register(0x11aa,speed_man);
 8001eae:	893b      	ldrh	r3, [r7, #8]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f241 10aa 	movw	r0, #4522	; 0x11aa
 8001eb6:	f001 fa17 	bl	80032e8 <send_write_register>
      			    	lcd16x2_printf("   saved!!");
 8001eba:	486d      	ldr	r0, [pc, #436]	; (8002070 <main+0x106c>)
 8001ebc:	f7ff f872 	bl	8000fa4 <lcd16x2_printf>
 8001ec0:	e3a8      	b.n	8002614 <main+0x1610>
      			    }
      			}
      			else if(key=='m'){
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	2b6d      	cmp	r3, #109	; 0x6d
 8001ec6:	d10e      	bne.n	8001ee6 <main+0xee2>
      			    col_t=0;
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <main+0x105c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
      			    col=0;
 8001ece:	4b66      	ldr	r3, [pc, #408]	; (8002068 <main+0x1064>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
      			    st=BREAK_VERTICAL_ACTUATOR;
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <main+0x1058>)
 8001ed6:	2219      	movs	r2, #25
 8001ed8:	701a      	strb	r2, [r3, #0]
      			    cursor=BREAK_VERTICAL_ACTUATOR_UP;
 8001eda:	4b62      	ldr	r3, [pc, #392]	; (8002064 <main+0x1060>)
 8001edc:	221b      	movs	r2, #27
 8001ede:	701a      	strb	r2, [r3, #0]
      			    speed_man=0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	813b      	strh	r3, [r7, #8]
 8001ee4:	e396      	b.n	8002614 <main+0x1610>
      			}
      			else{
      			    set_speed(key, &speed_man);
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	7afb      	ldrb	r3, [r7, #11]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 f8d0 	bl	8003094 <set_speed>
 8001ef4:	e38e      	b.n	8002614 <main+0x1610>
      			}


      		}

      	else if(st==BREAK_VERTICAL_ACTUATOR_DOWN){
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <main+0x1058>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b1c      	cmp	r3, #28
 8001efc:	d143      	bne.n	8001f86 <main+0xf82>
      			if(col==0){
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <main+0x1064>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d107      	bne.n	8001f16 <main+0xf12>
      				lcd16x2_clear();
 8001f06:	f7ff f843 	bl	8000f90 <lcd16x2_clear>
      				lcd16x2_printf("breaking delay(0-20)(0.1ms):");
 8001f0a:	4858      	ldr	r0, [pc, #352]	; (800206c <main+0x1068>)
 8001f0c:	f7ff f84a 	bl	8000fa4 <lcd16x2_printf>
      				lcd16x2_2ndLine();
 8001f10:	f7ff f80e 	bl	8000f30 <lcd16x2_2ndLine>
 8001f14:	e008      	b.n	8001f28 <main+0xf24>
      			}
      			else{
      				lcd16x2_setCursor(2, col);
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <main+0x1064>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe ffe3 	bl	8000ee8 <lcd16x2_setCursor>
      				lcd16x2_cursorShow(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff f80c 	bl	8000f40 <lcd16x2_cursorShow>
      			}
      			key=get_key();
 8001f28:	f001 feba 	bl	8003ca0 <get_key>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){//speed_man=40;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	2b73      	cmp	r3, #115	; 0x73
 8001f34:	d10d      	bne.n	8001f52 <main+0xf4e>
      				if( speed_man>20 || speed_man<0){
 8001f36:	893b      	ldrh	r3, [r7, #8]
 8001f38:	2b14      	cmp	r3, #20
 8001f3a:	f200 836b 	bhi.w	8002614 <main+0x1610>
      					// to_Do
      					}
      				else{
      					send_write_register(0x11ab,speed_man);
 8001f3e:	893b      	ldrh	r3, [r7, #8]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f241 10ab 	movw	r0, #4523	; 0x11ab
 8001f46:	f001 f9cf 	bl	80032e8 <send_write_register>
      					lcd16x2_printf("   saved!!");
 8001f4a:	4849      	ldr	r0, [pc, #292]	; (8002070 <main+0x106c>)
 8001f4c:	f7ff f82a 	bl	8000fa4 <lcd16x2_printf>
 8001f50:	e360      	b.n	8002614 <main+0x1610>
      				}
      			}
      			else if(key=='m'){
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	2b6d      	cmp	r3, #109	; 0x6d
 8001f56:	d10e      	bne.n	8001f76 <main+0xf72>
      				col_t=0;
 8001f58:	4b41      	ldr	r3, [pc, #260]	; (8002060 <main+0x105c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
      				col=0;
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <main+0x1064>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
      				st=BREAK_VERTICAL_ACTUATOR;
 8001f64:	4b3d      	ldr	r3, [pc, #244]	; (800205c <main+0x1058>)
 8001f66:	2219      	movs	r2, #25
 8001f68:	701a      	strb	r2, [r3, #0]
      				cursor=BREAK_VERTICAL_ACTUATOR_UP;
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <main+0x1060>)
 8001f6c:	221b      	movs	r2, #27
 8001f6e:	701a      	strb	r2, [r3, #0]
      				speed_man=0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	813b      	strh	r3, [r7, #8]
 8001f74:	e34e      	b.n	8002614 <main+0x1610>
      			}
      			else{
      				set_speed(key, &speed_man);
 8001f76:	f107 0208 	add.w	r2, r7, #8
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f888 	bl	8003094 <set_speed>
 8001f84:	e346      	b.n	8002614 <main+0x1610>
      			}
      		}

      	else if(st==BREAK_HORIZONTAL_ACTUATOR){
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <main+0x1058>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b1a      	cmp	r3, #26
 8001f8c:	d152      	bne.n	8002034 <main+0x1030>
      		if(col_t==0){
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <main+0x105c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <main+0xfac>
      			lcd16x2_clear();
 8001f96:	f7fe fffb 	bl	8000f90 <lcd16x2_clear>
      			show_cursor(cursor);
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <main+0x1060>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 ff0c 	bl	8002dbc <show_cursor>
      			lcd16x2_cursorShow(0);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7fe ffcb 	bl	8000f40 <lcd16x2_cursorShow>
      			col_t=1;
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <main+0x105c>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 8001fb0:	f001 fe76 	bl	8003ca0 <get_key>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	72fb      	strb	r3, [r7, #11]
      		if(key=='d'){
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d10f      	bne.n	8001fde <main+0xfda>
      			cursor++;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <main+0x1060>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <main+0x1060>)
 8001fc8:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <main+0x105c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
      			if(cursor==BREAK_HORIZONTAL_ACTUATOR_BACK+1)
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <main+0x1060>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b1f      	cmp	r3, #31
 8001fd6:	d102      	bne.n	8001fde <main+0xfda>
      				cursor=BREAK_HORIZONTAL_ACTUATOR_FRONT;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <main+0x1060>)
 8001fda:	221d      	movs	r2, #29
 8001fdc:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='u'){
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	2b75      	cmp	r3, #117	; 0x75
 8001fe2:	d10f      	bne.n	8002004 <main+0x1000>
      			cursor--;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <main+0x1060>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <main+0x1060>)
 8001fee:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <main+0x105c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
      			if(cursor==BREAK_HORIZONTAL_ACTUATOR_FRONT-1)
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <main+0x1060>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b1c      	cmp	r3, #28
 8001ffc:	d102      	bne.n	8002004 <main+0x1000>
      				cursor=BREAK_HORIZONTAL_ACTUATOR_BACK;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <main+0x1060>)
 8002000:	221e      	movs	r2, #30
 8002002:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='s'){
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	2b73      	cmp	r3, #115	; 0x73
 8002008:	d106      	bne.n	8002018 <main+0x1014>
      			st=cursor;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <main+0x1060>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <main+0x1058>)
 8002010:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <main+0x105c>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='m'){
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	2b6d      	cmp	r3, #109	; 0x6d
 800201c:	f040 82fa 	bne.w	8002614 <main+0x1610>
      			col_t=0;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <main+0x105c>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
      			st=BREAK;
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <main+0x1058>)
 8002028:	2212      	movs	r2, #18
 800202a:	701a      	strb	r2, [r3, #0]
      			cursor=BREAK_VERTICAL_ACTUATOR;
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <main+0x1060>)
 800202e:	2219      	movs	r2, #25
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e2ef      	b.n	8002614 <main+0x1610>
      		}
      	}

      	else if(st==BREAK_HORIZONTAL_ACTUATOR_FRONT){
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <main+0x1058>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b1d      	cmp	r3, #29
 800203a:	d150      	bne.n	80020de <main+0x10da>
      			if(col==0){
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <main+0x1064>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d117      	bne.n	8002074 <main+0x1070>
      				lcd16x2_clear();
 8002044:	f7fe ffa4 	bl	8000f90 <lcd16x2_clear>
      				lcd16x2_printf("breaking delay(0-20)(0.1ms):");
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <main+0x1068>)
 800204a:	f7fe ffab 	bl	8000fa4 <lcd16x2_printf>
      				lcd16x2_2ndLine();
 800204e:	f7fe ff6f 	bl	8000f30 <lcd16x2_2ndLine>
      				lcd16x2_cursorShow(1);
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe ff74 	bl	8000f40 <lcd16x2_cursorShow>
 8002058:	e012      	b.n	8002080 <main+0x107c>
 800205a:	bf00      	nop
 800205c:	200001cd 	.word	0x200001cd
 8002060:	200000ea 	.word	0x200000ea
 8002064:	200001c0 	.word	0x200001c0
 8002068:	200000e9 	.word	0x200000e9
 800206c:	08007c84 	.word	0x08007c84
 8002070:	08007c78 	.word	0x08007c78
      			}
      			else{
      				lcd16x2_setCursor(2, col);
 8002074:	4ba9      	ldr	r3, [pc, #676]	; (800231c <main+0x1318>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	2002      	movs	r0, #2
 800207c:	f7fe ff34 	bl	8000ee8 <lcd16x2_setCursor>

      			}
      			key=get_key();
 8002080:	f001 fe0e 	bl	8003ca0 <get_key>
 8002084:	4603      	mov	r3, r0
 8002086:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){//speed_man=40;
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	2b73      	cmp	r3, #115	; 0x73
 800208c:	d10d      	bne.n	80020aa <main+0x10a6>
      				if( speed_man>20 || speed_man<0){
 800208e:	893b      	ldrh	r3, [r7, #8]
 8002090:	2b14      	cmp	r3, #20
 8002092:	f200 82bf 	bhi.w	8002614 <main+0x1610>
      					// to_Do
      					}
      				else{
      					send_write_register(0x11ac,speed_man);
 8002096:	893b      	ldrh	r3, [r7, #8]
 8002098:	4619      	mov	r1, r3
 800209a:	f241 10ac 	movw	r0, #4524	; 0x11ac
 800209e:	f001 f923 	bl	80032e8 <send_write_register>
      					lcd16x2_printf("   saved!!");
 80020a2:	489f      	ldr	r0, [pc, #636]	; (8002320 <main+0x131c>)
 80020a4:	f7fe ff7e 	bl	8000fa4 <lcd16x2_printf>
 80020a8:	e2b4      	b.n	8002614 <main+0x1610>
      				}
      			}
      			else if(key=='m'){
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	2b6d      	cmp	r3, #109	; 0x6d
 80020ae:	d10e      	bne.n	80020ce <main+0x10ca>
      				col_t=0;
 80020b0:	4b9c      	ldr	r3, [pc, #624]	; (8002324 <main+0x1320>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
      				col=0;
 80020b6:	4b99      	ldr	r3, [pc, #612]	; (800231c <main+0x1318>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
      				st=BREAK_HORIZONTAL_ACTUATOR;
 80020bc:	4b9a      	ldr	r3, [pc, #616]	; (8002328 <main+0x1324>)
 80020be:	221a      	movs	r2, #26
 80020c0:	701a      	strb	r2, [r3, #0]
      				cursor=BREAK_HORIZONTAL_ACTUATOR_FRONT;
 80020c2:	4b9a      	ldr	r3, [pc, #616]	; (800232c <main+0x1328>)
 80020c4:	221d      	movs	r2, #29
 80020c6:	701a      	strb	r2, [r3, #0]
      				speed_man=0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	813b      	strh	r3, [r7, #8]
 80020cc:	e2a2      	b.n	8002614 <main+0x1610>
      			}
      			else{
      				set_speed(key, &speed_man);
 80020ce:	f107 0208 	add.w	r2, r7, #8
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 ffdc 	bl	8003094 <set_speed>
 80020dc:	e29a      	b.n	8002614 <main+0x1610>
      			}
      		}

      	else if(st==BREAK_HORIZONTAL_ACTUATOR_BACK){
 80020de:	4b92      	ldr	r3, [pc, #584]	; (8002328 <main+0x1324>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b1e      	cmp	r3, #30
 80020e4:	d143      	bne.n	800216e <main+0x116a>
      			if(col==0){
 80020e6:	4b8d      	ldr	r3, [pc, #564]	; (800231c <main+0x1318>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <main+0x10fa>
      				lcd16x2_clear();
 80020ee:	f7fe ff4f 	bl	8000f90 <lcd16x2_clear>
      				lcd16x2_printf("breaking delay(0-20)(0.1ms):");
 80020f2:	488f      	ldr	r0, [pc, #572]	; (8002330 <main+0x132c>)
 80020f4:	f7fe ff56 	bl	8000fa4 <lcd16x2_printf>
      				lcd16x2_2ndLine();
 80020f8:	f7fe ff1a 	bl	8000f30 <lcd16x2_2ndLine>
 80020fc:	e008      	b.n	8002110 <main+0x110c>
      			}
      			else{
      				lcd16x2_setCursor(2, col);
 80020fe:	4b87      	ldr	r3, [pc, #540]	; (800231c <main+0x1318>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	2002      	movs	r0, #2
 8002106:	f7fe feef 	bl	8000ee8 <lcd16x2_setCursor>
      				lcd16x2_cursorShow(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f7fe ff18 	bl	8000f40 <lcd16x2_cursorShow>
      			}
      			key=get_key();
 8002110:	f001 fdc6 	bl	8003ca0 <get_key>
 8002114:	4603      	mov	r3, r0
 8002116:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){//speed_man=40;
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	2b73      	cmp	r3, #115	; 0x73
 800211c:	d10d      	bne.n	800213a <main+0x1136>
      				if( speed_man>20 || speed_man<0){
 800211e:	893b      	ldrh	r3, [r7, #8]
 8002120:	2b14      	cmp	r3, #20
 8002122:	f200 8277 	bhi.w	8002614 <main+0x1610>
      					// to_Do
      					}
      				else{
      					send_write_register(0x11ad,speed_man);
 8002126:	893b      	ldrh	r3, [r7, #8]
 8002128:	4619      	mov	r1, r3
 800212a:	f241 10ad 	movw	r0, #4525	; 0x11ad
 800212e:	f001 f8db 	bl	80032e8 <send_write_register>
      					lcd16x2_printf("   saved!!");
 8002132:	487b      	ldr	r0, [pc, #492]	; (8002320 <main+0x131c>)
 8002134:	f7fe ff36 	bl	8000fa4 <lcd16x2_printf>
 8002138:	e26c      	b.n	8002614 <main+0x1610>
      				}
      			}
      			else if(key=='m'){
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	2b6d      	cmp	r3, #109	; 0x6d
 800213e:	d10e      	bne.n	800215e <main+0x115a>
      				col_t=0;
 8002140:	4b78      	ldr	r3, [pc, #480]	; (8002324 <main+0x1320>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      				col=0;
 8002146:	4b75      	ldr	r3, [pc, #468]	; (800231c <main+0x1318>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
      				st=BREAK_HORIZONTAL_ACTUATOR;
 800214c:	4b76      	ldr	r3, [pc, #472]	; (8002328 <main+0x1324>)
 800214e:	221a      	movs	r2, #26
 8002150:	701a      	strb	r2, [r3, #0]
      				cursor=BREAK_HORIZONTAL_ACTUATOR_FRONT;
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <main+0x1328>)
 8002154:	221d      	movs	r2, #29
 8002156:	701a      	strb	r2, [r3, #0]
      				speed_man=0;
 8002158:	2300      	movs	r3, #0
 800215a:	813b      	strh	r3, [r7, #8]
 800215c:	e25a      	b.n	8002614 <main+0x1610>
      			}
      			else{
      				set_speed(key, &speed_man);
 800215e:	f107 0208 	add.w	r2, r7, #8
 8002162:	7afb      	ldrb	r3, [r7, #11]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 ff94 	bl	8003094 <set_speed>
 800216c:	e252      	b.n	8002614 <main+0x1610>
      			}
      		}

  //####################################  LOG #####################################################################

      	else if(st==LOG){
 800216e:	4b6e      	ldr	r3, [pc, #440]	; (8002328 <main+0x1324>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b08      	cmp	r3, #8
 8002174:	d159      	bne.n	800222a <main+0x1226>
      		if(col_t==0){
 8002176:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <main+0x1320>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <main+0x1194>
      			lcd16x2_clear();
 800217e:	f7fe ff07 	bl	8000f90 <lcd16x2_clear>
      			show_cursor(cursor);
 8002182:	4b6a      	ldr	r3, [pc, #424]	; (800232c <main+0x1328>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fe18 	bl	8002dbc <show_cursor>
      			lcd16x2_cursorShow(0);
 800218c:	2000      	movs	r0, #0
 800218e:	f7fe fed7 	bl	8000f40 <lcd16x2_cursorShow>
      			col_t=1;
 8002192:	4b64      	ldr	r3, [pc, #400]	; (8002324 <main+0x1320>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 8002198:	f001 fd82 	bl	8003ca0 <get_key>
 800219c:	4603      	mov	r3, r0
 800219e:	72fb      	strb	r3, [r7, #11]
      		if(key=='d'){
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d10f      	bne.n	80021c6 <main+0x11c2>
      			cursor++;
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <main+0x1328>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <main+0x1328>)
 80021b0:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 80021b2:	4b5c      	ldr	r3, [pc, #368]	; (8002324 <main+0x1320>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
      			if(cursor==LOG_RESET+1)
 80021b8:	4b5c      	ldr	r3, [pc, #368]	; (800232c <main+0x1328>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b22      	cmp	r3, #34	; 0x22
 80021be:	d102      	bne.n	80021c6 <main+0x11c2>
      				cursor=LOG_WORKING_TIME;
 80021c0:	4b5a      	ldr	r3, [pc, #360]	; (800232c <main+0x1328>)
 80021c2:	221f      	movs	r2, #31
 80021c4:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='u'){
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	2b75      	cmp	r3, #117	; 0x75
 80021ca:	d10f      	bne.n	80021ec <main+0x11e8>
      			cursor--;
 80021cc:	4b57      	ldr	r3, [pc, #348]	; (800232c <main+0x1328>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b55      	ldr	r3, [pc, #340]	; (800232c <main+0x1328>)
 80021d6:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 80021d8:	4b52      	ldr	r3, [pc, #328]	; (8002324 <main+0x1320>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
      			if(cursor==LOG_WORKING_TIME-1)
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <main+0x1328>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b1e      	cmp	r3, #30
 80021e4:	d102      	bne.n	80021ec <main+0x11e8>
      				cursor=LOG_RESET;
 80021e6:	4b51      	ldr	r3, [pc, #324]	; (800232c <main+0x1328>)
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='s'){
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	2b73      	cmp	r3, #115	; 0x73
 80021f0:	d10d      	bne.n	800220e <main+0x120a>
      			st=cursor;
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <main+0x1328>)
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <main+0x1324>)
 80021f8:	701a      	strb	r2, [r3, #0]
      			if(st==LOG_RESET)
 80021fa:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <main+0x1324>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b21      	cmp	r3, #33	; 0x21
 8002200:	d102      	bne.n	8002208 <main+0x1204>
      				cursor=LOG_RESET_WORKING_TIME;
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <main+0x1328>)
 8002204:	2222      	movs	r2, #34	; 0x22
 8002206:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <main+0x1320>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='m'){
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	2b6d      	cmp	r3, #109	; 0x6d
 8002212:	f040 81ff 	bne.w	8002614 <main+0x1610>
      			st=MENU;
 8002216:	4b44      	ldr	r3, [pc, #272]	; (8002328 <main+0x1324>)
 8002218:	2203      	movs	r2, #3
 800221a:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <main+0x1320>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
      			cursor=MENU_RUN;
 8002222:	4b42      	ldr	r3, [pc, #264]	; (800232c <main+0x1328>)
 8002224:	2204      	movs	r2, #4
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e1f4      	b.n	8002614 <main+0x1610>
      		}

      	}
      	else if(st==LOG_WORKING_TIME){
 800222a:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <main+0x1324>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b1f      	cmp	r3, #31
 8002230:	d139      	bne.n	80022a6 <main+0x12a2>

      		send_read_two_register(0x11b0,&log_waiting_time);
 8002232:	463b      	mov	r3, r7
 8002234:	4619      	mov	r1, r3
 8002236:	f241 10b0 	movw	r0, #4528	; 0x11b0
 800223a:	f001 fa49 	bl	80036d0 <send_read_two_register>
      		if(log_waiting_time!=log_temp||col_t==0){
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <main+0x1330>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d103      	bne.n	8002250 <main+0x124c>
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <main+0x1320>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d116      	bne.n	800227e <main+0x127a>
      			lcd16x2_clear();
 8002250:	f7fe fe9e 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("working time");
 8002254:	4838      	ldr	r0, [pc, #224]	; (8002338 <main+0x1334>)
 8002256:	f7fe fea5 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_cursorShow(0);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fe70 	bl	8000f40 <lcd16x2_cursorShow>
      			lcd16x2_2ndLine();
 8002260:	f7fe fe66 	bl	8000f30 <lcd16x2_2ndLine>
      			log_temp=log_waiting_time;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4a33      	ldr	r2, [pc, #204]	; (8002334 <main+0x1330>)
 8002268:	6013      	str	r3, [r2, #0]
      			set_counter32(log_waiting_time);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 ffef 	bl	8003250 <set_counter32>
      			lcd16x2_printf(" hours");
 8002272:	4832      	ldr	r0, [pc, #200]	; (800233c <main+0x1338>)
 8002274:	f7fe fe96 	bl	8000fa4 <lcd16x2_printf>
      			col_t=1;
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <main+0x1320>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
      		}

      		key=get_key();
 800227e:	f001 fd0f 	bl	8003ca0 <get_key>
 8002282:	4603      	mov	r3, r0
 8002284:	72fb      	strb	r3, [r7, #11]
      		if(key=='m'){
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	2b6d      	cmp	r3, #109	; 0x6d
 800228a:	f040 81c3 	bne.w	8002614 <main+0x1610>
      			st=LOG;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <main+0x1324>)
 8002290:	2208      	movs	r2, #8
 8002292:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <main+0x1320>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
      			cursor=LOG_WORKING_TIME;
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <main+0x1328>)
 800229c:	221f      	movs	r2, #31
 800229e:	701a      	strb	r2, [r3, #0]
      			log_waiting_time=0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	e1b6      	b.n	8002614 <main+0x1610>
      		}
      	}

      	else if(st==LOG_CYCLES){
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <main+0x1324>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d14a      	bne.n	8002344 <main+0x1340>
      		send_read_two_register(0x11b6,&log_waiting_time);
 80022ae:	463b      	mov	r3, r7
 80022b0:	4619      	mov	r1, r3
 80022b2:	f241 10b6 	movw	r0, #4534	; 0x11b6
 80022b6:	f001 fa0b 	bl	80036d0 <send_read_two_register>
      		if(log_waiting_time!=log_temp|| col_t==0){
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <main+0x1330>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d103      	bne.n	80022cc <main+0x12c8>
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <main+0x1320>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d113      	bne.n	80022f4 <main+0x12f0>
      			lcd16x2_clear();
 80022cc:	f7fe fe60 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("cycles ");
 80022d0:	481b      	ldr	r0, [pc, #108]	; (8002340 <main+0x133c>)
 80022d2:	f7fe fe67 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_cursorShow(0);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fe32 	bl	8000f40 <lcd16x2_cursorShow>
      			lcd16x2_2ndLine();
 80022dc:	f7fe fe28 	bl	8000f30 <lcd16x2_2ndLine>
      			log_temp=log_waiting_time;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <main+0x1330>)
 80022e4:	6013      	str	r3, [r2, #0]
      			set_counter32(log_waiting_time);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 ffb1 	bl	8003250 <set_counter32>
      			col_t=1;
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <main+0x1320>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
      		}

      		key=get_key();
 80022f4:	f001 fcd4 	bl	8003ca0 <get_key>
 80022f8:	4603      	mov	r3, r0
 80022fa:	72fb      	strb	r3, [r7, #11]
      		if(key=='m'){
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	2b6d      	cmp	r3, #109	; 0x6d
 8002300:	f040 8188 	bne.w	8002614 <main+0x1610>
      			st=LOG;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <main+0x1324>)
 8002306:	2208      	movs	r2, #8
 8002308:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <main+0x1320>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
      			cursor=LOG_WORKING_TIME;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <main+0x1328>)
 8002312:	221f      	movs	r2, #31
 8002314:	701a      	strb	r2, [r3, #0]
      			log_waiting_time=0;
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	e17b      	b.n	8002614 <main+0x1610>
 800231c:	200000e9 	.word	0x200000e9
 8002320:	08007c78 	.word	0x08007c78
 8002324:	200000ea 	.word	0x200000ea
 8002328:	200001cd 	.word	0x200001cd
 800232c:	200001c0 	.word	0x200001c0
 8002330:	08007c84 	.word	0x08007c84
 8002334:	200000d0 	.word	0x200000d0
 8002338:	08007ca4 	.word	0x08007ca4
 800233c:	08007cb4 	.word	0x08007cb4
 8002340:	08007cbc 	.word	0x08007cbc
      		}
      	}
      	else if(st==LOG_RESET){
 8002344:	4bb6      	ldr	r3, [pc, #728]	; (8002620 <main+0x161c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b21      	cmp	r3, #33	; 0x21
 800234a:	d152      	bne.n	80023f2 <main+0x13ee>
      		if(col_t==0){
 800234c:	4bb5      	ldr	r3, [pc, #724]	; (8002624 <main+0x1620>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <main+0x1366>
      			show_cursor(cursor);
 8002354:	4bb4      	ldr	r3, [pc, #720]	; (8002628 <main+0x1624>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd2f 	bl	8002dbc <show_cursor>
      			lcd16x2_cursorShow(0);
 800235e:	2000      	movs	r0, #0
 8002360:	f7fe fdee 	bl	8000f40 <lcd16x2_cursorShow>
      			col_t=1;
 8002364:	4baf      	ldr	r3, [pc, #700]	; (8002624 <main+0x1620>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
      		}


      		key=get_key();
 800236a:	f001 fc99 	bl	8003ca0 <get_key>
 800236e:	4603      	mov	r3, r0
 8002370:	72fb      	strb	r3, [r7, #11]
      		if(key=='m'){
 8002372:	7afb      	ldrb	r3, [r7, #11]
 8002374:	2b6d      	cmp	r3, #109	; 0x6d
 8002376:	d10a      	bne.n	800238e <main+0x138a>
      			st=LOG;
 8002378:	4ba9      	ldr	r3, [pc, #676]	; (8002620 <main+0x161c>)
 800237a:	2208      	movs	r2, #8
 800237c:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 800237e:	4ba9      	ldr	r3, [pc, #676]	; (8002624 <main+0x1620>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
      			cursor=LOG_RESET;
 8002384:	4ba8      	ldr	r3, [pc, #672]	; (8002628 <main+0x1624>)
 8002386:	2221      	movs	r2, #33	; 0x21
 8002388:	701a      	strb	r2, [r3, #0]
      			log_waiting_time=0;
 800238a:	2300      	movs	r3, #0
 800238c:	603b      	str	r3, [r7, #0]
      		}
      		if(key=='d'){
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d10f      	bne.n	80023b4 <main+0x13b0>
      			cursor++;
 8002394:	4ba4      	ldr	r3, [pc, #656]	; (8002628 <main+0x1624>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4ba2      	ldr	r3, [pc, #648]	; (8002628 <main+0x1624>)
 800239e:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 80023a0:	4ba0      	ldr	r3, [pc, #640]	; (8002624 <main+0x1620>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
      			if(cursor==LOG_RESET_CYCLES+1)
 80023a6:	4ba0      	ldr	r3, [pc, #640]	; (8002628 <main+0x1624>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b24      	cmp	r3, #36	; 0x24
 80023ac:	d102      	bne.n	80023b4 <main+0x13b0>
      				cursor=LOG_RESET_WORKING_TIME;
 80023ae:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <main+0x1624>)
 80023b0:	2222      	movs	r2, #34	; 0x22
 80023b2:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='u'){
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	2b75      	cmp	r3, #117	; 0x75
 80023b8:	d10f      	bne.n	80023da <main+0x13d6>
      			cursor--;
 80023ba:	4b9b      	ldr	r3, [pc, #620]	; (8002628 <main+0x1624>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	3b01      	subs	r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b99      	ldr	r3, [pc, #612]	; (8002628 <main+0x1624>)
 80023c4:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 80023c6:	4b97      	ldr	r3, [pc, #604]	; (8002624 <main+0x1620>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
      			if(cursor==LOG_RESET_WORKING_TIME-1)
 80023cc:	4b96      	ldr	r3, [pc, #600]	; (8002628 <main+0x1624>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b21      	cmp	r3, #33	; 0x21
 80023d2:	d102      	bne.n	80023da <main+0x13d6>
      				cursor=LOG_RESET_CYCLES;
 80023d4:	4b94      	ldr	r3, [pc, #592]	; (8002628 <main+0x1624>)
 80023d6:	2223      	movs	r2, #35	; 0x23
 80023d8:	701a      	strb	r2, [r3, #0]
      		}
      		if(key=='s'){
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	2b73      	cmp	r3, #115	; 0x73
 80023de:	f040 8119 	bne.w	8002614 <main+0x1610>
      			st=cursor;
 80023e2:	4b91      	ldr	r3, [pc, #580]	; (8002628 <main+0x1624>)
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <main+0x161c>)
 80023e8:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 80023ea:	4b8e      	ldr	r3, [pc, #568]	; (8002624 <main+0x1620>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e110      	b.n	8002614 <main+0x1610>
      	}




      	else if(st==LOG_RESET_WORKING_TIME){
 80023f2:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <main+0x161c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b22      	cmp	r3, #34	; 0x22
 80023f8:	d139      	bne.n	800246e <main+0x146a>
      		send_write_register(0x11b0, 0x00);
 80023fa:	2100      	movs	r1, #0
 80023fc:	f241 10b0 	movw	r0, #4528	; 0x11b0
 8002400:	f000 ff72 	bl	80032e8 <send_write_register>
      		send_write_register(0x11b1, 0x00);
 8002404:	2100      	movs	r1, #0
 8002406:	f241 10b1 	movw	r0, #4529	; 0x11b1
 800240a:	f000 ff6d 	bl	80032e8 <send_write_register>
      		send_write_register(0x11b2, 0x00);
 800240e:	2100      	movs	r1, #0
 8002410:	f241 10b2 	movw	r0, #4530	; 0x11b2
 8002414:	f000 ff68 	bl	80032e8 <send_write_register>
      		send_write_register(0x11b3, 0x00);
 8002418:	2100      	movs	r1, #0
 800241a:	f241 10b3 	movw	r0, #4531	; 0x11b3
 800241e:	f000 ff63 	bl	80032e8 <send_write_register>
      		if(col_t==0){
 8002422:	4b80      	ldr	r3, [pc, #512]	; (8002624 <main+0x1620>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <main+0x143c>
      			lcd16x2_clear();
 800242a:	f7fe fdb1 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_cursorShow(0);
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fd86 	bl	8000f40 <lcd16x2_cursorShow>
      			lcd16x2_printf("DONE!!");
 8002434:	487d      	ldr	r0, [pc, #500]	; (800262c <main+0x1628>)
 8002436:	f7fe fdb5 	bl	8000fa4 <lcd16x2_printf>
      			col_t=1;
 800243a:	4b7a      	ldr	r3, [pc, #488]	; (8002624 <main+0x1620>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 8002440:	f001 fc2e 	bl	8003ca0 <get_key>
 8002444:	4603      	mov	r3, r0
 8002446:	72fb      	strb	r3, [r7, #11]
      		if(key=='m'){
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	2b6d      	cmp	r3, #109	; 0x6d
 800244c:	f040 80e2 	bne.w	8002614 <main+0x1610>
      			st=LOG_RESET;
 8002450:	4b73      	ldr	r3, [pc, #460]	; (8002620 <main+0x161c>)
 8002452:	2221      	movs	r2, #33	; 0x21
 8002454:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <main+0x1620>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
      			cursor=LOG_RESET_WORKING_TIME;
 800245c:	4b72      	ldr	r3, [pc, #456]	; (8002628 <main+0x1624>)
 800245e:	2222      	movs	r2, #34	; 0x22
 8002460:	701a      	strb	r2, [r3, #0]
      			log_waiting_time=0;
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
      			log_temp=0;
 8002466:	4b72      	ldr	r3, [pc, #456]	; (8002630 <main+0x162c>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e0d2      	b.n	8002614 <main+0x1610>
      		}
      	}


      	else if(st==LOG_RESET_CYCLES){
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <main+0x161c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b23      	cmp	r3, #35	; 0x23
 8002474:	d12f      	bne.n	80024d6 <main+0x14d2>
      		send_write_register(0x11b6, 0x00);
 8002476:	2100      	movs	r1, #0
 8002478:	f241 10b6 	movw	r0, #4534	; 0x11b6
 800247c:	f000 ff34 	bl	80032e8 <send_write_register>
      		send_write_register(0x11b7, 0x00);
 8002480:	2100      	movs	r1, #0
 8002482:	f241 10b7 	movw	r0, #4535	; 0x11b7
 8002486:	f000 ff2f 	bl	80032e8 <send_write_register>
      		if(col_t==0){
 800248a:	4b66      	ldr	r3, [pc, #408]	; (8002624 <main+0x1620>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <main+0x14a4>
      			lcd16x2_clear();
 8002492:	f7fe fd7d 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_cursorShow(0);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe fd52 	bl	8000f40 <lcd16x2_cursorShow>
      			lcd16x2_printf("DONE!!");
 800249c:	4863      	ldr	r0, [pc, #396]	; (800262c <main+0x1628>)
 800249e:	f7fe fd81 	bl	8000fa4 <lcd16x2_printf>
      			col_t=1;
 80024a2:	4b60      	ldr	r3, [pc, #384]	; (8002624 <main+0x1620>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
      		}
      		key=get_key();
 80024a8:	f001 fbfa 	bl	8003ca0 <get_key>
 80024ac:	4603      	mov	r3, r0
 80024ae:	72fb      	strb	r3, [r7, #11]
      		if(key=='m'){
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	2b6d      	cmp	r3, #109	; 0x6d
 80024b4:	f040 80ae 	bne.w	8002614 <main+0x1610>
      			st=LOG_RESET;
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <main+0x161c>)
 80024ba:	2221      	movs	r2, #33	; 0x21
 80024bc:	701a      	strb	r2, [r3, #0]
      			col_t=0;
 80024be:	4b59      	ldr	r3, [pc, #356]	; (8002624 <main+0x1620>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
      			cursor=LOG_RESET_WORKING_TIME;
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <main+0x1624>)
 80024c6:	2222      	movs	r2, #34	; 0x22
 80024c8:	701a      	strb	r2, [r3, #0]
      			log_waiting_time=0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
      			log_temp=0;
 80024ce:	4b58      	ldr	r3, [pc, #352]	; (8002630 <main+0x162c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e09e      	b.n	8002614 <main+0x1610>
      		}
      	}
 //#####################################  SHOW #################################################################
      	else if(st==SHOW){
 80024d6:	4b52      	ldr	r3, [pc, #328]	; (8002620 <main+0x161c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b07      	cmp	r3, #7
 80024dc:	d148      	bne.n	8002570 <main+0x156c>

      		send_read_one_coil_show(0xA07);
 80024de:	f640 2007 	movw	r0, #2567	; 0xa07
 80024e2:	f001 f809 	bl	80034f8 <send_read_one_coil_show>
      			if(col_t==0){
 80024e6:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <main+0x1620>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <main+0x1516>
      				if(show_coil==1){
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <main+0x1630>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <main+0x14fe>
      					lcd16x2_clear();
 80024f6:	f7fe fd4b 	bl	8000f90 <lcd16x2_clear>
      					lcd16x2_printf("STOP");
 80024fa:	484f      	ldr	r0, [pc, #316]	; (8002638 <main+0x1634>)
 80024fc:	f7fe fd52 	bl	8000fa4 <lcd16x2_printf>
 8002500:	e008      	b.n	8002514 <main+0x1510>
      				}
      				else if(show_coil==0){
 8002502:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <main+0x1630>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <main+0x1510>
      					lcd16x2_clear();
 800250a:	f7fe fd41 	bl	8000f90 <lcd16x2_clear>
      					lcd16x2_printf("RUN");
 800250e:	484b      	ldr	r0, [pc, #300]	; (800263c <main+0x1638>)
 8002510:	f7fe fd48 	bl	8000fa4 <lcd16x2_printf>
      				}
      				col_t=1;
 8002514:	4b43      	ldr	r3, [pc, #268]	; (8002624 <main+0x1620>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
      			}

      			key=get_key();
 800251a:	f001 fbc1 	bl	8003ca0 <get_key>
 800251e:	4603      	mov	r3, r0
 8002520:	72fb      	strb	r3, [r7, #11]
      			if(key=='m'){
 8002522:	7afb      	ldrb	r3, [r7, #11]
 8002524:	2b6d      	cmp	r3, #109	; 0x6d
 8002526:	d108      	bne.n	800253a <main+0x1536>
      				st=MENU;
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <main+0x161c>)
 800252a:	2203      	movs	r2, #3
 800252c:	701a      	strb	r2, [r3, #0]
      				col_t=0;
 800252e:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <main+0x1620>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
      				cursor=LEARNING;
 8002534:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <main+0x1624>)
 8002536:	2205      	movs	r2, #5
 8002538:	701a      	strb	r2, [r3, #0]
      			}
      			if(key=='s'){
 800253a:	7afb      	ldrb	r3, [r7, #11]
 800253c:	2b73      	cmp	r3, #115	; 0x73
 800253e:	d169      	bne.n	8002614 <main+0x1610>
      				if(show_coil==1)
 8002540:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <main+0x1630>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <main+0x1550>
      					send_write_coil(0xA07, 0x00);
 8002548:	2100      	movs	r1, #0
 800254a:	f640 2007 	movw	r0, #2567	; 0xa07
 800254e:	f000 ff8d 	bl	800346c <send_write_coil>
 8002552:	e009      	b.n	8002568 <main+0x1564>
      				else if(show_coil==0)
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <main+0x1630>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <main+0x1564>
      					send_write_coil(0xA07, 0xff00);
 800255c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002560:	f640 2007 	movw	r0, #2567	; 0xa07
 8002564:	f000 ff82 	bl	800346c <send_write_coil>
      				col_t=0;;
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <main+0x1620>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e051      	b.n	8002614 <main+0x1610>



  //#####################################   MANUAL CONTROL STATE  ##################################################

      	else if(st==MANUAL_CONTROL){ ///   MANULA CONTROL *********************************************
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <main+0x161c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b0a      	cmp	r3, #10
 8002576:	d13c      	bne.n	80025f2 <main+0x15ee>
      		if(col==0){
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <main+0x163c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <main+0x158c>
      			lcd16x2_clear();
 8002580:	f7fe fd06 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("speed(2-40):");
 8002584:	482f      	ldr	r0, [pc, #188]	; (8002644 <main+0x1640>)
 8002586:	f7fe fd0d 	bl	8000fa4 <lcd16x2_printf>
      			lcd16x2_2ndLine();
 800258a:	f7fe fcd1 	bl	8000f30 <lcd16x2_2ndLine>
 800258e:	e005      	b.n	800259c <main+0x1598>
      		}
      		else{
      			//lcd16x2_2ndLine();
      			lcd16x2_setCursor(2, col);
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <main+0x163c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	2002      	movs	r0, #2
 8002598:	f7fe fca6 	bl	8000ee8 <lcd16x2_setCursor>
      		}
      			key=get_key();
 800259c:	f001 fb80 	bl	8003ca0 <get_key>
 80025a0:	4603      	mov	r3, r0
 80025a2:	72fb      	strb	r3, [r7, #11]
      			if(key=='s'){//speed_man=40;
 80025a4:	7afb      	ldrb	r3, [r7, #11]
 80025a6:	2b73      	cmp	r3, #115	; 0x73
 80025a8:	d11b      	bne.n	80025e2 <main+0x15de>
      				if( speed_man>40 || speed_man<2){
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	2b28      	cmp	r3, #40	; 0x28
 80025ae:	d831      	bhi.n	8002614 <main+0x1610>
 80025b0:	893b      	ldrh	r3, [r7, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d92e      	bls.n	8002614 <main+0x1610>

      					// to_Do

      				}
      				else{
      					speed_man=speed_man*100;
 80025b6:	893b      	ldrh	r3, [r7, #8]
 80025b8:	461a      	mov	r2, r3
 80025ba:	0092      	lsls	r2, r2, #2
 80025bc:	4413      	add	r3, r2
 80025be:	461a      	mov	r2, r3
 80025c0:	0091      	lsls	r1, r2, #2
 80025c2:	461a      	mov	r2, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	813b      	strh	r3, [r7, #8]
      					send_write_register(0x119A,speed_man);
 80025ce:	893b      	ldrh	r3, [r7, #8]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f241 109a 	movw	r0, #4506	; 0x119a
 80025d6:	f000 fe87 	bl	80032e8 <send_write_register>
      					st=MANUAL_RUN;
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <main+0x161c>)
 80025dc:	2224      	movs	r2, #36	; 0x24
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e018      	b.n	8002614 <main+0x1610>

      				}
      			}
      			else{
      				set_speed(key, &speed_man);
 80025e2:	f107 0208 	add.w	r2, r7, #8
 80025e6:	7afb      	ldrb	r3, [r7, #11]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fd52 	bl	8003094 <set_speed>
 80025f0:	e010      	b.n	8002614 <main+0x1610>
      			}
      		}

      	else if(st==MANUAL_RUN){
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <main+0x161c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b24      	cmp	r3, #36	; 0x24
 80025f8:	d10c      	bne.n	8002614 <main+0x1610>
      			send_write_coil(0x9ff, 0xff00);
 80025fa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80025fe:	f640 10ff 	movw	r0, #2559	; 0x9ff
 8002602:	f000 ff33 	bl	800346c <send_write_coil>
      			lcd16x2_clear();
 8002606:	f7fe fcc3 	bl	8000f90 <lcd16x2_clear>
      			lcd16x2_printf("send command:");
 800260a:	480f      	ldr	r0, [pc, #60]	; (8002648 <main+0x1644>)
 800260c:	f7fe fcca 	bl	8000fa4 <lcd16x2_printf>
      			run_repeat_command_manual();
 8002610:	f000 f81c 	bl	800264c <run_repeat_command_manual>
      		}


  HAL_Delay(100);
 8002614:	2064      	movs	r0, #100	; 0x64
 8002616:	f002 f941 	bl	800489c <HAL_Delay>
      	if(st==PASSWORD){
 800261a:	f7fe bd3b 	b.w	8001094 <main+0x90>
 800261e:	bf00      	nop
 8002620:	200001cd 	.word	0x200001cd
 8002624:	200000ea 	.word	0x200000ea
 8002628:	200001c0 	.word	0x200001c0
 800262c:	08007cc4 	.word	0x08007cc4
 8002630:	200000d0 	.word	0x200000d0
 8002634:	200001cc 	.word	0x200001cc
 8002638:	08007ccc 	.word	0x08007ccc
 800263c:	08007cd4 	.word	0x08007cd4
 8002640:	200000e9 	.word	0x200000e9
 8002644:	08007cd8 	.word	0x08007cd8
 8002648:	08007ce8 	.word	0x08007ce8

0800264c <run_repeat_command_manual>:
  //HAL_Delay(100);


  }
       /* USER CODE END 3 */
  void run_repeat_command_manual(){
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  	 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // row 1 reset
 8002650:	2201      	movs	r2, #1
 8002652:	2110      	movs	r1, #16
 8002654:	48cb      	ldr	r0, [pc, #812]	; (8002984 <run_repeat_command_manual+0x338>)
 8002656:	f002 fd98 	bl	800518a <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2120      	movs	r1, #32
 800265e:	48c9      	ldr	r0, [pc, #804]	; (8002984 <run_repeat_command_manual+0x338>)
 8002660:	f002 fd93 	bl	800518a <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	48c6      	ldr	r0, [pc, #792]	; (8002984 <run_repeat_command_manual+0x338>)
 800266a:	f002 fd8e 	bl	800518a <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	48c4      	ldr	r0, [pc, #784]	; (8002984 <run_repeat_command_manual+0x338>)
 8002674:	f002 fd89 	bl	800518a <HAL_GPIO_WritePin>



  		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //f1
 8002678:	2108      	movs	r1, #8
 800267a:	48c3      	ldr	r0, [pc, #780]	; (8002988 <run_repeat_command_manual+0x33c>)
 800267c:	f002 fd6e 	bl	800515c <HAL_GPIO_ReadPin>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <run_repeat_command_manual+0x4c>
  		 	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8002686:	bf00      	nop
 8002688:	2108      	movs	r1, #8
 800268a:	48bf      	ldr	r0, [pc, #764]	; (8002988 <run_repeat_command_manual+0x33c>)
 800268c:	f002 fd66 	bl	800515c <HAL_GPIO_ReadPin>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d0f8      	beq.n	8002688 <run_repeat_command_manual+0x3c>
  		  	return ;
 8002696:	e18b      	b.n	80029b0 <run_repeat_command_manual+0x364>

  		  }
  		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 3
 8002698:	2110      	movs	r1, #16
 800269a:	48bb      	ldr	r0, [pc, #748]	; (8002988 <run_repeat_command_manual+0x33c>)
 800269c:	f002 fd5e 	bl	800515c <HAL_GPIO_ReadPin>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d113      	bne.n	80026ce <run_repeat_command_manual+0x82>
  			  		send_write_coil(0x09f5, 0xff00);
 80026a6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80026aa:	f640 10f5 	movw	r0, #2549	; 0x9f5
 80026ae:	f000 fedd 	bl	800346c <send_write_coil>
  			  		while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 80026b2:	bf00      	nop
 80026b4:	2110      	movs	r1, #16
 80026b6:	48b4      	ldr	r0, [pc, #720]	; (8002988 <run_repeat_command_manual+0x33c>)
 80026b8:	f002 fd50 	bl	800515c <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d0f8      	beq.n	80026b4 <run_repeat_command_manual+0x68>
  			  		send_write_coil(0x09f5, 0x0000);
 80026c2:	2100      	movs	r1, #0
 80026c4:	f640 10f5 	movw	r0, #2549	; 0x9f5
 80026c8:	f000 fed0 	bl	800346c <send_write_coil>
  			   return;
 80026cc:	e170      	b.n	80029b0 <run_repeat_command_manual+0x364>

  		   }


  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 2
 80026ce:	2120      	movs	r1, #32
 80026d0:	48ad      	ldr	r0, [pc, #692]	; (8002988 <run_repeat_command_manual+0x33c>)
 80026d2:	f002 fd43 	bl	800515c <HAL_GPIO_ReadPin>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10e      	bne.n	80026fa <run_repeat_command_manual+0xae>
  			   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 80026dc:	bf00      	nop
 80026de:	2120      	movs	r1, #32
 80026e0:	48a9      	ldr	r0, [pc, #676]	; (8002988 <run_repeat_command_manual+0x33c>)
 80026e2:	f002 fd3b 	bl	800515c <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d0f8      	beq.n	80026de <run_repeat_command_manual+0x92>
  			   send_write_coil(0x09f6, 0xff00);
 80026ec:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80026f0:	f640 10f6 	movw	r0, #2550	; 0x9f6
 80026f4:	f000 feba 	bl	800346c <send_write_coil>
  			   return ;
 80026f8:	e15a      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		    }

  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 1
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	48a2      	ldr	r0, [pc, #648]	; (8002988 <run_repeat_command_manual+0x33c>)
 80026fe:	f002 fd2d 	bl	800515c <HAL_GPIO_ReadPin>
 8002702:	4603      	mov	r3, r0
 8002704:	2b01      	cmp	r3, #1
 8002706:	d113      	bne.n	8002730 <run_repeat_command_manual+0xe4>
  			   send_write_coil(0x09f4, 0xff00);
 8002708:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800270c:	f640 10f4 	movw	r0, #2548	; 0x9f4
 8002710:	f000 feac 	bl	800346c <send_write_coil>
  		   	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8002714:	bf00      	nop
 8002716:	2140      	movs	r1, #64	; 0x40
 8002718:	489b      	ldr	r0, [pc, #620]	; (8002988 <run_repeat_command_manual+0x33c>)
 800271a:	f002 fd1f 	bl	800515c <HAL_GPIO_ReadPin>
 800271e:	4603      	mov	r3, r0
 8002720:	2b01      	cmp	r3, #1
 8002722:	d0f8      	beq.n	8002716 <run_repeat_command_manual+0xca>
  		   	   send_write_coil(0x09f4, 0x0000);
 8002724:	2100      	movs	r1, #0
 8002726:	f640 10f4 	movw	r0, #2548	; 0x9f4
 800272a:	f000 fe9f 	bl	800346c <send_write_coil>
  		   	   return ;
 800272e:	e13f      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		   }


  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // row 2 reset
 8002730:	2200      	movs	r2, #0
 8002732:	2110      	movs	r1, #16
 8002734:	4893      	ldr	r0, [pc, #588]	; (8002984 <run_repeat_command_manual+0x338>)
 8002736:	f002 fd28 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800273a:	2201      	movs	r2, #1
 800273c:	2120      	movs	r1, #32
 800273e:	4891      	ldr	r0, [pc, #580]	; (8002984 <run_repeat_command_manual+0x338>)
 8002740:	f002 fd23 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	488e      	ldr	r0, [pc, #568]	; (8002984 <run_repeat_command_manual+0x338>)
 800274a:	f002 fd1e 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	488c      	ldr	r0, [pc, #560]	; (8002984 <run_repeat_command_manual+0x338>)
 8002754:	f002 fd19 	bl	800518a <HAL_GPIO_WritePin>

  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //up
 8002758:	2108      	movs	r1, #8
 800275a:	488b      	ldr	r0, [pc, #556]	; (8002988 <run_repeat_command_manual+0x33c>)
 800275c:	f002 fcfe 	bl	800515c <HAL_GPIO_ReadPin>
 8002760:	4603      	mov	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <run_repeat_command_manual+0x12c>
  		    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8002766:	bf00      	nop
 8002768:	2108      	movs	r1, #8
 800276a:	4887      	ldr	r0, [pc, #540]	; (8002988 <run_repeat_command_manual+0x33c>)
 800276c:	f002 fcf6 	bl	800515c <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d0f8      	beq.n	8002768 <run_repeat_command_manual+0x11c>
  		    	return ;
 8002776:	e11b      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		     }

  		     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 6
 8002778:	2110      	movs	r1, #16
 800277a:	4883      	ldr	r0, [pc, #524]	; (8002988 <run_repeat_command_manual+0x33c>)
 800277c:	f002 fcee 	bl	800515c <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10e      	bne.n	80027a4 <run_repeat_command_manual+0x158>
  		    	 while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET );
 8002786:	bf00      	nop
 8002788:	2110      	movs	r1, #16
 800278a:	487f      	ldr	r0, [pc, #508]	; (8002988 <run_repeat_command_manual+0x33c>)
 800278c:	f002 fce6 	bl	800515c <HAL_GPIO_ReadPin>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d0f8      	beq.n	8002788 <run_repeat_command_manual+0x13c>
  		    	 send_write_coil(0x9f8, 0xff00);
 8002796:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800279a:	f640 10f8 	movw	r0, #2552	; 0x9f8
 800279e:	f000 fe65 	bl	800346c <send_write_coil>
  		    	 return ;
 80027a2:	e105      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		     }
  		    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 5
 80027a4:	2120      	movs	r1, #32
 80027a6:	4878      	ldr	r0, [pc, #480]	; (8002988 <run_repeat_command_manual+0x33c>)
 80027a8:	f002 fcd8 	bl	800515c <HAL_GPIO_ReadPin>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10e      	bne.n	80027d0 <run_repeat_command_manual+0x184>
  		    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 80027b2:	bf00      	nop
 80027b4:	2120      	movs	r1, #32
 80027b6:	4874      	ldr	r0, [pc, #464]	; (8002988 <run_repeat_command_manual+0x33c>)
 80027b8:	f002 fcd0 	bl	800515c <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d0f8      	beq.n	80027b4 <run_repeat_command_manual+0x168>
  		    	send_write_coil(0x09fc, 0xff00);
 80027c2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80027c6:	f640 10fc 	movw	r0, #2556	; 0x9fc
 80027ca:	f000 fe4f 	bl	800346c <send_write_coil>
  		    	return;
 80027ce:	e0ef      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		       }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 4
 80027d0:	2140      	movs	r1, #64	; 0x40
 80027d2:	486d      	ldr	r0, [pc, #436]	; (8002988 <run_repeat_command_manual+0x33c>)
 80027d4:	f002 fcc2 	bl	800515c <HAL_GPIO_ReadPin>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10e      	bne.n	80027fc <run_repeat_command_manual+0x1b0>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 80027de:	bf00      	nop
 80027e0:	2140      	movs	r1, #64	; 0x40
 80027e2:	4869      	ldr	r0, [pc, #420]	; (8002988 <run_repeat_command_manual+0x33c>)
 80027e4:	f002 fcba 	bl	800515c <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d0f8      	beq.n	80027e0 <run_repeat_command_manual+0x194>
  		    	  send_write_coil(0x9f9, 0xff00);
 80027ee:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80027f2:	f640 10f9 	movw	r0, #2553	; 0x9f9
 80027f6:	f000 fe39 	bl	800346c <send_write_coil>
  		    	  return ;
 80027fa:	e0d9      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		      }
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 3 reset
 80027fc:	2200      	movs	r2, #0
 80027fe:	2110      	movs	r1, #16
 8002800:	4860      	ldr	r0, [pc, #384]	; (8002984 <run_repeat_command_manual+0x338>)
 8002802:	f002 fcc2 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	2120      	movs	r1, #32
 800280a:	485e      	ldr	r0, [pc, #376]	; (8002984 <run_repeat_command_manual+0x338>)
 800280c:	f002 fcbd 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	485b      	ldr	r0, [pc, #364]	; (8002984 <run_repeat_command_manual+0x338>)
 8002816:	f002 fcb8 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	4859      	ldr	r0, [pc, #356]	; (8002984 <run_repeat_command_manual+0x338>)
 8002820:	f002 fcb3 	bl	800518a <HAL_GPIO_WritePin>



  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //down
 8002824:	2108      	movs	r1, #8
 8002826:	4858      	ldr	r0, [pc, #352]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002828:	f002 fc98 	bl	800515c <HAL_GPIO_ReadPin>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d108      	bne.n	8002844 <run_repeat_command_manual+0x1f8>
  		    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8002832:	bf00      	nop
 8002834:	2108      	movs	r1, #8
 8002836:	4854      	ldr	r0, [pc, #336]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002838:	f002 fc90 	bl	800515c <HAL_GPIO_ReadPin>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d0f8      	beq.n	8002834 <run_repeat_command_manual+0x1e8>
  		    	return;
 8002842:	e0b5      	b.n	80029b0 <run_repeat_command_manual+0x364>

  		     }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){ // 9
 8002844:	2110      	movs	r1, #16
 8002846:	4850      	ldr	r0, [pc, #320]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002848:	f002 fc88 	bl	800515c <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <run_repeat_command_manual+0x224>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4));
 8002852:	bf00      	nop
 8002854:	2110      	movs	r1, #16
 8002856:	484c      	ldr	r0, [pc, #304]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002858:	f002 fc80 	bl	800515c <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f8      	bne.n	8002854 <run_repeat_command_manual+0x208>
  		    	  send_write_coil(0x9fB, 0xff00);
 8002862:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002866:	f640 10fb 	movw	r0, #2555	; 0x9fb
 800286a:	f000 fdff 	bl	800346c <send_write_coil>
  		   	  	  return ;
 800286e:	e09f      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		     }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 8
 8002870:	2120      	movs	r1, #32
 8002872:	4845      	ldr	r0, [pc, #276]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002874:	f002 fc72 	bl	800515c <HAL_GPIO_ReadPin>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10e      	bne.n	800289c <run_repeat_command_manual+0x250>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 800287e:	bf00      	nop
 8002880:	2120      	movs	r1, #32
 8002882:	4841      	ldr	r0, [pc, #260]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002884:	f002 fc6a 	bl	800515c <HAL_GPIO_ReadPin>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d0f8      	beq.n	8002880 <run_repeat_command_manual+0x234>
  		    	  send_write_coil(0x9f7, 0xff00);
 800288e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002892:	f640 10f7 	movw	r0, #2551	; 0x9f7
 8002896:	f000 fde9 	bl	800346c <send_write_coil>
  		     	  return ;
 800289a:	e089      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		       }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 7
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	483a      	ldr	r0, [pc, #232]	; (8002988 <run_repeat_command_manual+0x33c>)
 80028a0:	f002 fc5c 	bl	800515c <HAL_GPIO_ReadPin>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10e      	bne.n	80028c8 <run_repeat_command_manual+0x27c>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 80028aa:	bf00      	nop
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	4836      	ldr	r0, [pc, #216]	; (8002988 <run_repeat_command_manual+0x33c>)
 80028b0:	f002 fc54 	bl	800515c <HAL_GPIO_ReadPin>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d0f8      	beq.n	80028ac <run_repeat_command_manual+0x260>
  		    	  send_write_coil(0x9fA, 0xff00);
 80028ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80028be:	f640 10fa 	movw	r0, #2554	; 0x9fa
 80028c2:	f000 fdd3 	bl	800346c <send_write_coil>
  		      	  return;
 80028c6:	e073      	b.n	80029b0 <run_repeat_command_manual+0x364>
  		        }
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 4 reset
 80028c8:	2200      	movs	r2, #0
 80028ca:	2110      	movs	r1, #16
 80028cc:	482d      	ldr	r0, [pc, #180]	; (8002984 <run_repeat_command_manual+0x338>)
 80028ce:	f002 fc5c 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2120      	movs	r1, #32
 80028d6:	482b      	ldr	r0, [pc, #172]	; (8002984 <run_repeat_command_manual+0x338>)
 80028d8:	f002 fc57 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80028dc:	2200      	movs	r2, #0
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	4828      	ldr	r0, [pc, #160]	; (8002984 <run_repeat_command_manual+0x338>)
 80028e2:	f002 fc52 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	4826      	ldr	r0, [pc, #152]	; (8002984 <run_repeat_command_manual+0x338>)
 80028ec:	f002 fc4d 	bl	800518a <HAL_GPIO_WritePin>



  			   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //menu
 80028f0:	2108      	movs	r1, #8
 80028f2:	4825      	ldr	r0, [pc, #148]	; (8002988 <run_repeat_command_manual+0x33c>)
 80028f4:	f002 fc32 	bl	800515c <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d11b      	bne.n	8002936 <run_repeat_command_manual+0x2ea>
  				   send_write_coil(0x9ed, 0xff00);
 80028fe:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002902:	f640 10ed 	movw	r0, #2541	; 0x9ed
 8002906:	f000 fdb1 	bl	800346c <send_write_coil>
  				   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 800290a:	bf00      	nop
 800290c:	2108      	movs	r1, #8
 800290e:	481e      	ldr	r0, [pc, #120]	; (8002988 <run_repeat_command_manual+0x33c>)
 8002910:	f002 fc24 	bl	800515c <HAL_GPIO_ReadPin>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d0f8      	beq.n	800290c <run_repeat_command_manual+0x2c0>
  				   send_write_coil(0x9ed, 0x00);
 800291a:	2100      	movs	r1, #0
 800291c:	f640 10ed 	movw	r0, #2541	; 0x9ed
 8002920:	f000 fda4 	bl	800346c <send_write_coil>
  				   send_write_coil(0x9ff, 0x00);
 8002924:	2100      	movs	r1, #0
 8002926:	f640 10ff 	movw	r0, #2559	; 0x9ff
 800292a:	f000 fd9f 	bl	800346c <send_write_coil>
  				   st=MENU;
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <run_repeat_command_manual+0x340>)
 8002930:	2203      	movs	r2, #3
 8002932:	701a      	strb	r2, [r3, #0]
  				   return;
 8002934:	e03c      	b.n	80029b0 <run_repeat_command_manual+0x364>

  			     }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // reset
 8002936:	2110      	movs	r1, #16
 8002938:	4813      	ldr	r0, [pc, #76]	; (8002988 <run_repeat_command_manual+0x33c>)
 800293a:	f002 fc0f 	bl	800515c <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d108      	bne.n	8002956 <run_repeat_command_manual+0x30a>
  		   	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 8002944:	bf00      	nop
 8002946:	2110      	movs	r1, #16
 8002948:	480f      	ldr	r0, [pc, #60]	; (8002988 <run_repeat_command_manual+0x33c>)
 800294a:	f002 fc07 	bl	800515c <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d0f8      	beq.n	8002946 <run_repeat_command_manual+0x2fa>
  		   	   return ;
 8002954:	e02c      	b.n	80029b0 <run_repeat_command_manual+0x364>

  		     }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 0
 8002956:	2120      	movs	r1, #32
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <run_repeat_command_manual+0x33c>)
 800295a:	f002 fbff 	bl	800515c <HAL_GPIO_ReadPin>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d115      	bne.n	8002990 <run_repeat_command_manual+0x344>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8002964:	bf00      	nop
 8002966:	2120      	movs	r1, #32
 8002968:	4807      	ldr	r0, [pc, #28]	; (8002988 <run_repeat_command_manual+0x33c>)
 800296a:	f002 fbf7 	bl	800515c <HAL_GPIO_ReadPin>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	d0f8      	beq.n	8002966 <run_repeat_command_manual+0x31a>
  		     	  send_write_coil(0x09fd, 0xff00);
 8002974:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002978:	f640 10fd 	movw	r0, #2557	; 0x9fd
 800297c:	f000 fd76 	bl	800346c <send_write_coil>
  		     	  return ;
 8002980:	e016      	b.n	80029b0 <run_repeat_command_manual+0x364>
 8002982:	bf00      	nop
 8002984:	40010800 	.word	0x40010800
 8002988:	40010c00 	.word	0x40010c00
 800298c:	200001cd 	.word	0x200001cd

  		       }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // set
 8002990:	2140      	movs	r1, #64	; 0x40
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <run_repeat_command_manual+0x368>)
 8002994:	f002 fbe2 	bl	800515c <HAL_GPIO_ReadPin>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <run_repeat_command_manual+0x364>
  		      	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 800299e:	bf00      	nop
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	4804      	ldr	r0, [pc, #16]	; (80029b4 <run_repeat_command_manual+0x368>)
 80029a4:	f002 fbda 	bl	800515c <HAL_GPIO_ReadPin>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d0f8      	beq.n	80029a0 <run_repeat_command_manual+0x354>
  		      	   return ;
 80029ae:	bf00      	nop
  		      }
  }
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40010c00 	.word	0x40010c00

080029b8 <run_repeat_command_learning>:

  void run_repeat_command_learning(){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0

  	 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // row 1 reset
 80029bc:	2201      	movs	r2, #1
 80029be:	2110      	movs	r1, #16
 80029c0:	48cd      	ldr	r0, [pc, #820]	; (8002cf8 <run_repeat_command_learning+0x340>)
 80029c2:	f002 fbe2 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2120      	movs	r1, #32
 80029ca:	48cb      	ldr	r0, [pc, #812]	; (8002cf8 <run_repeat_command_learning+0x340>)
 80029cc:	f002 fbdd 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	48c8      	ldr	r0, [pc, #800]	; (8002cf8 <run_repeat_command_learning+0x340>)
 80029d6:	f002 fbd8 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	48c6      	ldr	r0, [pc, #792]	; (8002cf8 <run_repeat_command_learning+0x340>)
 80029e0:	f002 fbd3 	bl	800518a <HAL_GPIO_WritePin>



  		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //f1
 80029e4:	2108      	movs	r1, #8
 80029e6:	48c5      	ldr	r0, [pc, #788]	; (8002cfc <run_repeat_command_learning+0x344>)
 80029e8:	f002 fbb8 	bl	800515c <HAL_GPIO_ReadPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d11f      	bne.n	8002a32 <run_repeat_command_learning+0x7a>
  			  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 80029f2:	bf00      	nop
 80029f4:	2108      	movs	r1, #8
 80029f6:	48c1      	ldr	r0, [pc, #772]	; (8002cfc <run_repeat_command_learning+0x344>)
 80029f8:	f002 fbb0 	bl	800515c <HAL_GPIO_ReadPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d0f8      	beq.n	80029f4 <run_repeat_command_learning+0x3c>
  			  send_write_coil(0x09EA, 0xff00);
 8002a02:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002a06:	f640 10ea 	movw	r0, #2538	; 0x9ea
 8002a0a:	f000 fd2f 	bl	800346c <send_write_coil>
  			  send_write_coil(0x09EA, 0x0000);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f640 10ea 	movw	r0, #2538	; 0x9ea
 8002a14:	f000 fd2a 	bl	800346c <send_write_coil>
  			  st=LEARN_QUESTION;
 8002a18:	4bb9      	ldr	r3, [pc, #740]	; (8002d00 <run_repeat_command_learning+0x348>)
 8002a1a:	220d      	movs	r2, #13
 8002a1c:	701a      	strb	r2, [r3, #0]
  			  send_write_coil(0x09E0, 0xff00);
 8002a1e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002a22:	f44f 601e 	mov.w	r0, #2528	; 0x9e0
 8002a26:	f000 fd21 	bl	800346c <send_write_coil>
  			  cursor=TIME_TO_WAIT;
 8002a2a:	4bb6      	ldr	r3, [pc, #728]	; (8002d04 <run_repeat_command_learning+0x34c>)
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	701a      	strb	r2, [r3, #0]
  			  return ;
 8002a30:	e1be      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		  }
  		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 3
 8002a32:	2110      	movs	r1, #16
 8002a34:	48b1      	ldr	r0, [pc, #708]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002a36:	f002 fb91 	bl	800515c <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d113      	bne.n	8002a68 <run_repeat_command_learning+0xb0>
  			  		send_write_coil(0x09f5, 0xff00);
 8002a40:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002a44:	f640 10f5 	movw	r0, #2549	; 0x9f5
 8002a48:	f000 fd10 	bl	800346c <send_write_coil>
  			  		while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 8002a4c:	bf00      	nop
 8002a4e:	2110      	movs	r1, #16
 8002a50:	48aa      	ldr	r0, [pc, #680]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002a52:	f002 fb83 	bl	800515c <HAL_GPIO_ReadPin>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d0f8      	beq.n	8002a4e <run_repeat_command_learning+0x96>
  			  		send_write_coil(0x09f5, 0x0000);
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	f640 10f5 	movw	r0, #2549	; 0x9f5
 8002a62:	f000 fd03 	bl	800346c <send_write_coil>
  			   return;
 8002a66:	e1a3      	b.n	8002db0 <run_repeat_command_learning+0x3f8>

  		   }


  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 2
 8002a68:	2120      	movs	r1, #32
 8002a6a:	48a4      	ldr	r0, [pc, #656]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002a6c:	f002 fb76 	bl	800515c <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d10e      	bne.n	8002a94 <run_repeat_command_learning+0xdc>
  			   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8002a76:	bf00      	nop
 8002a78:	2120      	movs	r1, #32
 8002a7a:	48a0      	ldr	r0, [pc, #640]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002a7c:	f002 fb6e 	bl	800515c <HAL_GPIO_ReadPin>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d0f8      	beq.n	8002a78 <run_repeat_command_learning+0xc0>
  			   send_write_coil(0x09f6, 0xff00);
 8002a86:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002a8a:	f640 10f6 	movw	r0, #2550	; 0x9f6
 8002a8e:	f000 fced 	bl	800346c <send_write_coil>
  			   return ;
 8002a92:	e18d      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		    }

  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 1
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	4899      	ldr	r0, [pc, #612]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002a98:	f002 fb60 	bl	800515c <HAL_GPIO_ReadPin>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d113      	bne.n	8002aca <run_repeat_command_learning+0x112>
  			   send_write_coil(0x09f4, 0xff00);
 8002aa2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002aa6:	f640 10f4 	movw	r0, #2548	; 0x9f4
 8002aaa:	f000 fcdf 	bl	800346c <send_write_coil>
  			   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8002aae:	bf00      	nop
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	4892      	ldr	r0, [pc, #584]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002ab4:	f002 fb52 	bl	800515c <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d0f8      	beq.n	8002ab0 <run_repeat_command_learning+0xf8>
  			   send_write_coil(0x09f4, 0x0000);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f640 10f4 	movw	r0, #2548	; 0x9f4
 8002ac4:	f000 fcd2 	bl	800346c <send_write_coil>
  		   	   return ;
 8002ac8:	e172      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		   }


  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // row 2 reset
 8002aca:	2200      	movs	r2, #0
 8002acc:	2110      	movs	r1, #16
 8002ace:	488a      	ldr	r0, [pc, #552]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002ad0:	f002 fb5b 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	4887      	ldr	r0, [pc, #540]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002ada:	f002 fb56 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2140      	movs	r1, #64	; 0x40
 8002ae2:	4885      	ldr	r0, [pc, #532]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002ae4:	f002 fb51 	bl	800518a <HAL_GPIO_WritePin>
  		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	4882      	ldr	r0, [pc, #520]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002aee:	f002 fb4c 	bl	800518a <HAL_GPIO_WritePin>

  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //up
 8002af2:	2108      	movs	r1, #8
 8002af4:	4881      	ldr	r0, [pc, #516]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002af6:	f002 fb31 	bl	800515c <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d113      	bne.n	8002b28 <run_repeat_command_learning+0x170>
  			   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8002b00:	bf00      	nop
 8002b02:	2108      	movs	r1, #8
 8002b04:	487d      	ldr	r0, [pc, #500]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b06:	f002 fb29 	bl	800515c <HAL_GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d0f8      	beq.n	8002b02 <run_repeat_command_learning+0x14a>
  			   send_write_coil(0x9eb, 0xff00);
 8002b10:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002b14:	f640 10eb 	movw	r0, #2539	; 0x9eb
 8002b18:	f000 fca8 	bl	800346c <send_write_coil>
  			   send_write_coil(0x9eb, 0x00);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f640 10eb 	movw	r0, #2539	; 0x9eb
 8002b22:	f000 fca3 	bl	800346c <send_write_coil>
  			   return ;
 8002b26:	e143      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		     }

  		     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 6
 8002b28:	2110      	movs	r1, #16
 8002b2a:	4874      	ldr	r0, [pc, #464]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b2c:	f002 fb16 	bl	800515c <HAL_GPIO_ReadPin>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10e      	bne.n	8002b54 <run_repeat_command_learning+0x19c>
  		    	 while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET );
 8002b36:	bf00      	nop
 8002b38:	2110      	movs	r1, #16
 8002b3a:	4870      	ldr	r0, [pc, #448]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b3c:	f002 fb0e 	bl	800515c <HAL_GPIO_ReadPin>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d0f8      	beq.n	8002b38 <run_repeat_command_learning+0x180>
  		    	 send_write_coil(0x9f8, 0xff00);
 8002b46:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002b4a:	f640 10f8 	movw	r0, #2552	; 0x9f8
 8002b4e:	f000 fc8d 	bl	800346c <send_write_coil>
  		    	 return ;
 8002b52:	e12d      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		     }
  		    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 5
 8002b54:	2120      	movs	r1, #32
 8002b56:	4869      	ldr	r0, [pc, #420]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b58:	f002 fb00 	bl	800515c <HAL_GPIO_ReadPin>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10e      	bne.n	8002b80 <run_repeat_command_learning+0x1c8>
  		    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8002b62:	bf00      	nop
 8002b64:	2120      	movs	r1, #32
 8002b66:	4865      	ldr	r0, [pc, #404]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b68:	f002 faf8 	bl	800515c <HAL_GPIO_ReadPin>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d0f8      	beq.n	8002b64 <run_repeat_command_learning+0x1ac>
  		    	send_write_coil(0x09fc, 0xff00);
 8002b72:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002b76:	f640 10fc 	movw	r0, #2556	; 0x9fc
 8002b7a:	f000 fc77 	bl	800346c <send_write_coil>
  		    	return;
 8002b7e:	e117      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		       }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 4
 8002b80:	2140      	movs	r1, #64	; 0x40
 8002b82:	485e      	ldr	r0, [pc, #376]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b84:	f002 faea 	bl	800515c <HAL_GPIO_ReadPin>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10e      	bne.n	8002bac <run_repeat_command_learning+0x1f4>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8002b8e:	bf00      	nop
 8002b90:	2140      	movs	r1, #64	; 0x40
 8002b92:	485a      	ldr	r0, [pc, #360]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002b94:	f002 fae2 	bl	800515c <HAL_GPIO_ReadPin>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d0f8      	beq.n	8002b90 <run_repeat_command_learning+0x1d8>
  		    	  send_write_coil(0x9f9, 0xff00);
 8002b9e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002ba2:	f640 10f9 	movw	r0, #2553	; 0x9f9
 8002ba6:	f000 fc61 	bl	800346c <send_write_coil>
  		    	  return ;
 8002baa:	e101      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		      }
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 3 reset
 8002bac:	2200      	movs	r2, #0
 8002bae:	2110      	movs	r1, #16
 8002bb0:	4851      	ldr	r0, [pc, #324]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002bb2:	f002 faea 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2120      	movs	r1, #32
 8002bba:	484f      	ldr	r0, [pc, #316]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002bbc:	f002 fae5 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2140      	movs	r1, #64	; 0x40
 8002bc4:	484c      	ldr	r0, [pc, #304]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002bc6:	f002 fae0 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	484a      	ldr	r0, [pc, #296]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002bd0:	f002 fadb 	bl	800518a <HAL_GPIO_WritePin>



  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //down
 8002bd4:	2108      	movs	r1, #8
 8002bd6:	4849      	ldr	r0, [pc, #292]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002bd8:	f002 fac0 	bl	800515c <HAL_GPIO_ReadPin>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d113      	bne.n	8002c0a <run_repeat_command_learning+0x252>

  		    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8002be2:	bf00      	nop
 8002be4:	2108      	movs	r1, #8
 8002be6:	4845      	ldr	r0, [pc, #276]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002be8:	f002 fab8 	bl	800515c <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d0f8      	beq.n	8002be4 <run_repeat_command_learning+0x22c>
  		    	send_write_coil(0x9ec, 0xff00);
 8002bf2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002bf6:	f640 10ec 	movw	r0, #2540	; 0x9ec
 8002bfa:	f000 fc37 	bl	800346c <send_write_coil>
  		    	send_write_coil(0x9ec, 0x00);
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f640 10ec 	movw	r0, #2540	; 0x9ec
 8002c04:	f000 fc32 	bl	800346c <send_write_coil>
  		    	return;
 8002c08:	e0d2      	b.n	8002db0 <run_repeat_command_learning+0x3f8>

  		     }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){ // 9
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	483b      	ldr	r0, [pc, #236]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002c0e:	f002 faa5 	bl	800515c <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <run_repeat_command_learning+0x27e>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4));
 8002c18:	bf00      	nop
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	4837      	ldr	r0, [pc, #220]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002c1e:	f002 fa9d 	bl	800515c <HAL_GPIO_ReadPin>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f8      	bne.n	8002c1a <run_repeat_command_learning+0x262>
  		    	  send_write_coil(0x9fB, 0xff00);
 8002c28:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002c2c:	f640 10fb 	movw	r0, #2555	; 0x9fb
 8002c30:	f000 fc1c 	bl	800346c <send_write_coil>
  		    	  return ;
 8002c34:	e0bc      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		     }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 8
 8002c36:	2120      	movs	r1, #32
 8002c38:	4830      	ldr	r0, [pc, #192]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002c3a:	f002 fa8f 	bl	800515c <HAL_GPIO_ReadPin>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10e      	bne.n	8002c62 <run_repeat_command_learning+0x2aa>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8002c44:	bf00      	nop
 8002c46:	2120      	movs	r1, #32
 8002c48:	482c      	ldr	r0, [pc, #176]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002c4a:	f002 fa87 	bl	800515c <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d0f8      	beq.n	8002c46 <run_repeat_command_learning+0x28e>
  		    	  send_write_coil(0x9f7, 0xff00);
 8002c54:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002c58:	f640 10f7 	movw	r0, #2551	; 0x9f7
 8002c5c:	f000 fc06 	bl	800346c <send_write_coil>
  		    	  return ;
 8002c60:	e0a6      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		       }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 7
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	4825      	ldr	r0, [pc, #148]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002c66:	f002 fa79 	bl	800515c <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10e      	bne.n	8002c8e <run_repeat_command_learning+0x2d6>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8002c70:	bf00      	nop
 8002c72:	2140      	movs	r1, #64	; 0x40
 8002c74:	4821      	ldr	r0, [pc, #132]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002c76:	f002 fa71 	bl	800515c <HAL_GPIO_ReadPin>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d0f8      	beq.n	8002c72 <run_repeat_command_learning+0x2ba>
  		    	  send_write_coil(0x9fA, 0xff00);
 8002c80:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002c84:	f640 10fa 	movw	r0, #2554	; 0x9fa
 8002c88:	f000 fbf0 	bl	800346c <send_write_coil>
  		      	  return;
 8002c8c:	e090      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		        }
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 4 reset
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2110      	movs	r1, #16
 8002c92:	4819      	ldr	r0, [pc, #100]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002c94:	f002 fa79 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	4816      	ldr	r0, [pc, #88]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002c9e:	f002 fa74 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	4814      	ldr	r0, [pc, #80]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002ca8:	f002 fa6f 	bl	800518a <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002cac:	2201      	movs	r2, #1
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	4811      	ldr	r0, [pc, #68]	; (8002cf8 <run_repeat_command_learning+0x340>)
 8002cb2:	f002 fa6a 	bl	800518a <HAL_GPIO_WritePin>


  		   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //menu
 8002cb6:	2108      	movs	r1, #8
 8002cb8:	4810      	ldr	r0, [pc, #64]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002cba:	f002 fa4f 	bl	800515c <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d123      	bne.n	8002d0c <run_repeat_command_learning+0x354>
  			   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8002cc4:	bf00      	nop
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <run_repeat_command_learning+0x344>)
 8002cca:	f002 fa47 	bl	800515c <HAL_GPIO_ReadPin>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d0f8      	beq.n	8002cc6 <run_repeat_command_learning+0x30e>
  		 	   send_write_coil(0x9ed, 0xff00);
 8002cd4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002cd8:	f640 10ed 	movw	r0, #2541	; 0x9ed
 8002cdc:	f000 fbc6 	bl	800346c <send_write_coil>
  		 	   send_write_coil(0x9fe, 0x00);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f640 10fe 	movw	r0, #2558	; 0x9fe
 8002ce6:	f000 fbc1 	bl	800346c <send_write_coil>
  		 	   cc=0;
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <run_repeat_command_learning+0x350>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
  		 	   st=LEARNING;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <run_repeat_command_learning+0x348>)
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	701a      	strb	r2, [r3, #0]
  		 	   return;
 8002cf6:	e05b      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40010c00 	.word	0x40010c00
 8002d00:	200001cd 	.word	0x200001cd
 8002d04:	200001c0 	.word	0x200001c0
 8002d08:	200000eb 	.word	0x200000eb

  		     }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // reset
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	4829      	ldr	r0, [pc, #164]	; (8002db4 <run_repeat_command_learning+0x3fc>)
 8002d10:	f002 fa24 	bl	800515c <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d113      	bne.n	8002d42 <run_repeat_command_learning+0x38a>
  		    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 8002d1a:	bf00      	nop
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	4825      	ldr	r0, [pc, #148]	; (8002db4 <run_repeat_command_learning+0x3fc>)
 8002d20:	f002 fa1c 	bl	800515c <HAL_GPIO_ReadPin>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d0f8      	beq.n	8002d1c <run_repeat_command_learning+0x364>
  		    	  send_write_coil(0x9ef, 0xff00);
 8002d2a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002d2e:	f640 10ef 	movw	r0, #2543	; 0x9ef
 8002d32:	f000 fb9b 	bl	800346c <send_write_coil>
  		    	  send_write_coil(0x9ef, 0x00);
 8002d36:	2100      	movs	r1, #0
 8002d38:	f640 10ef 	movw	r0, #2543	; 0x9ef
 8002d3c:	f000 fb96 	bl	800346c <send_write_coil>
  		    	  return ;
 8002d40:	e036      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		      }
  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 0
 8002d42:	2120      	movs	r1, #32
 8002d44:	481b      	ldr	r0, [pc, #108]	; (8002db4 <run_repeat_command_learning+0x3fc>)
 8002d46:	f002 fa09 	bl	800515c <HAL_GPIO_ReadPin>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10e      	bne.n	8002d6e <run_repeat_command_learning+0x3b6>
  		     	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8002d50:	bf00      	nop
 8002d52:	2120      	movs	r1, #32
 8002d54:	4817      	ldr	r0, [pc, #92]	; (8002db4 <run_repeat_command_learning+0x3fc>)
 8002d56:	f002 fa01 	bl	800515c <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d0f8      	beq.n	8002d52 <run_repeat_command_learning+0x39a>
  		     	   send_write_coil(0x09fd, 0xff00);
 8002d60:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002d64:	f640 10fd 	movw	r0, #2557	; 0x9fd
 8002d68:	f000 fb80 	bl	800346c <send_write_coil>
  		     	   return ;
 8002d6c:	e020      	b.n	8002db0 <run_repeat_command_learning+0x3f8>
  		       }

  		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // set
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	4810      	ldr	r0, [pc, #64]	; (8002db4 <run_repeat_command_learning+0x3fc>)
 8002d72:	f002 f9f3 	bl	800515c <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d119      	bne.n	8002db0 <run_repeat_command_learning+0x3f8>

  		      	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8002d7c:	bf00      	nop
 8002d7e:	2140      	movs	r1, #64	; 0x40
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <run_repeat_command_learning+0x3fc>)
 8002d82:	f002 f9eb 	bl	800515c <HAL_GPIO_ReadPin>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d0f8      	beq.n	8002d7e <run_repeat_command_learning+0x3c6>
  		      	   HAL_Delay(10);
 8002d8c:	200a      	movs	r0, #10
 8002d8e:	f001 fd85 	bl	800489c <HAL_Delay>
  		      	   send_write_coil(0x9ee, 0xff00);
 8002d92:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002d96:	f640 10ee 	movw	r0, #2542	; 0x9ee
 8002d9a:	f000 fb67 	bl	800346c <send_write_coil>
  		      	   send_write_coil(0x9ee, 0x00);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f640 10ee 	movw	r0, #2542	; 0x9ee
 8002da4:	f000 fb62 	bl	800346c <send_write_coil>
  		      	   cc=0;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <run_repeat_command_learning+0x400>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  		      	   return ;
 8002dae:	bf00      	nop
  		      }
  }
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40010c00 	.word	0x40010c00
 8002db8:	200000eb 	.word	0x200000eb

08002dbc <show_cursor>:
  //	st=s;
  //
  //}


  void show_cursor(enum State c){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  	lcd16x2_clear();
 8002dc6:	f7fe f8e3 	bl	8000f90 <lcd16x2_clear>
  	if(c==MENU){
  		//lcd16x2_printf("learning");
  	}
  	if(c==LEARNING){
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d103      	bne.n	8002dd8 <show_cursor+0x1c>
  		lcd16x2_printf("Learning");
 8002dd0:	488f      	ldr	r0, [pc, #572]	; (8003010 <show_cursor+0x254>)
 8002dd2:	f7fe f8e7 	bl	8000fa4 <lcd16x2_printf>
			lcd16x2_printf("Mode1");
		}
	else if(c==MENU_RUN_COIL1_MODE2){
			lcd16x2_printf("Mode2");
		}
  }
 8002dd6:	e116      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==PARAMETER_SETTING){
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d108      	bne.n	8002df0 <show_cursor+0x34>
  		lcd16x2_printf("Parameter");
 8002dde:	488d      	ldr	r0, [pc, #564]	; (8003014 <show_cursor+0x258>)
 8002de0:	f7fe f8e0 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002de4:	f7fe f8a4 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Setting");
 8002de8:	488b      	ldr	r0, [pc, #556]	; (8003018 <show_cursor+0x25c>)
 8002dea:	f7fe f8db 	bl	8000fa4 <lcd16x2_printf>
  }
 8002dee:	e10a      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SHOW){
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	2b07      	cmp	r3, #7
 8002df4:	d103      	bne.n	8002dfe <show_cursor+0x42>
  		lcd16x2_printf("Show");
 8002df6:	4889      	ldr	r0, [pc, #548]	; (800301c <show_cursor+0x260>)
 8002df8:	f7fe f8d4 	bl	8000fa4 <lcd16x2_printf>
  }
 8002dfc:	e103      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==LOG){
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d103      	bne.n	8002e0c <show_cursor+0x50>
  		lcd16x2_printf("Log");
 8002e04:	4886      	ldr	r0, [pc, #536]	; (8003020 <show_cursor+0x264>)
 8002e06:	f7fe f8cd 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e0a:	e0fc      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==OTHERS){
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b09      	cmp	r3, #9
 8002e10:	d103      	bne.n	8002e1a <show_cursor+0x5e>
  		lcd16x2_printf("Others");
 8002e12:	4884      	ldr	r0, [pc, #528]	; (8003024 <show_cursor+0x268>)
 8002e14:	f7fe f8c6 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e18:	e0f5      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==MANUAL_CONTROL){
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b0a      	cmp	r3, #10
 8002e1e:	d108      	bne.n	8002e32 <show_cursor+0x76>
  		lcd16x2_printf("Manual");
 8002e20:	4881      	ldr	r0, [pc, #516]	; (8003028 <show_cursor+0x26c>)
 8002e22:	f7fe f8bf 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002e26:	f7fe f883 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Control");
 8002e2a:	4880      	ldr	r0, [pc, #512]	; (800302c <show_cursor+0x270>)
 8002e2c:	f7fe f8ba 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e30:	e0e9      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==MODE1){
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	2b0b      	cmp	r3, #11
 8002e36:	d103      	bne.n	8002e40 <show_cursor+0x84>
  		lcd16x2_printf("Mode1");
 8002e38:	487d      	ldr	r0, [pc, #500]	; (8003030 <show_cursor+0x274>)
 8002e3a:	f7fe f8b3 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e3e:	e0e2      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==MODE2){
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d103      	bne.n	8002e4e <show_cursor+0x92>
  			lcd16x2_printf("Mode2");
 8002e46:	487b      	ldr	r0, [pc, #492]	; (8003034 <show_cursor+0x278>)
 8002e48:	f7fe f8ac 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e4c:	e0db      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED){
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	d103      	bne.n	8002e5c <show_cursor+0xa0>
  		lcd16x2_printf("Speed");
 8002e54:	4878      	ldr	r0, [pc, #480]	; (8003038 <show_cursor+0x27c>)
 8002e56:	f7fe f8a5 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e5a:	e0d4      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK){
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b12      	cmp	r3, #18
 8002e60:	d103      	bne.n	8002e6a <show_cursor+0xae>
  		lcd16x2_printf("Break");
 8002e62:	4876      	ldr	r0, [pc, #472]	; (800303c <show_cursor+0x280>)
 8002e64:	f7fe f89e 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e68:	e0cd      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED_MODE1){
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b13      	cmp	r3, #19
 8002e6e:	d103      	bne.n	8002e78 <show_cursor+0xbc>
  		lcd16x2_printf("Mode1");
 8002e70:	486f      	ldr	r0, [pc, #444]	; (8003030 <show_cursor+0x274>)
 8002e72:	f7fe f897 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e76:	e0c6      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED_MODE2){
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b14      	cmp	r3, #20
 8002e7c:	d103      	bne.n	8002e86 <show_cursor+0xca>
  		lcd16x2_printf("Mode2");
 8002e7e:	486d      	ldr	r0, [pc, #436]	; (8003034 <show_cursor+0x278>)
 8002e80:	f7fe f890 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e84:	e0bf      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED_MODE1_CALIBRATION){
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b15      	cmp	r3, #21
 8002e8a:	d108      	bne.n	8002e9e <show_cursor+0xe2>
  		lcd16x2_printf("Calibration");
 8002e8c:	486c      	ldr	r0, [pc, #432]	; (8003040 <show_cursor+0x284>)
 8002e8e:	f7fe f889 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002e92:	f7fe f84d 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Speed");
 8002e96:	4868      	ldr	r0, [pc, #416]	; (8003038 <show_cursor+0x27c>)
 8002e98:	f7fe f884 	bl	8000fa4 <lcd16x2_printf>
  }
 8002e9c:	e0b3      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED_MODE1_CYCLE){
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b16      	cmp	r3, #22
 8002ea2:	d103      	bne.n	8002eac <show_cursor+0xf0>
  		lcd16x2_printf("Cycle speed");
 8002ea4:	4867      	ldr	r0, [pc, #412]	; (8003044 <show_cursor+0x288>)
 8002ea6:	f7fe f87d 	bl	8000fa4 <lcd16x2_printf>
  }
 8002eaa:	e0ac      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK_VERTICAL_ACTUATOR){
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b19      	cmp	r3, #25
 8002eb0:	d108      	bne.n	8002ec4 <show_cursor+0x108>
  		lcd16x2_printf("Vertical");
 8002eb2:	4865      	ldr	r0, [pc, #404]	; (8003048 <show_cursor+0x28c>)
 8002eb4:	f7fe f876 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002eb8:	f7fe f83a 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Actuator");
 8002ebc:	4863      	ldr	r0, [pc, #396]	; (800304c <show_cursor+0x290>)
 8002ebe:	f7fe f871 	bl	8000fa4 <lcd16x2_printf>
  }
 8002ec2:	e0a0      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK_HORIZONTAL_ACTUATOR){
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b1a      	cmp	r3, #26
 8002ec8:	d108      	bne.n	8002edc <show_cursor+0x120>
  		lcd16x2_printf("Horizontal");
 8002eca:	4861      	ldr	r0, [pc, #388]	; (8003050 <show_cursor+0x294>)
 8002ecc:	f7fe f86a 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002ed0:	f7fe f82e 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Actuator");
 8002ed4:	485d      	ldr	r0, [pc, #372]	; (800304c <show_cursor+0x290>)
 8002ed6:	f7fe f865 	bl	8000fa4 <lcd16x2_printf>
  }
 8002eda:	e094      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==LEARN_QUESTION){
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b0d      	cmp	r3, #13
 8002ee0:	d103      	bne.n	8002eea <show_cursor+0x12e>
  		cursor=LEARN_QUESTION;
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <show_cursor+0x298>)
 8002ee4:	220d      	movs	r2, #13
 8002ee6:	701a      	strb	r2, [r3, #0]
  }
 8002ee8:	e08d      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==TIME_TO_WAIT){
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b0f      	cmp	r3, #15
 8002eee:	d103      	bne.n	8002ef8 <show_cursor+0x13c>
  		lcd16x2_printf("Time to Wait");
 8002ef0:	4859      	ldr	r0, [pc, #356]	; (8003058 <show_cursor+0x29c>)
 8002ef2:	f7fe f857 	bl	8000fa4 <lcd16x2_printf>
  }
 8002ef6:	e086      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==WAIT_FOR_SENSOR){
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	2b0e      	cmp	r3, #14
 8002efc:	d108      	bne.n	8002f10 <show_cursor+0x154>
  		lcd16x2_printf("Waiting for");
 8002efe:	4857      	ldr	r0, [pc, #348]	; (800305c <show_cursor+0x2a0>)
 8002f00:	f7fe f850 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002f04:	f7fe f814 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Sensor");
 8002f08:	4855      	ldr	r0, [pc, #340]	; (8003060 <show_cursor+0x2a4>)
 8002f0a:	f7fe f84b 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f0e:	e07a      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED_MODE2_CALIBRATION){
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2b17      	cmp	r3, #23
 8002f14:	d108      	bne.n	8002f28 <show_cursor+0x16c>
  		lcd16x2_printf("Calibration");
 8002f16:	484a      	ldr	r0, [pc, #296]	; (8003040 <show_cursor+0x284>)
 8002f18:	f7fe f844 	bl	8000fa4 <lcd16x2_printf>
  		lcd16x2_2ndLine();
 8002f1c:	f7fe f808 	bl	8000f30 <lcd16x2_2ndLine>
  		lcd16x2_printf("Speed");
 8002f20:	4845      	ldr	r0, [pc, #276]	; (8003038 <show_cursor+0x27c>)
 8002f22:	f7fe f83f 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f26:	e06e      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==SPEED_MODE2_CYCLE){
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b18      	cmp	r3, #24
 8002f2c:	d103      	bne.n	8002f36 <show_cursor+0x17a>
  		lcd16x2_printf("Cycle Speed");
 8002f2e:	484d      	ldr	r0, [pc, #308]	; (8003064 <show_cursor+0x2a8>)
 8002f30:	f7fe f838 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f34:	e067      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK_VERTICAL_ACTUATOR_UP){
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b1b      	cmp	r3, #27
 8002f3a:	d103      	bne.n	8002f44 <show_cursor+0x188>
  		lcd16x2_printf("Up");
 8002f3c:	484a      	ldr	r0, [pc, #296]	; (8003068 <show_cursor+0x2ac>)
 8002f3e:	f7fe f831 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f42:	e060      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK_VERTICAL_ACTUATOR_DOWN){
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	2b1c      	cmp	r3, #28
 8002f48:	d103      	bne.n	8002f52 <show_cursor+0x196>
  		lcd16x2_printf("Down");
 8002f4a:	4848      	ldr	r0, [pc, #288]	; (800306c <show_cursor+0x2b0>)
 8002f4c:	f7fe f82a 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f50:	e059      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK_HORIZONTAL_ACTUATOR_FRONT){
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b1d      	cmp	r3, #29
 8002f56:	d103      	bne.n	8002f60 <show_cursor+0x1a4>
  		lcd16x2_printf("Front");
 8002f58:	4845      	ldr	r0, [pc, #276]	; (8003070 <show_cursor+0x2b4>)
 8002f5a:	f7fe f823 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f5e:	e052      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==BREAK_HORIZONTAL_ACTUATOR_BACK){
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b1e      	cmp	r3, #30
 8002f64:	d103      	bne.n	8002f6e <show_cursor+0x1b2>
  		lcd16x2_printf("Back");
 8002f66:	4843      	ldr	r0, [pc, #268]	; (8003074 <show_cursor+0x2b8>)
 8002f68:	f7fe f81c 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f6c:	e04b      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==LOG_WORKING_TIME){
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2b1f      	cmp	r3, #31
 8002f72:	d103      	bne.n	8002f7c <show_cursor+0x1c0>
  		lcd16x2_printf("Working Time");
 8002f74:	4840      	ldr	r0, [pc, #256]	; (8003078 <show_cursor+0x2bc>)
 8002f76:	f7fe f815 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f7a:	e044      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==LOG_CYCLES){
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d103      	bne.n	8002f8a <show_cursor+0x1ce>
  		lcd16x2_printf("Cycles");
 8002f82:	483e      	ldr	r0, [pc, #248]	; (800307c <show_cursor+0x2c0>)
 8002f84:	f7fe f80e 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f88:	e03d      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==LOG_RESET){
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	2b21      	cmp	r3, #33	; 0x21
 8002f8e:	d103      	bne.n	8002f98 <show_cursor+0x1dc>
  		lcd16x2_printf("Reset");
 8002f90:	483b      	ldr	r0, [pc, #236]	; (8003080 <show_cursor+0x2c4>)
 8002f92:	f7fe f807 	bl	8000fa4 <lcd16x2_printf>
  }
 8002f96:	e036      	b.n	8003006 <show_cursor+0x24a>
  	else if(c==RUN){
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f9c:	d103      	bne.n	8002fa6 <show_cursor+0x1ea>
  		lcd16x2_printf("Run");
 8002f9e:	4839      	ldr	r0, [pc, #228]	; (8003084 <show_cursor+0x2c8>)
 8002fa0:	f7fe f800 	bl	8000fa4 <lcd16x2_printf>
  }
 8002fa4:	e02f      	b.n	8003006 <show_cursor+0x24a>
	else if(c==LOG_RESET_WORKING_TIME){
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b22      	cmp	r3, #34	; 0x22
 8002faa:	d108      	bne.n	8002fbe <show_cursor+0x202>
		lcd16x2_printf("Reset Working");
 8002fac:	4836      	ldr	r0, [pc, #216]	; (8003088 <show_cursor+0x2cc>)
 8002fae:	f7fd fff9 	bl	8000fa4 <lcd16x2_printf>
		lcd16x2_2ndLine();
 8002fb2:	f7fd ffbd 	bl	8000f30 <lcd16x2_2ndLine>
		lcd16x2_printf("Time");
 8002fb6:	4835      	ldr	r0, [pc, #212]	; (800308c <show_cursor+0x2d0>)
 8002fb8:	f7fd fff4 	bl	8000fa4 <lcd16x2_printf>
  }
 8002fbc:	e023      	b.n	8003006 <show_cursor+0x24a>
	else if(c==LOG_RESET_CYCLES){
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	2b23      	cmp	r3, #35	; 0x23
 8002fc2:	d103      	bne.n	8002fcc <show_cursor+0x210>
		lcd16x2_printf("Reset Cycles");
 8002fc4:	4832      	ldr	r0, [pc, #200]	; (8003090 <show_cursor+0x2d4>)
 8002fc6:	f7fd ffed 	bl	8000fa4 <lcd16x2_printf>
  }
 8002fca:	e01c      	b.n	8003006 <show_cursor+0x24a>
	else if(c==MENU_RUN){
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d103      	bne.n	8002fda <show_cursor+0x21e>
		lcd16x2_printf("Run");
 8002fd2:	482c      	ldr	r0, [pc, #176]	; (8003084 <show_cursor+0x2c8>)
 8002fd4:	f7fd ffe6 	bl	8000fa4 <lcd16x2_printf>
  }
 8002fd8:	e015      	b.n	8003006 <show_cursor+0x24a>
	else if(c==MENU_RUN_COIL1){
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b26      	cmp	r3, #38	; 0x26
 8002fde:	d012      	beq.n	8003006 <show_cursor+0x24a>
	else if(c==MENU_RUN_COIL1_RUN){
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b27      	cmp	r3, #39	; 0x27
 8002fe4:	d00f      	beq.n	8003006 <show_cursor+0x24a>
	else if(c==MENU_RUN_COIL0){
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	2b25      	cmp	r3, #37	; 0x25
 8002fea:	d00c      	beq.n	8003006 <show_cursor+0x24a>
	else if(c==MENU_RUN_COIL1_MODE1){
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b28      	cmp	r3, #40	; 0x28
 8002ff0:	d103      	bne.n	8002ffa <show_cursor+0x23e>
			lcd16x2_printf("Mode1");
 8002ff2:	480f      	ldr	r0, [pc, #60]	; (8003030 <show_cursor+0x274>)
 8002ff4:	f7fd ffd6 	bl	8000fa4 <lcd16x2_printf>
  }
 8002ff8:	e005      	b.n	8003006 <show_cursor+0x24a>
	else if(c==MENU_RUN_COIL1_MODE2){
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b29      	cmp	r3, #41	; 0x29
 8002ffe:	d102      	bne.n	8003006 <show_cursor+0x24a>
			lcd16x2_printf("Mode2");
 8003000:	480c      	ldr	r0, [pc, #48]	; (8003034 <show_cursor+0x278>)
 8003002:	f7fd ffcf 	bl	8000fa4 <lcd16x2_printf>
  }
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	08007cf8 	.word	0x08007cf8
 8003014:	08007d04 	.word	0x08007d04
 8003018:	08007d10 	.word	0x08007d10
 800301c:	08007d18 	.word	0x08007d18
 8003020:	08007d20 	.word	0x08007d20
 8003024:	08007d24 	.word	0x08007d24
 8003028:	08007d2c 	.word	0x08007d2c
 800302c:	08007d34 	.word	0x08007d34
 8003030:	08007d3c 	.word	0x08007d3c
 8003034:	08007d44 	.word	0x08007d44
 8003038:	08007d4c 	.word	0x08007d4c
 800303c:	08007d54 	.word	0x08007d54
 8003040:	08007d5c 	.word	0x08007d5c
 8003044:	08007d68 	.word	0x08007d68
 8003048:	08007d74 	.word	0x08007d74
 800304c:	08007d80 	.word	0x08007d80
 8003050:	08007d8c 	.word	0x08007d8c
 8003054:	200001c0 	.word	0x200001c0
 8003058:	08007d98 	.word	0x08007d98
 800305c:	08007da8 	.word	0x08007da8
 8003060:	08007db4 	.word	0x08007db4
 8003064:	08007dbc 	.word	0x08007dbc
 8003068:	08007dc8 	.word	0x08007dc8
 800306c:	08007dcc 	.word	0x08007dcc
 8003070:	08007dd4 	.word	0x08007dd4
 8003074:	08007ddc 	.word	0x08007ddc
 8003078:	08007de4 	.word	0x08007de4
 800307c:	08007df4 	.word	0x08007df4
 8003080:	08007dfc 	.word	0x08007dfc
 8003084:	08007e04 	.word	0x08007e04
 8003088:	08007e08 	.word	0x08007e08
 800308c:	08007e18 	.word	0x08007e18
 8003090:	08007e20 	.word	0x08007e20

08003094 <set_speed>:
//  }




  void set_speed(char c,uint16_t *num){
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  	//	uint8_t sum=0;
  		if(c=='1' || c=='2' || c=='3' || c=='4' || c=='5' || c=='6'
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b31      	cmp	r3, #49	; 0x31
 80030a4:	d01a      	beq.n	80030dc <set_speed+0x48>
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b32      	cmp	r3, #50	; 0x32
 80030aa:	d017      	beq.n	80030dc <set_speed+0x48>
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2b33      	cmp	r3, #51	; 0x33
 80030b0:	d014      	beq.n	80030dc <set_speed+0x48>
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b34      	cmp	r3, #52	; 0x34
 80030b6:	d011      	beq.n	80030dc <set_speed+0x48>
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b35      	cmp	r3, #53	; 0x35
 80030bc:	d00e      	beq.n	80030dc <set_speed+0x48>
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b36      	cmp	r3, #54	; 0x36
 80030c2:	d00b      	beq.n	80030dc <set_speed+0x48>
  				|| c=='7'|| c=='8'||c=='9' || c=='0'){
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b37      	cmp	r3, #55	; 0x37
 80030c8:	d008      	beq.n	80030dc <set_speed+0x48>
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b38      	cmp	r3, #56	; 0x38
 80030ce:	d005      	beq.n	80030dc <set_speed+0x48>
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b39      	cmp	r3, #57	; 0x39
 80030d4:	d002      	beq.n	80030dc <set_speed+0x48>
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b30      	cmp	r3, #48	; 0x30
 80030da:	d11d      	bne.n	8003118 <set_speed+0x84>
  			lcd16x2_printf("%c",c);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4619      	mov	r1, r3
 80030e0:	480f      	ldr	r0, [pc, #60]	; (8003120 <set_speed+0x8c>)
 80030e2:	f7fd ff5f 	bl	8000fa4 <lcd16x2_printf>
  			(*num)=*num*10;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	0092      	lsls	r2, r2, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	801a      	strh	r2, [r3, #0]
  			*num +=(c-48);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4413      	add	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b30      	subs	r3, #48	; 0x30
 8003106:	b29a      	uxth	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	801a      	strh	r2, [r3, #0]
  			col++;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <set_speed+0x90>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <set_speed+0x90>)
 8003116:	701a      	strb	r2, [r3, #0]
  		}
  	}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	08007e30 	.word	0x08007e30
 8003124:	200000e9 	.word	0x200000e9

08003128 <set_time_wait>:
  void set_time_wait(char c,uint32_t *num){
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  	//	uint8_t sum=0;
  		if(c=='1' || c=='2' || c=='3' || c=='4' || c=='5' || c=='6'
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b31      	cmp	r3, #49	; 0x31
 8003138:	d01a      	beq.n	8003170 <set_time_wait+0x48>
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2b32      	cmp	r3, #50	; 0x32
 800313e:	d017      	beq.n	8003170 <set_time_wait+0x48>
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2b33      	cmp	r3, #51	; 0x33
 8003144:	d014      	beq.n	8003170 <set_time_wait+0x48>
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2b34      	cmp	r3, #52	; 0x34
 800314a:	d011      	beq.n	8003170 <set_time_wait+0x48>
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b35      	cmp	r3, #53	; 0x35
 8003150:	d00e      	beq.n	8003170 <set_time_wait+0x48>
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b36      	cmp	r3, #54	; 0x36
 8003156:	d00b      	beq.n	8003170 <set_time_wait+0x48>
  				|| c=='7'|| c=='8'||c=='9' || c=='0'){
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2b37      	cmp	r3, #55	; 0x37
 800315c:	d008      	beq.n	8003170 <set_time_wait+0x48>
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	2b38      	cmp	r3, #56	; 0x38
 8003162:	d005      	beq.n	8003170 <set_time_wait+0x48>
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	2b39      	cmp	r3, #57	; 0x39
 8003168:	d002      	beq.n	8003170 <set_time_wait+0x48>
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	2b30      	cmp	r3, #48	; 0x30
 800316e:	d11b      	bne.n	80031a8 <set_time_wait+0x80>
  			lcd16x2_printf("%c",c);
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	4619      	mov	r1, r3
 8003174:	480e      	ldr	r0, [pc, #56]	; (80031b0 <set_time_wait+0x88>)
 8003176:	f7fd ff15 	bl	8000fa4 <lcd16x2_printf>
  			(*num)=*num*10;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	461a      	mov	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	601a      	str	r2, [r3, #0]
  			*num +=(c-48);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4413      	add	r3, r2
 8003194:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	601a      	str	r2, [r3, #0]
  			col_t++;
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <set_time_wait+0x8c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <set_time_wait+0x8c>)
 80031a6:	701a      	strb	r2, [r3, #0]
  		}
  	}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	08007e30 	.word	0x08007e30
 80031b4:	200000ea 	.word	0x200000ea

080031b8 <set_counter>:





  void set_counter(uint8_t data){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  	chars[0]='0';
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <set_counter+0x8c>)
 80031c4:	2230      	movs	r2, #48	; 0x30
 80031c6:	701a      	strb	r2, [r3, #0]
  	chars[1]='0';
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <set_counter+0x8c>)
 80031ca:	2230      	movs	r2, #48	; 0x30
 80031cc:	705a      	strb	r2, [r3, #1]
  	chars[2]='0';
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <set_counter+0x8c>)
 80031d0:	2230      	movs	r2, #48	; 0x30
 80031d2:	709a      	strb	r2, [r3, #2]
  	uint8_t tempd=data;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	73fb      	strb	r3, [r7, #15]
  	uint8_t i=2;
 80031d8:	2302      	movs	r3, #2
 80031da:	73bb      	strb	r3, [r7, #14]
  	while(i>=0 && tempd>0){
 80031dc:	e018      	b.n	8003210 <set_counter+0x58>
  		chars[i]=(char)((tempd%10)+48);
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <set_counter+0x90>)
 80031e2:	fba3 1302 	umull	r1, r3, r3, r2
 80031e6:	08d9      	lsrs	r1, r3, #3
 80031e8:	460b      	mov	r3, r1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	7bbb      	ldrb	r3, [r7, #14]
 80031f6:	3230      	adds	r2, #48	; 0x30
 80031f8:	b2d1      	uxtb	r1, r2
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <set_counter+0x8c>)
 80031fc:	54d1      	strb	r1, [r2, r3]
  		tempd=tempd/10;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <set_counter+0x90>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	73fb      	strb	r3, [r7, #15]
  		i--;
 800320a:	7bbb      	ldrb	r3, [r7, #14]
 800320c:	3b01      	subs	r3, #1
 800320e:	73bb      	strb	r3, [r7, #14]
  	while(i>=0 && tempd>0){
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e3      	bne.n	80031de <set_counter+0x26>
  	}
  	lcd16x2_printf("%c",chars[0]);
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <set_counter+0x8c>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4619      	mov	r1, r3
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <set_counter+0x94>)
 800321e:	f7fd fec1 	bl	8000fa4 <lcd16x2_printf>
  	lcd16x2_printf("%c",chars[1]);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <set_counter+0x8c>)
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	4619      	mov	r1, r3
 8003228:	4808      	ldr	r0, [pc, #32]	; (800324c <set_counter+0x94>)
 800322a:	f7fd febb 	bl	8000fa4 <lcd16x2_printf>
  	lcd16x2_printf("%c",chars[2]);
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <set_counter+0x8c>)
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <set_counter+0x94>)
 8003236:	f7fd feb5 	bl	8000fa4 <lcd16x2_printf>

  }
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000004 	.word	0x20000004
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	08007e30 	.word	0x08007e30

08003250 <set_counter32>:

  void set_counter32(uint32_t data){
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  	for(uint8_t i=0;i<10;i++){
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
 800325c:	e006      	b.n	800326c <set_counter32+0x1c>
  			chars1[i]='0';
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <set_counter32+0x8c>)
 8003262:	2130      	movs	r1, #48	; 0x30
 8003264:	54d1      	strb	r1, [r2, r3]
  	for(uint8_t i=0;i<10;i++){
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	3301      	adds	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b09      	cmp	r3, #9
 8003270:	d9f5      	bls.n	800325e <set_counter32+0xe>
  		}
  	uint32_t tempd=data;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	613b      	str	r3, [r7, #16]
  	uint8_t i=9;
 8003276:	2309      	movs	r3, #9
 8003278:	73fb      	strb	r3, [r7, #15]
  	while(i>=0 && tempd>0){
 800327a:	e018      	b.n	80032ae <set_counter32+0x5e>
  		chars1[i]=(char)((tempd%10)+48);
 800327c:	6939      	ldr	r1, [r7, #16]
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <set_counter32+0x90>)
 8003280:	fba3 2301 	umull	r2, r3, r3, r1
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	1aca      	subs	r2, r1, r3
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	3230      	adds	r2, #48	; 0x30
 8003296:	b2d1      	uxtb	r1, r2
 8003298:	4a10      	ldr	r2, [pc, #64]	; (80032dc <set_counter32+0x8c>)
 800329a:	54d1      	strb	r1, [r2, r3]
  		tempd=tempd/10;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <set_counter32+0x90>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	613b      	str	r3, [r7, #16]
  		i--;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
  	while(i>=0 && tempd>0){
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e3      	bne.n	800327c <set_counter32+0x2c>
  	}

  	for(uint8_t i=0;i<10;i++){
 80032b4:	2300      	movs	r3, #0
 80032b6:	73bb      	strb	r3, [r7, #14]
 80032b8:	e009      	b.n	80032ce <set_counter32+0x7e>
  		lcd16x2_printf("%c",chars1[i]);
 80032ba:	7bbb      	ldrb	r3, [r7, #14]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <set_counter32+0x8c>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	4619      	mov	r1, r3
 80032c2:	4808      	ldr	r0, [pc, #32]	; (80032e4 <set_counter32+0x94>)
 80032c4:	f7fd fe6e 	bl	8000fa4 <lcd16x2_printf>
  	for(uint8_t i=0;i<10;i++){
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	3301      	adds	r3, #1
 80032cc:	73bb      	strb	r3, [r7, #14]
 80032ce:	7bbb      	ldrb	r3, [r7, #14]
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d9f2      	bls.n	80032ba <set_counter32+0x6a>
  	}

  }
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000008 	.word	0x20000008
 80032e0:	cccccccd 	.word	0xcccccccd
 80032e4:	08007e30 	.word	0x08007e30

080032e8 <send_write_register>:
  		count++;
  	}
  	return sum;
  }

  void send_write_register(uint16_t address, uint16_t data){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	460a      	mov	r2, r1
 80032f2:	80fb      	strh	r3, [r7, #6]
 80032f4:	4613      	mov	r3, r2
 80032f6:	80bb      	strh	r3, [r7, #4]
  	  uint8_t frame[8];
  	  frame[0]=(uint8_t)0x02;
 80032f8:	2302      	movs	r3, #2
 80032fa:	733b      	strb	r3, [r7, #12]
  	  frame[1]=(uint8_t)0x06;
 80032fc:	2306      	movs	r3, #6
 80032fe:	737b      	strb	r3, [r7, #13]
  	  frame[2]=(uint8_t)(address>>8);
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	73bb      	strb	r3, [r7, #14]
  	  frame[3]=(uint8_t)(address&0x00ff);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	73fb      	strb	r3, [r7, #15]
  	  frame[4]=(uint8_t)(data>>8);
 8003310:	88bb      	ldrh	r3, [r7, #4]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	b29b      	uxth	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	743b      	strb	r3, [r7, #16]
  	  frame[5]=(uint8_t)(data&0x00ff);
 800331a:	88bb      	ldrh	r3, [r7, #4]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	747b      	strb	r3, [r7, #17]
  	  uint16_t crc=crc16(frame,6);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	2106      	movs	r1, #6
 8003326:	4618      	mov	r0, r3
 8003328:	f000 ff78 	bl	800421c <crc16>
 800332c:	4603      	mov	r3, r0
 800332e:	82fb      	strh	r3, [r7, #22]
  	  uint8_t lsb=(uint8_t)(crc&0x00ff);
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	757b      	strb	r3, [r7, #21]
  	  uint8_t msb=(uint8_t)(crc>>8);
 8003334:	8afb      	ldrh	r3, [r7, #22]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	b29b      	uxth	r3, r3
 800333a:	753b      	strb	r3, [r7, #20]
  	  frame[6]=lsb;
 800333c:	7d7b      	ldrb	r3, [r7, #21]
 800333e:	74bb      	strb	r3, [r7, #18]
  	  frame[7]=msb;
 8003340:	7d3b      	ldrb	r3, [r7, #20]
 8003342:	74fb      	strb	r3, [r7, #19]

  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003344:	2201      	movs	r2, #1
 8003346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800334a:	4808      	ldr	r0, [pc, #32]	; (800336c <send_write_register+0x84>)
 800334c:	f001 ff1d 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_UART_Transmit(&huart3, frame, 8,10);
 8003350:	f107 010c 	add.w	r1, r7, #12
 8003354:	230a      	movs	r3, #10
 8003356:	2208      	movs	r2, #8
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <send_write_register+0x88>)
 800335a:	f002 fb98 	bl	8005a8e <HAL_UART_Transmit>
  	  HAL_Delay(5);
 800335e:	2005      	movs	r0, #5
 8003360:	f001 fa9c 	bl	800489c <HAL_Delay>
  }
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40010c00 	.word	0x40010c00
 8003370:	2000013c 	.word	0x2000013c

08003374 <send_write_two_register>:

  void send_write_two_register(uint16_t address1,uint16_t address2, uint32_t data){
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	603a      	str	r2, [r7, #0]
 800337e:	80fb      	strh	r3, [r7, #6]
 8003380:	460b      	mov	r3, r1
 8003382:	80bb      	strh	r3, [r7, #4]
  	  uint8_t frame[8];
  	  uint8_t frame1[8];
  	  frame[0]=(uint8_t)0x02;
 8003384:	2302      	movs	r3, #2
 8003386:	753b      	strb	r3, [r7, #20]
  	  frame[1]=(uint8_t)0x06;
 8003388:	2306      	movs	r3, #6
 800338a:	757b      	strb	r3, [r7, #21]
  	  frame[2]=(uint8_t)(address1>>8);
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b29b      	uxth	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	75bb      	strb	r3, [r7, #22]
  	  frame[3]=(uint8_t)(address1&0x00ff);
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	75fb      	strb	r3, [r7, #23]
  	  frame[4]=(uint8_t)(data>>24);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	0e1b      	lsrs	r3, r3, #24
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	763b      	strb	r3, [r7, #24]
  	  frame[5]=(uint8_t)((data>>16)&0x00ff);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	767b      	strb	r3, [r7, #25]
  	  uint16_t crc=crc16(frame,6);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2106      	movs	r1, #6
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 ff32 	bl	800421c <crc16>
 80033b8:	4603      	mov	r3, r0
 80033ba:	83fb      	strh	r3, [r7, #30]
  	  uint8_t lsb=(uint8_t)(crc&0x00ff);
 80033bc:	8bfb      	ldrh	r3, [r7, #30]
 80033be:	777b      	strb	r3, [r7, #29]
  	  uint8_t msb=(uint8_t)(crc>>8);
 80033c0:	8bfb      	ldrh	r3, [r7, #30]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	773b      	strb	r3, [r7, #28]
  	  frame[6]=lsb;
 80033c8:	7f7b      	ldrb	r3, [r7, #29]
 80033ca:	76bb      	strb	r3, [r7, #26]
  	  frame[7]=msb;
 80033cc:	7f3b      	ldrb	r3, [r7, #28]
 80033ce:	76fb      	strb	r3, [r7, #27]
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80033d0:	2201      	movs	r2, #1
 80033d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033d6:	4823      	ldr	r0, [pc, #140]	; (8003464 <send_write_two_register+0xf0>)
 80033d8:	f001 fed7 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_UART_Transmit(&huart3, frame, 8,10);
 80033dc:	f107 0114 	add.w	r1, r7, #20
 80033e0:	230a      	movs	r3, #10
 80033e2:	2208      	movs	r2, #8
 80033e4:	4820      	ldr	r0, [pc, #128]	; (8003468 <send_write_two_register+0xf4>)
 80033e6:	f002 fb52 	bl	8005a8e <HAL_UART_Transmit>

  	  HAL_Delay(10);
 80033ea:	200a      	movs	r0, #10
 80033ec:	f001 fa56 	bl	800489c <HAL_Delay>
  	  frame1[0]=(uint8_t)0x02;
 80033f0:	2302      	movs	r3, #2
 80033f2:	733b      	strb	r3, [r7, #12]
  	  frame1[1]=(uint8_t)0x06;
 80033f4:	2306      	movs	r3, #6
 80033f6:	737b      	strb	r3, [r7, #13]
  	  frame1[2]=(uint8_t)(address2>>8);
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	73bb      	strb	r3, [r7, #14]
  	  frame1[3]=(uint8_t)(address2&0x00ff);
 8003402:	88bb      	ldrh	r3, [r7, #4]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	73fb      	strb	r3, [r7, #15]
  	  frame1[4]=(uint8_t)((data>>8)&0x000000ff);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	b2db      	uxtb	r3, r3
 800340e:	743b      	strb	r3, [r7, #16]
  	  frame1[5]=(uint8_t)(data&0x000000ff);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	747b      	strb	r3, [r7, #17]
  	  crc=crc16(frame1,6);
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	2106      	movs	r1, #6
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fefd 	bl	800421c <crc16>
 8003422:	4603      	mov	r3, r0
 8003424:	83fb      	strh	r3, [r7, #30]
  	  lsb=(uint8_t)(crc&0x00ff);
 8003426:	8bfb      	ldrh	r3, [r7, #30]
 8003428:	777b      	strb	r3, [r7, #29]
  	  msb=(uint8_t)(crc>>8);
 800342a:	8bfb      	ldrh	r3, [r7, #30]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	b29b      	uxth	r3, r3
 8003430:	773b      	strb	r3, [r7, #28]
  	  frame1[6]=lsb;
 8003432:	7f7b      	ldrb	r3, [r7, #29]
 8003434:	74bb      	strb	r3, [r7, #18]
  	  frame1[7]=msb;
 8003436:	7f3b      	ldrb	r3, [r7, #28]
 8003438:	74fb      	strb	r3, [r7, #19]
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003440:	4808      	ldr	r0, [pc, #32]	; (8003464 <send_write_two_register+0xf0>)
 8003442:	f001 fea2 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_UART_Transmit(&huart3, frame1, 8,10);
 8003446:	f107 010c 	add.w	r1, r7, #12
 800344a:	230a      	movs	r3, #10
 800344c:	2208      	movs	r2, #8
 800344e:	4806      	ldr	r0, [pc, #24]	; (8003468 <send_write_two_register+0xf4>)
 8003450:	f002 fb1d 	bl	8005a8e <HAL_UART_Transmit>
  	  HAL_Delay(10);
 8003454:	200a      	movs	r0, #10
 8003456:	f001 fa21 	bl	800489c <HAL_Delay>
  }
 800345a:	bf00      	nop
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40010c00 	.word	0x40010c00
 8003468:	2000013c 	.word	0x2000013c

0800346c <send_write_coil>:




  void send_write_coil(uint16_t address, uint16_t data){
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	460a      	mov	r2, r1
 8003476:	80fb      	strh	r3, [r7, #6]
 8003478:	4613      	mov	r3, r2
 800347a:	80bb      	strh	r3, [r7, #4]
	  uint8_t frame[8];
  	  frame[0]=(uint8_t)0x02;
 800347c:	2302      	movs	r3, #2
 800347e:	733b      	strb	r3, [r7, #12]
  	  frame[1]=(uint8_t)0x05;
 8003480:	2305      	movs	r3, #5
 8003482:	737b      	strb	r3, [r7, #13]
  	  frame[2]=(uint8_t)(address>>8);
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b29b      	uxth	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	73bb      	strb	r3, [r7, #14]
  	  frame[3]=(uint8_t)(address&0x00ff);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	73fb      	strb	r3, [r7, #15]
  	  frame[4]=(uint8_t)(data>>8);
 8003494:	88bb      	ldrh	r3, [r7, #4]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b29b      	uxth	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	743b      	strb	r3, [r7, #16]
  	  frame[5]=(uint8_t)(data&0x00ff);
 800349e:	88bb      	ldrh	r3, [r7, #4]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	747b      	strb	r3, [r7, #17]
  	  uint16_t crc=crc16(frame,6);
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	2106      	movs	r1, #6
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 feb6 	bl	800421c <crc16>
 80034b0:	4603      	mov	r3, r0
 80034b2:	82fb      	strh	r3, [r7, #22]
  	  uint8_t lsb=(uint8_t)(crc&0x00ff);
 80034b4:	8afb      	ldrh	r3, [r7, #22]
 80034b6:	757b      	strb	r3, [r7, #21]
  	  uint8_t msb=(uint8_t)(crc>>8);
 80034b8:	8afb      	ldrh	r3, [r7, #22]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b29b      	uxth	r3, r3
 80034be:	753b      	strb	r3, [r7, #20]
  	  frame[6]=lsb;
 80034c0:	7d7b      	ldrb	r3, [r7, #21]
 80034c2:	74bb      	strb	r3, [r7, #18]
  	  frame[7]=msb;
 80034c4:	7d3b      	ldrb	r3, [r7, #20]
 80034c6:	74fb      	strb	r3, [r7, #19]

  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ce:	4808      	ldr	r0, [pc, #32]	; (80034f0 <send_write_coil+0x84>)
 80034d0:	f001 fe5b 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_UART_Transmit(&huart3, frame, 8,10);
 80034d4:	f107 010c 	add.w	r1, r7, #12
 80034d8:	230a      	movs	r3, #10
 80034da:	2208      	movs	r2, #8
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <send_write_coil+0x88>)
 80034de:	f002 fad6 	bl	8005a8e <HAL_UART_Transmit>
  	  HAL_Delay(10);
 80034e2:	200a      	movs	r0, #10
 80034e4:	f001 f9da 	bl	800489c <HAL_Delay>
  		//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  }
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40010c00 	.word	0x40010c00
 80034f4:	2000013c 	.word	0x2000013c

080034f8 <send_read_one_coil_show>:
  void send_read_one_coil_show(uint16_t address){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
	  uint8_t dback[8];
	  uint8_t frame[8];
	  frame[0]=(uint8_t)0x02;
 8003502:	2302      	movs	r3, #2
 8003504:	733b      	strb	r3, [r7, #12]
	  frame[1]=(uint8_t)0x01;
 8003506:	2301      	movs	r3, #1
 8003508:	737b      	strb	r3, [r7, #13]
	  frame[2]=(uint8_t)(address>>8);
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	b29b      	uxth	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	73bb      	strb	r3, [r7, #14]
	  frame[3]=(uint8_t)(address&0x00ff);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	73fb      	strb	r3, [r7, #15]
	  frame[4]=(uint8_t)(0x0001>>8);
 800351a:	2300      	movs	r3, #0
 800351c:	743b      	strb	r3, [r7, #16]
	  frame[5]=(uint8_t)(0x0001&0x00ff);
 800351e:	2301      	movs	r3, #1
 8003520:	747b      	strb	r3, [r7, #17]
	  uint16_t crc=crc16(frame,6);
 8003522:	f107 030c 	add.w	r3, r7, #12
 8003526:	2106      	movs	r1, #6
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fe77 	bl	800421c <crc16>
 800352e:	4603      	mov	r3, r0
 8003530:	83fb      	strh	r3, [r7, #30]
	  uint8_t lsb=(uint8_t)(crc&0x00ff);
 8003532:	8bfb      	ldrh	r3, [r7, #30]
 8003534:	777b      	strb	r3, [r7, #29]
	  uint8_t msb=(uint8_t)(crc>>8);
 8003536:	8bfb      	ldrh	r3, [r7, #30]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	b29b      	uxth	r3, r3
 800353c:	773b      	strb	r3, [r7, #28]
	  frame[6]=lsb;
 800353e:	7f7b      	ldrb	r3, [r7, #29]
 8003540:	74bb      	strb	r3, [r7, #18]
	  frame[7]=msb;
 8003542:	7f3b      	ldrb	r3, [r7, #28]
 8003544:	74fb      	strb	r3, [r7, #19]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003546:	2201      	movs	r2, #1
 8003548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800354c:	4822      	ldr	r0, [pc, #136]	; (80035d8 <send_read_one_coil_show+0xe0>)
 800354e:	f001 fe1c 	bl	800518a <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart3, frame, 8,10);
 8003552:	f107 010c 	add.w	r1, r7, #12
 8003556:	230a      	movs	r3, #10
 8003558:	2208      	movs	r2, #8
 800355a:	4820      	ldr	r0, [pc, #128]	; (80035dc <send_read_one_coil_show+0xe4>)
 800355c:	f002 fa97 	bl	8005a8e <HAL_UART_Transmit>
	  HAL_Delay(2);
 8003560:	2002      	movs	r0, #2
 8003562:	f001 f99b 	bl	800489c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003566:	2200      	movs	r2, #0
 8003568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800356c:	481a      	ldr	r0, [pc, #104]	; (80035d8 <send_read_one_coil_show+0xe0>)
 800356e:	f001 fe0c 	bl	800518a <HAL_GPIO_WritePin>
	  HAL_UART_Receive(&huart3, dback,8,10);
 8003572:	f107 0114 	add.w	r1, r7, #20
 8003576:	230a      	movs	r3, #10
 8003578:	2208      	movs	r2, #8
 800357a:	4818      	ldr	r0, [pc, #96]	; (80035dc <send_read_one_coil_show+0xe4>)
 800357c:	f002 fb19 	bl	8005bb2 <HAL_UART_Receive>
	  HAL_Delay(10);
 8003580:	200a      	movs	r0, #10
 8003582:	f001 f98b 	bl	800489c <HAL_Delay>
	  crc=crc16(dback, 6);
 8003586:	f107 0314 	add.w	r3, r7, #20
 800358a:	2106      	movs	r1, #6
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fe45 	bl	800421c <crc16>
 8003592:	4603      	mov	r3, r0
 8003594:	83fb      	strh	r3, [r7, #30]
	  lsb=(uint8_t)(crc&0x00ff);
 8003596:	8bfb      	ldrh	r3, [r7, #30]
 8003598:	777b      	strb	r3, [r7, #29]
	  msb=(uint8_t)(crc>>8);
 800359a:	8bfb      	ldrh	r3, [r7, #30]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	b29b      	uxth	r3, r3
 80035a0:	773b      	strb	r3, [r7, #28]
	  if(lsb==frame[6]&& msb==frame[7]){
 80035a2:	7cbb      	ldrb	r3, [r7, #18]
 80035a4:	7f7a      	ldrb	r2, [r7, #29]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10e      	bne.n	80035c8 <send_read_one_coil_show+0xd0>
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	7f3a      	ldrb	r2, [r7, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d10a      	bne.n	80035c8 <send_read_one_coil_show+0xd0>
	   	  show_coil=dback[3];
 80035b2:	7dfa      	ldrb	r2, [r7, #23]
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <send_read_one_coil_show+0xe8>)
 80035b6:	701a      	strb	r2, [r3, #0]
	   	  show_coil=show_coil&(0x01);
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <send_read_one_coil_show+0xe8>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <send_read_one_coil_show+0xe8>)
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e003      	b.n	80035d0 <send_read_one_coil_show+0xd8>
	   	  return;
	  }
	  else{
		  send_read_one_coil_show(address);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff94 	bl	80034f8 <send_read_one_coil_show>
	  }
    }
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40010c00 	.word	0x40010c00
 80035dc:	2000013c 	.word	0x2000013c
 80035e0:	200001cc 	.word	0x200001cc

080035e4 <send_read_one_register>:
  	  }
      }



  void send_read_one_register(uint16_t address){
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
  	  uint8_t frame[7];
  		  data_back[0]=(uint8_t)0x02;
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <send_read_one_register+0xdc>)
 80035f0:	2202      	movs	r2, #2
 80035f2:	701a      	strb	r2, [r3, #0]
  		  data_back[1]=(uint8_t)0x03;
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <send_read_one_register+0xdc>)
 80035f6:	2203      	movs	r2, #3
 80035f8:	705a      	strb	r2, [r3, #1]
  		  data_back[2]=(uint8_t)(address>>8);
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <send_read_one_register+0xdc>)
 8003604:	709a      	strb	r2, [r3, #2]
  		  data_back[3]=(uint8_t)(address&0x00ff);
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <send_read_one_register+0xdc>)
 800360c:	70da      	strb	r2, [r3, #3]
  		  data_back[4]=(uint8_t)(0x0001>>8);
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <send_read_one_register+0xdc>)
 8003610:	2200      	movs	r2, #0
 8003612:	711a      	strb	r2, [r3, #4]
  		  data_back[5]=(uint8_t)(0x0001&0x00ff);
 8003614:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <send_read_one_register+0xdc>)
 8003616:	2201      	movs	r2, #1
 8003618:	715a      	strb	r2, [r3, #5]

  		  uint16_t crc=crc16(data_back,6);
 800361a:	2106      	movs	r1, #6
 800361c:	4828      	ldr	r0, [pc, #160]	; (80036c0 <send_read_one_register+0xdc>)
 800361e:	f000 fdfd 	bl	800421c <crc16>
 8003622:	4603      	mov	r3, r0
 8003624:	82fb      	strh	r3, [r7, #22]
  		  uint8_t lsb=(uint8_t)(crc&0x00ff);
 8003626:	8afb      	ldrh	r3, [r7, #22]
 8003628:	757b      	strb	r3, [r7, #21]
  		  uint8_t msb=(uint8_t)(crc>>8);
 800362a:	8afb      	ldrh	r3, [r7, #22]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	b29b      	uxth	r3, r3
 8003630:	753b      	strb	r3, [r7, #20]
  		  data_back[6]=lsb;
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <send_read_one_register+0xdc>)
 8003634:	7d7b      	ldrb	r3, [r7, #21]
 8003636:	7193      	strb	r3, [r2, #6]
  		  data_back[7]=msb;
 8003638:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <send_read_one_register+0xdc>)
 800363a:	7d3b      	ldrb	r3, [r7, #20]
 800363c:	71d3      	strb	r3, [r2, #7]

  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800363e:	2201      	movs	r2, #1
 8003640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003644:	481f      	ldr	r0, [pc, #124]	; (80036c4 <send_read_one_register+0xe0>)
 8003646:	f001 fda0 	bl	800518a <HAL_GPIO_WritePin>
  		  HAL_UART_Transmit(&huart3, data_back, 8,10);
 800364a:	230a      	movs	r3, #10
 800364c:	2208      	movs	r2, #8
 800364e:	491c      	ldr	r1, [pc, #112]	; (80036c0 <send_read_one_register+0xdc>)
 8003650:	481d      	ldr	r0, [pc, #116]	; (80036c8 <send_read_one_register+0xe4>)
 8003652:	f002 fa1c 	bl	8005a8e <HAL_UART_Transmit>
  		  HAL_Delay(2);
 8003656:	2002      	movs	r0, #2
 8003658:	f001 f920 	bl	800489c <HAL_Delay>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003662:	4818      	ldr	r0, [pc, #96]	; (80036c4 <send_read_one_register+0xe0>)
 8003664:	f001 fd91 	bl	800518a <HAL_GPIO_WritePin>
  		  HAL_UART_Receive(&huart3, frame, 7,5);
 8003668:	f107 010c 	add.w	r1, r7, #12
 800366c:	2305      	movs	r3, #5
 800366e:	2207      	movs	r2, #7
 8003670:	4815      	ldr	r0, [pc, #84]	; (80036c8 <send_read_one_register+0xe4>)
 8003672:	f002 fa9e 	bl	8005bb2 <HAL_UART_Receive>
  		  HAL_Delay(10);
 8003676:	200a      	movs	r0, #10
 8003678:	f001 f910 	bl	800489c <HAL_Delay>
  		  crc=crc16(frame, 5);
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	2105      	movs	r1, #5
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fdca 	bl	800421c <crc16>
 8003688:	4603      	mov	r3, r0
 800368a:	82fb      	strh	r3, [r7, #22]
  	  	  lsb=(uint8_t)(crc&0x00ff);
 800368c:	8afb      	ldrh	r3, [r7, #22]
 800368e:	757b      	strb	r3, [r7, #21]
  	  	  msb=(uint8_t)(crc>>8);
 8003690:	8afb      	ldrh	r3, [r7, #22]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	753b      	strb	r3, [r7, #20]
  	  	  if(lsb==frame[5]&& msb==frame[6]){
 8003698:	7c7b      	ldrb	r3, [r7, #17]
 800369a:	7d7a      	ldrb	r2, [r7, #21]
 800369c:	429a      	cmp	r2, r3
 800369e:	d107      	bne.n	80036b0 <send_read_one_register+0xcc>
 80036a0:	7cbb      	ldrb	r3, [r7, #18]
 80036a2:	7d3a      	ldrb	r2, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d103      	bne.n	80036b0 <send_read_one_register+0xcc>
  	  		  counter=frame[4];
 80036a8:	7c3a      	ldrb	r2, [r7, #16]
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <send_read_one_register+0xe8>)
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e003      	b.n	80036b8 <send_read_one_register+0xd4>
  	  		  return;
  	  	  }else{
  	  		send_read_one_register(address);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff96 	bl	80035e4 <send_read_one_register>
  	  	  }



  }
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200001c4 	.word	0x200001c4
 80036c4:	40010c00 	.word	0x40010c00
 80036c8:	2000013c 	.word	0x2000013c
 80036cc:	200000cc 	.word	0x200000cc

080036d0 <send_read_two_register>:

  void send_read_two_register(uint16_t address,uint32_t *data){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	80fb      	strh	r3, [r7, #6]
  	  uint8_t dback[9];
  	  uint8_t frame[8];
  	  frame[0]=(uint8_t)0x02;
 80036dc:	2302      	movs	r3, #2
 80036de:	723b      	strb	r3, [r7, #8]
  	  frame[1]=(uint8_t)0x03;
 80036e0:	2303      	movs	r3, #3
 80036e2:	727b      	strb	r3, [r7, #9]
  	  frame[2]=(uint8_t)(address>>8);
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	72bb      	strb	r3, [r7, #10]
  	  frame[3]=(uint8_t)(address&0x00ff);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	72fb      	strb	r3, [r7, #11]
  	  frame[4]=(uint8_t)(0x0002>>8);
 80036f4:	2300      	movs	r3, #0
 80036f6:	733b      	strb	r3, [r7, #12]
  	  frame[5]=(uint8_t)(0x0002&0x00ff);
 80036f8:	2302      	movs	r3, #2
 80036fa:	737b      	strb	r3, [r7, #13]
  	  uint16_t crc=crc16(frame,6);
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	2106      	movs	r1, #6
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fd8a 	bl	800421c <crc16>
 8003708:	4603      	mov	r3, r0
 800370a:	83fb      	strh	r3, [r7, #30]
  	  uint8_t lsb=(uint8_t)(crc&0x00ff);
 800370c:	8bfb      	ldrh	r3, [r7, #30]
 800370e:	777b      	strb	r3, [r7, #29]
  	  uint8_t msb=(uint8_t)(crc>>8);
 8003710:	8bfb      	ldrh	r3, [r7, #30]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	b29b      	uxth	r3, r3
 8003716:	773b      	strb	r3, [r7, #28]
  	  frame[6]=lsb;
 8003718:	7f7b      	ldrb	r3, [r7, #29]
 800371a:	73bb      	strb	r3, [r7, #14]
  	  frame[7]=msb;
 800371c:	7f3b      	ldrb	r3, [r7, #28]
 800371e:	73fb      	strb	r3, [r7, #15]

  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003720:	2201      	movs	r2, #1
 8003722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003726:	482c      	ldr	r0, [pc, #176]	; (80037d8 <send_read_two_register+0x108>)
 8003728:	f001 fd2f 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_UART_Transmit(&huart3, frame, 8,10);
 800372c:	f107 0108 	add.w	r1, r7, #8
 8003730:	230a      	movs	r3, #10
 8003732:	2208      	movs	r2, #8
 8003734:	4829      	ldr	r0, [pc, #164]	; (80037dc <send_read_two_register+0x10c>)
 8003736:	f002 f9aa 	bl	8005a8e <HAL_UART_Transmit>
  	  HAL_Delay(2);
 800373a:	2002      	movs	r0, #2
 800373c:	f001 f8ae 	bl	800489c <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003746:	4824      	ldr	r0, [pc, #144]	; (80037d8 <send_read_two_register+0x108>)
 8003748:	f001 fd1f 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_UART_Receive(&huart3, dback, 9,10);
 800374c:	f107 0110 	add.w	r1, r7, #16
 8003750:	230a      	movs	r3, #10
 8003752:	2209      	movs	r2, #9
 8003754:	4821      	ldr	r0, [pc, #132]	; (80037dc <send_read_two_register+0x10c>)
 8003756:	f002 fa2c 	bl	8005bb2 <HAL_UART_Receive>
  	  HAL_Delay(10);
 800375a:	200a      	movs	r0, #10
 800375c:	f001 f89e 	bl	800489c <HAL_Delay>
  	  crc=crc16(dback, 7);
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	2107      	movs	r1, #7
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fd58 	bl	800421c <crc16>
 800376c:	4603      	mov	r3, r0
 800376e:	83fb      	strh	r3, [r7, #30]
  	  lsb=(uint8_t)(crc&0x00ff);
 8003770:	8bfb      	ldrh	r3, [r7, #30]
 8003772:	777b      	strb	r3, [r7, #29]
  	  msb=(uint8_t)(crc>>8);
 8003774:	8bfb      	ldrh	r3, [r7, #30]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	773b      	strb	r3, [r7, #28]
  	  if(lsb==dback[7]&& msb==dback[8]){
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	7f7a      	ldrb	r2, [r7, #29]
 8003780:	429a      	cmp	r2, r3
 8003782:	d120      	bne.n	80037c6 <send_read_two_register+0xf6>
 8003784:	7e3b      	ldrb	r3, [r7, #24]
 8003786:	7f3a      	ldrb	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	d11c      	bne.n	80037c6 <send_read_two_register+0xf6>
  		  *data=(dback[5]<<24);
 800378c:	7d7b      	ldrb	r3, [r7, #21]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	461a      	mov	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	601a      	str	r2, [r3, #0]
  		  *data=((*data)|((dback[6]<<16)&0x00ff0000));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	7dbb      	ldrb	r3, [r7, #22]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037a2:	431a      	orrs	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	601a      	str	r2, [r3, #0]
  		  *data=((*data)|((dback[3]<<8)&0x0000ff00));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	431a      	orrs	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	601a      	str	r2, [r3, #0]
  		  *data=((*data)|((dback[4])&0x000000ff));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	7d3a      	ldrb	r2, [r7, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e004      	b.n	80037d0 <send_read_two_register+0x100>
  		  return;
  	  }
  	  else{
  		send_read_two_register(address,data);
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	6839      	ldr	r1, [r7, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff80 	bl	80036d0 <send_read_two_register>
  	  }

  }
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40010c00 	.word	0x40010c00
 80037dc:	2000013c 	.word	0x2000013c

080037e0 <set_char>:




  void set_char(char c){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  	   if(c=='1'){
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	2b31      	cmp	r3, #49	; 0x31
 80037ee:	d11a      	bne.n	8003826 <set_char+0x46>
  		   if(counterP<=4){
 80037f0:	4b95      	ldr	r3, [pc, #596]	; (8003a48 <set_char+0x268>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d80f      	bhi.n	8003818 <set_char+0x38>
  			 pass[counterP]=1;
 80037f8:	4b93      	ldr	r3, [pc, #588]	; (8003a48 <set_char+0x268>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b93      	ldr	r3, [pc, #588]	; (8003a4c <set_char+0x26c>)
 8003800:	2101      	movs	r1, #1
 8003802:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <set_char+0x268>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b8e      	ldr	r3, [pc, #568]	; (8003a48 <set_char+0x268>)
 800380e:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("1");
 8003810:	488f      	ldr	r0, [pc, #572]	; (8003a50 <set_char+0x270>)
 8003812:	f7fd fbc7 	bl	8000fa4 <lcd16x2_printf>
  				   counterP=0;
  				   st=ERR;
  			   }
  	//		      return;
  		   }
     }
 8003816:	e113      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 8003818:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <set_char+0x268>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 800381e:	4b8d      	ldr	r3, [pc, #564]	; (8003a54 <set_char+0x274>)
 8003820:	2202      	movs	r2, #2
 8003822:	701a      	strb	r2, [r3, #0]
     }
 8003824:	e10c      	b.n	8003a40 <set_char+0x260>
  	   else if(c=='2'){
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b32      	cmp	r3, #50	; 0x32
 800382a:	d11a      	bne.n	8003862 <set_char+0x82>
  		   if(counterP<=4){
 800382c:	4b86      	ldr	r3, [pc, #536]	; (8003a48 <set_char+0x268>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d80f      	bhi.n	8003854 <set_char+0x74>
  			 pass[counterP]=2;
 8003834:	4b84      	ldr	r3, [pc, #528]	; (8003a48 <set_char+0x268>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b84      	ldr	r3, [pc, #528]	; (8003a4c <set_char+0x26c>)
 800383c:	2102      	movs	r1, #2
 800383e:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 8003840:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <set_char+0x268>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <set_char+0x268>)
 800384a:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("2");
 800384c:	4882      	ldr	r0, [pc, #520]	; (8003a58 <set_char+0x278>)
 800384e:	f7fd fba9 	bl	8000fa4 <lcd16x2_printf>
     }
 8003852:	e0f5      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 8003854:	4b7c      	ldr	r3, [pc, #496]	; (8003a48 <set_char+0x268>)
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 800385a:	4b7e      	ldr	r3, [pc, #504]	; (8003a54 <set_char+0x274>)
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
     }
 8003860:	e0ee      	b.n	8003a40 <set_char+0x260>
  	   else  if(c=='3'){
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	2b33      	cmp	r3, #51	; 0x33
 8003866:	d11a      	bne.n	800389e <set_char+0xbe>
  		   if(counterP<=4){
 8003868:	4b77      	ldr	r3, [pc, #476]	; (8003a48 <set_char+0x268>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d80f      	bhi.n	8003890 <set_char+0xb0>
  			 pass[counterP]=3;
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <set_char+0x268>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b75      	ldr	r3, [pc, #468]	; (8003a4c <set_char+0x26c>)
 8003878:	2103      	movs	r1, #3
 800387a:	5499      	strb	r1, [r3, r2]
  		   lcd16x2_printf("3");
 800387c:	4877      	ldr	r0, [pc, #476]	; (8003a5c <set_char+0x27c>)
 800387e:	f7fd fb91 	bl	8000fa4 <lcd16x2_printf>
  		   counterP++;
 8003882:	4b71      	ldr	r3, [pc, #452]	; (8003a48 <set_char+0x268>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <set_char+0x268>)
 800388c:	701a      	strb	r2, [r3, #0]
     }
 800388e:	e0d7      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 8003890:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <set_char+0x268>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 8003896:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <set_char+0x274>)
 8003898:	2202      	movs	r2, #2
 800389a:	701a      	strb	r2, [r3, #0]
     }
 800389c:	e0d0      	b.n	8003a40 <set_char+0x260>
  	   else if(c=='4'){
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	2b34      	cmp	r3, #52	; 0x34
 80038a2:	d11a      	bne.n	80038da <set_char+0xfa>
  		   if(counterP<=4){
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <set_char+0x268>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d80f      	bhi.n	80038cc <set_char+0xec>
  			 pass[counterP]=4;
 80038ac:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <set_char+0x268>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <set_char+0x26c>)
 80038b4:	2104      	movs	r1, #4
 80038b6:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 80038b8:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <set_char+0x268>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <set_char+0x268>)
 80038c2:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("4");
 80038c4:	4866      	ldr	r0, [pc, #408]	; (8003a60 <set_char+0x280>)
 80038c6:	f7fd fb6d 	bl	8000fa4 <lcd16x2_printf>
     }
 80038ca:	e0b9      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 80038cc:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <set_char+0x268>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 80038d2:	4b60      	ldr	r3, [pc, #384]	; (8003a54 <set_char+0x274>)
 80038d4:	2202      	movs	r2, #2
 80038d6:	701a      	strb	r2, [r3, #0]
     }
 80038d8:	e0b2      	b.n	8003a40 <set_char+0x260>
  	   else   if(c=='5'){
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b35      	cmp	r3, #53	; 0x35
 80038de:	d11a      	bne.n	8003916 <set_char+0x136>
  		   if(counterP<=4){
 80038e0:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <set_char+0x268>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d80f      	bhi.n	8003908 <set_char+0x128>
  			 pass[counterP]=5;
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <set_char+0x268>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <set_char+0x26c>)
 80038f0:	2105      	movs	r1, #5
 80038f2:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 80038f4:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <set_char+0x268>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <set_char+0x268>)
 80038fe:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("5");
 8003900:	4858      	ldr	r0, [pc, #352]	; (8003a64 <set_char+0x284>)
 8003902:	f7fd fb4f 	bl	8000fa4 <lcd16x2_printf>
     }
 8003906:	e09b      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 8003908:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <set_char+0x268>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 800390e:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <set_char+0x274>)
 8003910:	2202      	movs	r2, #2
 8003912:	701a      	strb	r2, [r3, #0]
     }
 8003914:	e094      	b.n	8003a40 <set_char+0x260>
  	   else  if(c=='6'){
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b36      	cmp	r3, #54	; 0x36
 800391a:	d11a      	bne.n	8003952 <set_char+0x172>
  		   if(counterP<=4){
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <set_char+0x268>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d80f      	bhi.n	8003944 <set_char+0x164>
  			 pass[counterP]=6;
 8003924:	4b48      	ldr	r3, [pc, #288]	; (8003a48 <set_char+0x268>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	4b48      	ldr	r3, [pc, #288]	; (8003a4c <set_char+0x26c>)
 800392c:	2106      	movs	r1, #6
 800392e:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 8003930:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <set_char+0x268>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <set_char+0x268>)
 800393a:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("6");
 800393c:	484a      	ldr	r0, [pc, #296]	; (8003a68 <set_char+0x288>)
 800393e:	f7fd fb31 	bl	8000fa4 <lcd16x2_printf>
     }
 8003942:	e07d      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <set_char+0x268>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 800394a:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <set_char+0x274>)
 800394c:	2202      	movs	r2, #2
 800394e:	701a      	strb	r2, [r3, #0]
     }
 8003950:	e076      	b.n	8003a40 <set_char+0x260>
  	   else  if(c=='7'){
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b37      	cmp	r3, #55	; 0x37
 8003956:	d11a      	bne.n	800398e <set_char+0x1ae>
  		   if(counterP<=4){
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <set_char+0x268>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d80f      	bhi.n	8003980 <set_char+0x1a0>
  			 pass[counterP]=7;
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <set_char+0x268>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <set_char+0x26c>)
 8003968:	2107      	movs	r1, #7
 800396a:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <set_char+0x268>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <set_char+0x268>)
 8003976:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("7");
 8003978:	483c      	ldr	r0, [pc, #240]	; (8003a6c <set_char+0x28c>)
 800397a:	f7fd fb13 	bl	8000fa4 <lcd16x2_printf>
     }
 800397e:	e05f      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 8003980:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <set_char+0x268>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <set_char+0x274>)
 8003988:	2202      	movs	r2, #2
 800398a:	701a      	strb	r2, [r3, #0]
     }
 800398c:	e058      	b.n	8003a40 <set_char+0x260>
  	   else  if(c=='8'){
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	2b38      	cmp	r3, #56	; 0x38
 8003992:	d11a      	bne.n	80039ca <set_char+0x1ea>
  		   if(counterP<=4){
 8003994:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <set_char+0x268>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d80f      	bhi.n	80039bc <set_char+0x1dc>
  			 pass[counterP]=8;
 800399c:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <set_char+0x268>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <set_char+0x26c>)
 80039a4:	2108      	movs	r1, #8
 80039a6:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <set_char+0x268>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <set_char+0x268>)
 80039b2:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("8");
 80039b4:	482e      	ldr	r0, [pc, #184]	; (8003a70 <set_char+0x290>)
 80039b6:	f7fd faf5 	bl	8000fa4 <lcd16x2_printf>
     }
 80039ba:	e041      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <set_char+0x268>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <set_char+0x274>)
 80039c4:	2202      	movs	r2, #2
 80039c6:	701a      	strb	r2, [r3, #0]
     }
 80039c8:	e03a      	b.n	8003a40 <set_char+0x260>
  	   else  if(c=='9'){
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	2b39      	cmp	r3, #57	; 0x39
 80039ce:	d11a      	bne.n	8003a06 <set_char+0x226>
  		   if(counterP<=4){
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <set_char+0x268>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d80f      	bhi.n	80039f8 <set_char+0x218>
  			 pass[counterP]=9;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <set_char+0x268>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <set_char+0x26c>)
 80039e0:	2109      	movs	r1, #9
 80039e2:	5499      	strb	r1, [r3, r2]
  			 counterP++;
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <set_char+0x268>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <set_char+0x268>)
 80039ee:	701a      	strb	r2, [r3, #0]
  		   lcd16x2_printf("9");
 80039f0:	4820      	ldr	r0, [pc, #128]	; (8003a74 <set_char+0x294>)
 80039f2:	f7fd fad7 	bl	8000fa4 <lcd16x2_printf>
     }
 80039f6:	e023      	b.n	8003a40 <set_char+0x260>
  			   counterP=0;
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <set_char+0x268>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <set_char+0x274>)
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]
     }
 8003a04:	e01c      	b.n	8003a40 <set_char+0x260>
  	   else  if(c=='0'){
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d119      	bne.n	8003a40 <set_char+0x260>
  			   if(counterP<=4){
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <set_char+0x268>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d80f      	bhi.n	8003a34 <set_char+0x254>
  				 pass[counterP]=0;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <set_char+0x268>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <set_char+0x26c>)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]
  				 counterP++;
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <set_char+0x268>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <set_char+0x268>)
 8003a2a:	701a      	strb	r2, [r3, #0]
  			   lcd16x2_printf("0");
 8003a2c:	4812      	ldr	r0, [pc, #72]	; (8003a78 <set_char+0x298>)
 8003a2e:	f7fd fab9 	bl	8000fa4 <lcd16x2_printf>
     }
 8003a32:	e005      	b.n	8003a40 <set_char+0x260>
  				   counterP=0;
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <set_char+0x268>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
  				   st=ERR;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <set_char+0x274>)
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	701a      	strb	r2, [r3, #0]
     }
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200000d4 	.word	0x200000d4
 8003a4c:	200000d8 	.word	0x200000d8
 8003a50:	08007e34 	.word	0x08007e34
 8003a54:	200001cd 	.word	0x200001cd
 8003a58:	08007e38 	.word	0x08007e38
 8003a5c:	08007e3c 	.word	0x08007e3c
 8003a60:	08007e40 	.word	0x08007e40
 8003a64:	08007e44 	.word	0x08007e44
 8003a68:	08007e48 	.word	0x08007e48
 8003a6c:	08007e4c 	.word	0x08007e4c
 8003a70:	08007e50 	.word	0x08007e50
 8003a74:	08007e54 	.word	0x08007e54
 8003a78:	08007e58 	.word	0x08007e58

08003a7c <set_char_for_sensor>:





  void set_char_for_sensor(char c){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
	  if(c=='1'){
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	2b31      	cmp	r3, #49	; 0x31
 8003a8a:	d11a      	bne.n	8003ac2 <set_char_for_sensor+0x46>
		  if( sensor_counter<5){
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	f200 8090 	bhi.w	8003bb6 <set_char_for_sensor+0x13a>
			  sensor_temp[sensor_counter]=1;
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <set_char_for_sensor+0x148>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	5499      	strb	r1, [r3, r2]
			  sensor_num_cursor++;
 8003aa2:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003aac:	701a      	strb	r2, [r3, #0]
			  sensor_counter++;
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003ab8:	701a      	strb	r2, [r3, #0]
			  lcd16x2_printf("1");
 8003aba:	4844      	ldr	r0, [pc, #272]	; (8003bcc <set_char_for_sensor+0x150>)
 8003abc:	f7fd fa72 	bl	8000fa4 <lcd16x2_printf>
		  }

	  }


  }
 8003ac0:	e079      	b.n	8003bb6 <set_char_for_sensor+0x13a>
	  else if(c=='2'){
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	2b32      	cmp	r3, #50	; 0x32
 8003ac6:	d119      	bne.n	8003afc <set_char_for_sensor+0x80>
		  if( sensor_counter<5){
 8003ac8:	4b3d      	ldr	r3, [pc, #244]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d872      	bhi.n	8003bb6 <set_char_for_sensor+0x13a>
			  sensor_temp[sensor_counter]=2;
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <set_char_for_sensor+0x148>)
 8003ad8:	2102      	movs	r1, #2
 8003ada:	5499      	strb	r1, [r3, r2]
			  sensor_num_cursor++;
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003ae6:	701a      	strb	r2, [r3, #0]
			  sensor_counter++;
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	4b33      	ldr	r3, [pc, #204]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003af2:	701a      	strb	r2, [r3, #0]
			  lcd16x2_printf("2");
 8003af4:	4836      	ldr	r0, [pc, #216]	; (8003bd0 <set_char_for_sensor+0x154>)
 8003af6:	f7fd fa55 	bl	8000fa4 <lcd16x2_printf>
  }
 8003afa:	e05c      	b.n	8003bb6 <set_char_for_sensor+0x13a>
	  else  if(c=='3'){
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2b33      	cmp	r3, #51	; 0x33
 8003b00:	d119      	bne.n	8003b36 <set_char_for_sensor+0xba>
		  if( sensor_counter<5){
 8003b02:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d855      	bhi.n	8003bb6 <set_char_for_sensor+0x13a>
		 			  sensor_temp[sensor_counter]=3;
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <set_char_for_sensor+0x148>)
 8003b12:	2103      	movs	r1, #3
 8003b14:	5499      	strb	r1, [r3, r2]
		 			  sensor_num_cursor++;
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003b20:	701a      	strb	r2, [r3, #0]
		 			 sensor_counter++;
 8003b22:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b2c:	701a      	strb	r2, [r3, #0]
		 			  lcd16x2_printf("3");
 8003b2e:	4829      	ldr	r0, [pc, #164]	; (8003bd4 <set_char_for_sensor+0x158>)
 8003b30:	f7fd fa38 	bl	8000fa4 <lcd16x2_printf>
  }
 8003b34:	e03f      	b.n	8003bb6 <set_char_for_sensor+0x13a>
	  else if(c=='4'){
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b34      	cmp	r3, #52	; 0x34
 8003b3a:	d120      	bne.n	8003b7e <set_char_for_sensor+0x102>
		  if( sensor_counter<5){
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d815      	bhi.n	8003b70 <set_char_for_sensor+0xf4>
			  sensor_temp[sensor_counter]=4;
 8003b44:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <set_char_for_sensor+0x148>)
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	5499      	strb	r1, [r3, r2]
			  sensor_num_cursor++;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003b5a:	701a      	strb	r2, [r3, #0]
			  sensor_counter++;
 8003b5c:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b66:	701a      	strb	r2, [r3, #0]
			  lcd16x2_printf("4");
 8003b68:	481b      	ldr	r0, [pc, #108]	; (8003bd8 <set_char_for_sensor+0x15c>)
 8003b6a:	f7fd fa1b 	bl	8000fa4 <lcd16x2_printf>
  }
 8003b6e:	e022      	b.n	8003bb6 <set_char_for_sensor+0x13a>
			  sensor_num_cursor=0;
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
			  st=ERR;
 8003b76:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <set_char_for_sensor+0x160>)
 8003b78:	2202      	movs	r2, #2
 8003b7a:	701a      	strb	r2, [r3, #0]
  }
 8003b7c:	e01b      	b.n	8003bb6 <set_char_for_sensor+0x13a>
	  else   if(c=='5'){
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b35      	cmp	r3, #53	; 0x35
 8003b82:	d118      	bne.n	8003bb6 <set_char_for_sensor+0x13a>
		  if( sensor_counter<5){
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d814      	bhi.n	8003bb6 <set_char_for_sensor+0x13a>
			  sensor_temp[sensor_counter]=5;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <set_char_for_sensor+0x148>)
 8003b94:	2105      	movs	r1, #5
 8003b96:	5499      	strb	r1, [r3, r2]
			  sensor_num_cursor++;
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <set_char_for_sensor+0x14c>)
 8003ba2:	701a      	strb	r2, [r3, #0]
			  sensor_counter++;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <set_char_for_sensor+0x144>)
 8003bae:	701a      	strb	r2, [r3, #0]
			  lcd16x2_printf("5");
 8003bb0:	480b      	ldr	r0, [pc, #44]	; (8003be0 <set_char_for_sensor+0x164>)
 8003bb2:	f7fd f9f7 	bl	8000fa4 <lcd16x2_printf>
  }
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200000e1 	.word	0x200000e1
 8003bc4:	200000dc 	.word	0x200000dc
 8003bc8:	20000018 	.word	0x20000018
 8003bcc:	08007e34 	.word	0x08007e34
 8003bd0:	08007e38 	.word	0x08007e38
 8003bd4:	08007e3c 	.word	0x08007e3c
 8003bd8:	08007e40 	.word	0x08007e40
 8003bdc:	200001cd 	.word	0x200001cd
 8003be0:	08007e44 	.word	0x08007e44

08003be4 <set_char_for_sensor_andor>:


  void set_char_for_sensor_andor(char c){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  	   if(c=='u'){
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	2b75      	cmp	r3, #117	; 0x75
 8003bf2:	d120      	bne.n	8003c36 <set_char_for_sensor_andor+0x52>
  		   if(sensor_counter_andor<=4){
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d815      	bhi.n	8003c28 <set_char_for_sensor_andor+0x44>
  			 sensor_temp_andor[sensor_counter_andor]=1;
 8003bfc:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <set_char_for_sensor_andor+0xa4>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]
  			 sensor_counter_andor++;
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003c12:	701a      	strb	r2, [r3, #0]
  			 sensor_num_cursor++;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <set_char_for_sensor_andor+0xa8>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <set_char_for_sensor_andor+0xa8>)
 8003c1e:	701a      	strb	r2, [r3, #0]
  			 lcd16x2_printf("a");
 8003c20:	481b      	ldr	r0, [pc, #108]	; (8003c90 <set_char_for_sensor_andor+0xac>)
 8003c22:	f7fd f9bf 	bl	8000fa4 <lcd16x2_printf>
  		 }
  		 //     return;
  	   }


     }
 8003c26:	e029      	b.n	8003c7c <set_char_for_sensor_andor+0x98>
  			   counterP=0;
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <set_char_for_sensor_andor+0xb0>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
  			   st=ERR;
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <set_char_for_sensor_andor+0xb4>)
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]
     }
 8003c34:	e022      	b.n	8003c7c <set_char_for_sensor_andor+0x98>
  	   else if(c=='d'){
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d11f      	bne.n	8003c7c <set_char_for_sensor_andor+0x98>
  		 if(sensor_counter_andor<=4){
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d815      	bhi.n	8003c70 <set_char_for_sensor_andor+0x8c>
  			 sensor_temp_andor[sensor_counter_andor]=2;
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <set_char_for_sensor_andor+0xa4>)
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	5499      	strb	r1, [r3, r2]
  			 sensor_counter_andor++;
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <set_char_for_sensor_andor+0xa0>)
 8003c5a:	701a      	strb	r2, [r3, #0]
  			 sensor_num_cursor++;
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <set_char_for_sensor_andor+0xa8>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <set_char_for_sensor_andor+0xa8>)
 8003c66:	701a      	strb	r2, [r3, #0]
  			 lcd16x2_printf("o");
 8003c68:	480c      	ldr	r0, [pc, #48]	; (8003c9c <set_char_for_sensor_andor+0xb8>)
 8003c6a:	f7fd f99b 	bl	8000fa4 <lcd16x2_printf>
     }
 8003c6e:	e005      	b.n	8003c7c <set_char_for_sensor_andor+0x98>
  			 counterP=0;
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <set_char_for_sensor_andor+0xb0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
  			 st=ERR;
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <set_char_for_sensor_andor+0xb4>)
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]
     }
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	200000e8 	.word	0x200000e8
 8003c88:	200000e4 	.word	0x200000e4
 8003c8c:	20000018 	.word	0x20000018
 8003c90:	08007e5c 	.word	0x08007e5c
 8003c94:	200000d4 	.word	0x200000d4
 8003c98:	200001cd 	.word	0x200001cd
 8003c9c:	08007e60 	.word	0x08007e60

08003ca0 <get_key>:





  char get_key(){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // row 1 reset
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	48af      	ldr	r0, [pc, #700]	; (8003f68 <get_key+0x2c8>)
 8003caa:	f001 fa6e 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	48ad      	ldr	r0, [pc, #692]	; (8003f68 <get_key+0x2c8>)
 8003cb4:	f001 fa69 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2140      	movs	r1, #64	; 0x40
 8003cbc:	48aa      	ldr	r0, [pc, #680]	; (8003f68 <get_key+0x2c8>)
 8003cbe:	f001 fa64 	bl	800518a <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	48a8      	ldr	r0, [pc, #672]	; (8003f68 <get_key+0x2c8>)
 8003cc8:	f001 fa5f 	bl	800518a <HAL_GPIO_WritePin>



  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //f1
 8003ccc:	2108      	movs	r1, #8
 8003cce:	48a7      	ldr	r0, [pc, #668]	; (8003f6c <get_key+0x2cc>)
 8003cd0:	f001 fa44 	bl	800515c <HAL_GPIO_ReadPin>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d109      	bne.n	8003cee <get_key+0x4e>
  		  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8003cda:	bf00      	nop
 8003cdc:	2108      	movs	r1, #8
 8003cde:	48a3      	ldr	r0, [pc, #652]	; (8003f6c <get_key+0x2cc>)
 8003ce0:	f001 fa3c 	bl	800515c <HAL_GPIO_ReadPin>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d0f8      	beq.n	8003cdc <get_key+0x3c>
  		  return 'f';
 8003cea:	2366      	movs	r3, #102	; 0x66
 8003cec:	e13a      	b.n	8003f64 <get_key+0x2c4>

  	  }
  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 3
 8003cee:	2110      	movs	r1, #16
 8003cf0:	489e      	ldr	r0, [pc, #632]	; (8003f6c <get_key+0x2cc>)
 8003cf2:	f001 fa33 	bl	800515c <HAL_GPIO_ReadPin>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d109      	bne.n	8003d10 <get_key+0x70>
  		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 8003cfc:	bf00      	nop
 8003cfe:	2110      	movs	r1, #16
 8003d00:	489a      	ldr	r0, [pc, #616]	; (8003f6c <get_key+0x2cc>)
 8003d02:	f001 fa2b 	bl	800515c <HAL_GPIO_ReadPin>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d0f8      	beq.n	8003cfe <get_key+0x5e>
  		  return '3';
 8003d0c:	2333      	movs	r3, #51	; 0x33
 8003d0e:	e129      	b.n	8003f64 <get_key+0x2c4>

  	   }


  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 2
 8003d10:	2120      	movs	r1, #32
 8003d12:	4896      	ldr	r0, [pc, #600]	; (8003f6c <get_key+0x2cc>)
 8003d14:	f001 fa22 	bl	800515c <HAL_GPIO_ReadPin>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d109      	bne.n	8003d32 <get_key+0x92>
  		   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8003d1e:	bf00      	nop
 8003d20:	2120      	movs	r1, #32
 8003d22:	4892      	ldr	r0, [pc, #584]	; (8003f6c <get_key+0x2cc>)
 8003d24:	f001 fa1a 	bl	800515c <HAL_GPIO_ReadPin>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d0f8      	beq.n	8003d20 <get_key+0x80>
  		   return '2';
 8003d2e:	2332      	movs	r3, #50	; 0x32
 8003d30:	e118      	b.n	8003f64 <get_key+0x2c4>
  	    }

  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 1
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	488d      	ldr	r0, [pc, #564]	; (8003f6c <get_key+0x2cc>)
 8003d36:	f001 fa11 	bl	800515c <HAL_GPIO_ReadPin>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d109      	bne.n	8003d54 <get_key+0xb4>
  	   	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8003d40:	bf00      	nop
 8003d42:	2140      	movs	r1, #64	; 0x40
 8003d44:	4889      	ldr	r0, [pc, #548]	; (8003f6c <get_key+0x2cc>)
 8003d46:	f001 fa09 	bl	800515c <HAL_GPIO_ReadPin>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d0f8      	beq.n	8003d42 <get_key+0xa2>
  	   	   return '1';
 8003d50:	2331      	movs	r3, #49	; 0x31
 8003d52:	e107      	b.n	8003f64 <get_key+0x2c4>
  	   }


  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // row 2 reset
 8003d54:	2200      	movs	r2, #0
 8003d56:	2110      	movs	r1, #16
 8003d58:	4883      	ldr	r0, [pc, #524]	; (8003f68 <get_key+0x2c8>)
 8003d5a:	f001 fa16 	bl	800518a <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003d5e:	2201      	movs	r2, #1
 8003d60:	2120      	movs	r1, #32
 8003d62:	4881      	ldr	r0, [pc, #516]	; (8003f68 <get_key+0x2c8>)
 8003d64:	f001 fa11 	bl	800518a <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2140      	movs	r1, #64	; 0x40
 8003d6c:	487e      	ldr	r0, [pc, #504]	; (8003f68 <get_key+0x2c8>)
 8003d6e:	f001 fa0c 	bl	800518a <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	487c      	ldr	r0, [pc, #496]	; (8003f68 <get_key+0x2c8>)
 8003d78:	f001 fa07 	bl	800518a <HAL_GPIO_WritePin>

  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //up
 8003d7c:	2108      	movs	r1, #8
 8003d7e:	487b      	ldr	r0, [pc, #492]	; (8003f6c <get_key+0x2cc>)
 8003d80:	f001 f9ec 	bl	800515c <HAL_GPIO_ReadPin>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d109      	bne.n	8003d9e <get_key+0xfe>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8003d8a:	bf00      	nop
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	4877      	ldr	r0, [pc, #476]	; (8003f6c <get_key+0x2cc>)
 8003d90:	f001 f9e4 	bl	800515c <HAL_GPIO_ReadPin>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d0f8      	beq.n	8003d8c <get_key+0xec>
  	    	return 'u';
 8003d9a:	2375      	movs	r3, #117	; 0x75
 8003d9c:	e0e2      	b.n	8003f64 <get_key+0x2c4>
  	     }

  	     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 6
 8003d9e:	2110      	movs	r1, #16
 8003da0:	4872      	ldr	r0, [pc, #456]	; (8003f6c <get_key+0x2cc>)
 8003da2:	f001 f9db 	bl	800515c <HAL_GPIO_ReadPin>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d109      	bne.n	8003dc0 <get_key+0x120>
  	    	 while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET );
 8003dac:	bf00      	nop
 8003dae:	2110      	movs	r1, #16
 8003db0:	486e      	ldr	r0, [pc, #440]	; (8003f6c <get_key+0x2cc>)
 8003db2:	f001 f9d3 	bl	800515c <HAL_GPIO_ReadPin>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d0f8      	beq.n	8003dae <get_key+0x10e>
  	    	 return '6';
 8003dbc:	2336      	movs	r3, #54	; 0x36
 8003dbe:	e0d1      	b.n	8003f64 <get_key+0x2c4>
  	     }
  	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 5
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	486a      	ldr	r0, [pc, #424]	; (8003f6c <get_key+0x2cc>)
 8003dc4:	f001 f9ca 	bl	800515c <HAL_GPIO_ReadPin>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d109      	bne.n	8003de2 <get_key+0x142>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8003dce:	bf00      	nop
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	4866      	ldr	r0, [pc, #408]	; (8003f6c <get_key+0x2cc>)
 8003dd4:	f001 f9c2 	bl	800515c <HAL_GPIO_ReadPin>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d0f8      	beq.n	8003dd0 <get_key+0x130>
  	    	return '5';
 8003dde:	2335      	movs	r3, #53	; 0x35
 8003de0:	e0c0      	b.n	8003f64 <get_key+0x2c4>
  	    }

  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 4
 8003de2:	2140      	movs	r1, #64	; 0x40
 8003de4:	4861      	ldr	r0, [pc, #388]	; (8003f6c <get_key+0x2cc>)
 8003de6:	f001 f9b9 	bl	800515c <HAL_GPIO_ReadPin>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d109      	bne.n	8003e04 <get_key+0x164>
  	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8003df0:	bf00      	nop
 8003df2:	2140      	movs	r1, #64	; 0x40
 8003df4:	485d      	ldr	r0, [pc, #372]	; (8003f6c <get_key+0x2cc>)
 8003df6:	f001 f9b1 	bl	800515c <HAL_GPIO_ReadPin>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d0f8      	beq.n	8003df2 <get_key+0x152>
  	    	  return '4';
 8003e00:	2334      	movs	r3, #52	; 0x34
 8003e02:	e0af      	b.n	8003f64 <get_key+0x2c4>
  	      }
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 3 reset
 8003e04:	2200      	movs	r2, #0
 8003e06:	2110      	movs	r1, #16
 8003e08:	4857      	ldr	r0, [pc, #348]	; (8003f68 <get_key+0x2c8>)
 8003e0a:	f001 f9be 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2120      	movs	r1, #32
 8003e12:	4855      	ldr	r0, [pc, #340]	; (8003f68 <get_key+0x2c8>)
 8003e14:	f001 f9b9 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2140      	movs	r1, #64	; 0x40
 8003e1c:	4852      	ldr	r0, [pc, #328]	; (8003f68 <get_key+0x2c8>)
 8003e1e:	f001 f9b4 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	4850      	ldr	r0, [pc, #320]	; (8003f68 <get_key+0x2c8>)
 8003e28:	f001 f9af 	bl	800518a <HAL_GPIO_WritePin>



  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //down
 8003e2c:	2108      	movs	r1, #8
 8003e2e:	484f      	ldr	r0, [pc, #316]	; (8003f6c <get_key+0x2cc>)
 8003e30:	f001 f994 	bl	800515c <HAL_GPIO_ReadPin>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d109      	bne.n	8003e4e <get_key+0x1ae>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8003e3a:	bf00      	nop
 8003e3c:	2108      	movs	r1, #8
 8003e3e:	484b      	ldr	r0, [pc, #300]	; (8003f6c <get_key+0x2cc>)
 8003e40:	f001 f98c 	bl	800515c <HAL_GPIO_ReadPin>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d0f8      	beq.n	8003e3c <get_key+0x19c>
  	    	return 'd';
 8003e4a:	2364      	movs	r3, #100	; 0x64
 8003e4c:	e08a      	b.n	8003f64 <get_key+0x2c4>
  	     }
  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){ // 9
 8003e4e:	2110      	movs	r1, #16
 8003e50:	4846      	ldr	r0, [pc, #280]	; (8003f6c <get_key+0x2cc>)
 8003e52:	f001 f983 	bl	800515c <HAL_GPIO_ReadPin>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <get_key+0x1d0>
  	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4));
 8003e5c:	bf00      	nop
 8003e5e:	2110      	movs	r1, #16
 8003e60:	4842      	ldr	r0, [pc, #264]	; (8003f6c <get_key+0x2cc>)
 8003e62:	f001 f97b 	bl	800515c <HAL_GPIO_ReadPin>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f8      	bne.n	8003e5e <get_key+0x1be>
  	    	  return '9';
 8003e6c:	2339      	movs	r3, #57	; 0x39
 8003e6e:	e079      	b.n	8003f64 <get_key+0x2c4>
  	     }
  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 8
 8003e70:	2120      	movs	r1, #32
 8003e72:	483e      	ldr	r0, [pc, #248]	; (8003f6c <get_key+0x2cc>)
 8003e74:	f001 f972 	bl	800515c <HAL_GPIO_ReadPin>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d109      	bne.n	8003e92 <get_key+0x1f2>
  	     	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8003e7e:	bf00      	nop
 8003e80:	2120      	movs	r1, #32
 8003e82:	483a      	ldr	r0, [pc, #232]	; (8003f6c <get_key+0x2cc>)
 8003e84:	f001 f96a 	bl	800515c <HAL_GPIO_ReadPin>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d0f8      	beq.n	8003e80 <get_key+0x1e0>
  	     	   return '8';
 8003e8e:	2338      	movs	r3, #56	; 0x38
 8003e90:	e068      	b.n	8003f64 <get_key+0x2c4>
  	       }

  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 7
 8003e92:	2140      	movs	r1, #64	; 0x40
 8003e94:	4835      	ldr	r0, [pc, #212]	; (8003f6c <get_key+0x2cc>)
 8003e96:	f001 f961 	bl	800515c <HAL_GPIO_ReadPin>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d109      	bne.n	8003eb4 <get_key+0x214>
  	      	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8003ea0:	bf00      	nop
 8003ea2:	2140      	movs	r1, #64	; 0x40
 8003ea4:	4831      	ldr	r0, [pc, #196]	; (8003f6c <get_key+0x2cc>)
 8003ea6:	f001 f959 	bl	800515c <HAL_GPIO_ReadPin>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d0f8      	beq.n	8003ea2 <get_key+0x202>
  	      	   return '7';
 8003eb0:	2337      	movs	r3, #55	; 0x37
 8003eb2:	e057      	b.n	8003f64 <get_key+0x2c4>
  	        }
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 4 reset
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2110      	movs	r1, #16
 8003eb8:	482b      	ldr	r0, [pc, #172]	; (8003f68 <get_key+0x2c8>)
 8003eba:	f001 f966 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	4829      	ldr	r0, [pc, #164]	; (8003f68 <get_key+0x2c8>)
 8003ec4:	f001 f961 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2140      	movs	r1, #64	; 0x40
 8003ecc:	4826      	ldr	r0, [pc, #152]	; (8003f68 <get_key+0x2c8>)
 8003ece:	f001 f95c 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	4824      	ldr	r0, [pc, #144]	; (8003f68 <get_key+0x2c8>)
 8003ed8:	f001 f957 	bl	800518a <HAL_GPIO_WritePin>


  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //menu
 8003edc:	2108      	movs	r1, #8
 8003ede:	4823      	ldr	r0, [pc, #140]	; (8003f6c <get_key+0x2cc>)
 8003ee0:	f001 f93c 	bl	800515c <HAL_GPIO_ReadPin>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d109      	bne.n	8003efe <get_key+0x25e>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8003eea:	bf00      	nop
 8003eec:	2108      	movs	r1, #8
 8003eee:	481f      	ldr	r0, [pc, #124]	; (8003f6c <get_key+0x2cc>)
 8003ef0:	f001 f934 	bl	800515c <HAL_GPIO_ReadPin>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d0f8      	beq.n	8003eec <get_key+0x24c>
  	    	return 'm';
 8003efa:	236d      	movs	r3, #109	; 0x6d
 8003efc:	e032      	b.n	8003f64 <get_key+0x2c4>

  	     }
  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // reset
 8003efe:	2110      	movs	r1, #16
 8003f00:	481a      	ldr	r0, [pc, #104]	; (8003f6c <get_key+0x2cc>)
 8003f02:	f001 f92b 	bl	800515c <HAL_GPIO_ReadPin>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d109      	bne.n	8003f20 <get_key+0x280>
  	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 8003f0c:	bf00      	nop
 8003f0e:	2110      	movs	r1, #16
 8003f10:	4816      	ldr	r0, [pc, #88]	; (8003f6c <get_key+0x2cc>)
 8003f12:	f001 f923 	bl	800515c <HAL_GPIO_ReadPin>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d0f8      	beq.n	8003f0e <get_key+0x26e>
  	    	  return 'r';
 8003f1c:	2372      	movs	r3, #114	; 0x72
 8003f1e:	e021      	b.n	8003f64 <get_key+0x2c4>

  	     }
  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 0
 8003f20:	2120      	movs	r1, #32
 8003f22:	4812      	ldr	r0, [pc, #72]	; (8003f6c <get_key+0x2cc>)
 8003f24:	f001 f91a 	bl	800515c <HAL_GPIO_ReadPin>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d109      	bne.n	8003f42 <get_key+0x2a2>
  	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8003f2e:	bf00      	nop
 8003f30:	2120      	movs	r1, #32
 8003f32:	480e      	ldr	r0, [pc, #56]	; (8003f6c <get_key+0x2cc>)
 8003f34:	f001 f912 	bl	800515c <HAL_GPIO_ReadPin>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d0f8      	beq.n	8003f30 <get_key+0x290>
  	    	  return '0';
 8003f3e:	2330      	movs	r3, #48	; 0x30
 8003f40:	e010      	b.n	8003f64 <get_key+0x2c4>

  	       }

  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // set
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <get_key+0x2cc>)
 8003f46:	f001 f909 	bl	800515c <HAL_GPIO_ReadPin>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d109      	bne.n	8003f64 <get_key+0x2c4>
  	      	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8003f50:	bf00      	nop
 8003f52:	2140      	movs	r1, #64	; 0x40
 8003f54:	4805      	ldr	r0, [pc, #20]	; (8003f6c <get_key+0x2cc>)
 8003f56:	f001 f901 	bl	800515c <HAL_GPIO_ReadPin>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d0f8      	beq.n	8003f52 <get_key+0x2b2>
  	      	   return 's';
 8003f60:	2373      	movs	r3, #115	; 0x73
 8003f62:	e7ff      	b.n	8003f64 <get_key+0x2c4>
  	      }

  }
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40010800 	.word	0x40010800
 8003f6c:	40010c00 	.word	0x40010c00

08003f70 <get_key_for_sensor_number>:

  char get_key_for_sensor_number(){
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // row 1 reset
 8003f74:	2201      	movs	r2, #1
 8003f76:	2110      	movs	r1, #16
 8003f78:	4859      	ldr	r0, [pc, #356]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8003f7a:	f001 f906 	bl	800518a <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2120      	movs	r1, #32
 8003f82:	4857      	ldr	r0, [pc, #348]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8003f84:	f001 f901 	bl	800518a <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2140      	movs	r1, #64	; 0x40
 8003f8c:	4854      	ldr	r0, [pc, #336]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8003f8e:	f001 f8fc 	bl	800518a <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	4852      	ldr	r0, [pc, #328]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8003f98:	f001 f8f7 	bl	800518a <HAL_GPIO_WritePin>


    	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // 3
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	4851      	ldr	r0, [pc, #324]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8003fa0:	f001 f8dc 	bl	800515c <HAL_GPIO_ReadPin>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d109      	bne.n	8003fbe <get_key_for_sensor_number+0x4e>
    		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 8003faa:	bf00      	nop
 8003fac:	2110      	movs	r1, #16
 8003fae:	484d      	ldr	r0, [pc, #308]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8003fb0:	f001 f8d4 	bl	800515c <HAL_GPIO_ReadPin>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d0f8      	beq.n	8003fac <get_key_for_sensor_number+0x3c>
    		  return '3';
 8003fba:	2333      	movs	r3, #51	; 0x33
 8003fbc:	e08d      	b.n	80040da <get_key_for_sensor_number+0x16a>

    	   }

    	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 2
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	4848      	ldr	r0, [pc, #288]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8003fc2:	f001 f8cb 	bl	800515c <HAL_GPIO_ReadPin>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d109      	bne.n	8003fe0 <get_key_for_sensor_number+0x70>
    		   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8003fcc:	bf00      	nop
 8003fce:	2120      	movs	r1, #32
 8003fd0:	4844      	ldr	r0, [pc, #272]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8003fd2:	f001 f8c3 	bl	800515c <HAL_GPIO_ReadPin>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d0f8      	beq.n	8003fce <get_key_for_sensor_number+0x5e>
    		   return '2';
 8003fdc:	2332      	movs	r3, #50	; 0x32
 8003fde:	e07c      	b.n	80040da <get_key_for_sensor_number+0x16a>
    	    }

    	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 1
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	4840      	ldr	r0, [pc, #256]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8003fe4:	f001 f8ba 	bl	800515c <HAL_GPIO_ReadPin>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d109      	bne.n	8004002 <get_key_for_sensor_number+0x92>
    	   	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 8003fee:	bf00      	nop
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	483c      	ldr	r0, [pc, #240]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8003ff4:	f001 f8b2 	bl	800515c <HAL_GPIO_ReadPin>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d0f8      	beq.n	8003ff0 <get_key_for_sensor_number+0x80>
    	   	   return '1';
 8003ffe:	2331      	movs	r3, #49	; 0x31
 8004000:	e06b      	b.n	80040da <get_key_for_sensor_number+0x16a>
    	   }

    	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // row 2 reset
 8004002:	2200      	movs	r2, #0
 8004004:	2110      	movs	r1, #16
 8004006:	4836      	ldr	r0, [pc, #216]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8004008:	f001 f8bf 	bl	800518a <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800400c:	2201      	movs	r2, #1
 800400e:	2120      	movs	r1, #32
 8004010:	4833      	ldr	r0, [pc, #204]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8004012:	f001 f8ba 	bl	800518a <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004016:	2200      	movs	r2, #0
 8004018:	2140      	movs	r1, #64	; 0x40
 800401a:	4831      	ldr	r0, [pc, #196]	; (80040e0 <get_key_for_sensor_number+0x170>)
 800401c:	f001 f8b5 	bl	800518a <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	482e      	ldr	r0, [pc, #184]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8004026:	f001 f8b0 	bl	800518a <HAL_GPIO_WritePin>


    	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET){ // 5
 800402a:	2120      	movs	r1, #32
 800402c:	482d      	ldr	r0, [pc, #180]	; (80040e4 <get_key_for_sensor_number+0x174>)
 800402e:	f001 f895 	bl	800515c <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d109      	bne.n	800404c <get_key_for_sensor_number+0xdc>
    	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==GPIO_PIN_SET);
 8004038:	bf00      	nop
 800403a:	2120      	movs	r1, #32
 800403c:	4829      	ldr	r0, [pc, #164]	; (80040e4 <get_key_for_sensor_number+0x174>)
 800403e:	f001 f88d 	bl	800515c <HAL_GPIO_ReadPin>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d0f8      	beq.n	800403a <get_key_for_sensor_number+0xca>
    	    	return '5';
 8004048:	2335      	movs	r3, #53	; 0x35
 800404a:	e046      	b.n	80040da <get_key_for_sensor_number+0x16a>
    	    }

    	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // 4
 800404c:	2140      	movs	r1, #64	; 0x40
 800404e:	4825      	ldr	r0, [pc, #148]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8004050:	f001 f884 	bl	800515c <HAL_GPIO_ReadPin>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d109      	bne.n	800406e <get_key_for_sensor_number+0xfe>
    	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 800405a:	bf00      	nop
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	4821      	ldr	r0, [pc, #132]	; (80040e4 <get_key_for_sensor_number+0x174>)
 8004060:	f001 f87c 	bl	800515c <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d0f8      	beq.n	800405c <get_key_for_sensor_number+0xec>
    	    	  return '4';
 800406a:	2334      	movs	r3, #52	; 0x34
 800406c:	e035      	b.n	80040da <get_key_for_sensor_number+0x16a>
    	      }




    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 4 reset
 800406e:	2200      	movs	r2, #0
 8004070:	2110      	movs	r1, #16
 8004072:	481b      	ldr	r0, [pc, #108]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8004074:	f001 f889 	bl	800518a <HAL_GPIO_WritePin>
    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004078:	2200      	movs	r2, #0
 800407a:	2120      	movs	r1, #32
 800407c:	4818      	ldr	r0, [pc, #96]	; (80040e0 <get_key_for_sensor_number+0x170>)
 800407e:	f001 f884 	bl	800518a <HAL_GPIO_WritePin>
    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004082:	2200      	movs	r2, #0
 8004084:	2140      	movs	r1, #64	; 0x40
 8004086:	4816      	ldr	r0, [pc, #88]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8004088:	f001 f87f 	bl	800518a <HAL_GPIO_WritePin>
    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800408c:	2201      	movs	r2, #1
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	4813      	ldr	r0, [pc, #76]	; (80040e0 <get_key_for_sensor_number+0x170>)
 8004092:	f001 f87a 	bl	800518a <HAL_GPIO_WritePin>


    	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //menu
 8004096:	2108      	movs	r1, #8
 8004098:	4812      	ldr	r0, [pc, #72]	; (80040e4 <get_key_for_sensor_number+0x174>)
 800409a:	f001 f85f 	bl	800515c <HAL_GPIO_ReadPin>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d109      	bne.n	80040b8 <get_key_for_sensor_number+0x148>
    	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 80040a4:	bf00      	nop
 80040a6:	2108      	movs	r1, #8
 80040a8:	480e      	ldr	r0, [pc, #56]	; (80040e4 <get_key_for_sensor_number+0x174>)
 80040aa:	f001 f857 	bl	800515c <HAL_GPIO_ReadPin>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d0f8      	beq.n	80040a6 <get_key_for_sensor_number+0x136>
    	    	return 'm';
 80040b4:	236d      	movs	r3, #109	; 0x6d
 80040b6:	e010      	b.n	80040da <get_key_for_sensor_number+0x16a>

    	     }
    	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // reset
 80040b8:	2110      	movs	r1, #16
 80040ba:	480a      	ldr	r0, [pc, #40]	; (80040e4 <get_key_for_sensor_number+0x174>)
 80040bc:	f001 f84e 	bl	800515c <HAL_GPIO_ReadPin>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d109      	bne.n	80040da <get_key_for_sensor_number+0x16a>
    	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 80040c6:	bf00      	nop
 80040c8:	2110      	movs	r1, #16
 80040ca:	4806      	ldr	r0, [pc, #24]	; (80040e4 <get_key_for_sensor_number+0x174>)
 80040cc:	f001 f846 	bl	800515c <HAL_GPIO_ReadPin>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d0f8      	beq.n	80040c8 <get_key_for_sensor_number+0x158>
    	    	  return 'r';
 80040d6:	2372      	movs	r3, #114	; 0x72
 80040d8:	e7ff      	b.n	80040da <get_key_for_sensor_number+0x16a>

    	     }


    }
 80040da:	4618      	mov	r0, r3
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40010800 	.word	0x40010800
 80040e4:	40010c00 	.word	0x40010c00

080040e8 <get_key_for_sensor_andor>:

  char get_key_for_sensor_andor(){
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0



  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // row 2 reset
 80040ec:	2200      	movs	r2, #0
 80040ee:	2110      	movs	r1, #16
 80040f0:	4848      	ldr	r0, [pc, #288]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 80040f2:	f001 f84a 	bl	800518a <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80040f6:	2201      	movs	r2, #1
 80040f8:	2120      	movs	r1, #32
 80040fa:	4846      	ldr	r0, [pc, #280]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 80040fc:	f001 f845 	bl	800518a <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	4843      	ldr	r0, [pc, #268]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 8004106:	f001 f840 	bl	800518a <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800410a:	2200      	movs	r2, #0
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	4841      	ldr	r0, [pc, #260]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 8004110:	f001 f83b 	bl	800518a <HAL_GPIO_WritePin>

  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //up
 8004114:	2108      	movs	r1, #8
 8004116:	4840      	ldr	r0, [pc, #256]	; (8004218 <get_key_for_sensor_andor+0x130>)
 8004118:	f001 f820 	bl	800515c <HAL_GPIO_ReadPin>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d109      	bne.n	8004136 <get_key_for_sensor_andor+0x4e>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 8004122:	bf00      	nop
 8004124:	2108      	movs	r1, #8
 8004126:	483c      	ldr	r0, [pc, #240]	; (8004218 <get_key_for_sensor_andor+0x130>)
 8004128:	f001 f818 	bl	800515c <HAL_GPIO_ReadPin>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d0f8      	beq.n	8004124 <get_key_for_sensor_andor+0x3c>
  	    	return 'u';
 8004132:	2375      	movs	r3, #117	; 0x75
 8004134:	e06b      	b.n	800420e <get_key_for_sensor_andor+0x126>
  	     }

  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 3 reset
 8004136:	2200      	movs	r2, #0
 8004138:	2110      	movs	r1, #16
 800413a:	4836      	ldr	r0, [pc, #216]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 800413c:	f001 f825 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004140:	2200      	movs	r2, #0
 8004142:	2120      	movs	r1, #32
 8004144:	4833      	ldr	r0, [pc, #204]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 8004146:	f001 f820 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800414a:	2201      	movs	r2, #1
 800414c:	2140      	movs	r1, #64	; 0x40
 800414e:	4831      	ldr	r0, [pc, #196]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 8004150:	f001 f81b 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	482e      	ldr	r0, [pc, #184]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 800415a:	f001 f816 	bl	800518a <HAL_GPIO_WritePin>



  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //down
 800415e:	2108      	movs	r1, #8
 8004160:	482d      	ldr	r0, [pc, #180]	; (8004218 <get_key_for_sensor_andor+0x130>)
 8004162:	f000 fffb 	bl	800515c <HAL_GPIO_ReadPin>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d109      	bne.n	8004180 <get_key_for_sensor_andor+0x98>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 800416c:	bf00      	nop
 800416e:	2108      	movs	r1, #8
 8004170:	4829      	ldr	r0, [pc, #164]	; (8004218 <get_key_for_sensor_andor+0x130>)
 8004172:	f000 fff3 	bl	800515c <HAL_GPIO_ReadPin>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d0f8      	beq.n	800416e <get_key_for_sensor_andor+0x86>
  	    	return 'd';
 800417c:	2364      	movs	r3, #100	; 0x64
 800417e:	e046      	b.n	800420e <get_key_for_sensor_andor+0x126>
  	     }

  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//row 4 reset
 8004180:	2200      	movs	r2, #0
 8004182:	2110      	movs	r1, #16
 8004184:	4823      	ldr	r0, [pc, #140]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 8004186:	f001 f800 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800418a:	2200      	movs	r2, #0
 800418c:	2120      	movs	r1, #32
 800418e:	4821      	ldr	r0, [pc, #132]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 8004190:	f000 fffb 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004194:	2200      	movs	r2, #0
 8004196:	2140      	movs	r1, #64	; 0x40
 8004198:	481e      	ldr	r0, [pc, #120]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 800419a:	f000 fff6 	bl	800518a <HAL_GPIO_WritePin>
  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800419e:	2201      	movs	r2, #1
 80041a0:	2180      	movs	r1, #128	; 0x80
 80041a2:	481c      	ldr	r0, [pc, #112]	; (8004214 <get_key_for_sensor_andor+0x12c>)
 80041a4:	f000 fff1 	bl	800518a <HAL_GPIO_WritePin>


  	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==GPIO_PIN_SET){ //menu
 80041a8:	2108      	movs	r1, #8
 80041aa:	481b      	ldr	r0, [pc, #108]	; (8004218 <get_key_for_sensor_andor+0x130>)
 80041ac:	f000 ffd6 	bl	800515c <HAL_GPIO_ReadPin>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d109      	bne.n	80041ca <get_key_for_sensor_andor+0xe2>
  	    	while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)==GPIO_PIN_SET);
 80041b6:	bf00      	nop
 80041b8:	2108      	movs	r1, #8
 80041ba:	4817      	ldr	r0, [pc, #92]	; (8004218 <get_key_for_sensor_andor+0x130>)
 80041bc:	f000 ffce 	bl	800515c <HAL_GPIO_ReadPin>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d0f8      	beq.n	80041b8 <get_key_for_sensor_andor+0xd0>
  	    	return 'm';
 80041c6:	236d      	movs	r3, #109	; 0x6d
 80041c8:	e021      	b.n	800420e <get_key_for_sensor_andor+0x126>

  	     }
  	      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET ){ // reset
 80041ca:	2110      	movs	r1, #16
 80041cc:	4812      	ldr	r0, [pc, #72]	; (8004218 <get_key_for_sensor_andor+0x130>)
 80041ce:	f000 ffc5 	bl	800515c <HAL_GPIO_ReadPin>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d109      	bne.n	80041ec <get_key_for_sensor_andor+0x104>
  	    	  while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)==GPIO_PIN_SET);
 80041d8:	bf00      	nop
 80041da:	2110      	movs	r1, #16
 80041dc:	480e      	ldr	r0, [pc, #56]	; (8004218 <get_key_for_sensor_andor+0x130>)
 80041de:	f000 ffbd 	bl	800515c <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d0f8      	beq.n	80041da <get_key_for_sensor_andor+0xf2>
  	    	  return 'r';
 80041e8:	2372      	movs	r3, #114	; 0x72
 80041ea:	e010      	b.n	800420e <get_key_for_sensor_andor+0x126>

  	     }


 	     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET){ // set
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	480a      	ldr	r0, [pc, #40]	; (8004218 <get_key_for_sensor_andor+0x130>)
 80041f0:	f000 ffb4 	bl	800515c <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d109      	bne.n	800420e <get_key_for_sensor_andor+0x126>
 	      	   while (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==GPIO_PIN_SET);
 80041fa:	bf00      	nop
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	4806      	ldr	r0, [pc, #24]	; (8004218 <get_key_for_sensor_andor+0x130>)
 8004200:	f000 ffac 	bl	800515c <HAL_GPIO_ReadPin>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d0f8      	beq.n	80041fc <get_key_for_sensor_andor+0x114>
 	      	   return 's';
 800420a:	2373      	movs	r3, #115	; 0x73
 800420c:	e7ff      	b.n	800420e <get_key_for_sensor_andor+0x126>
 	      }

  }
 800420e:	4618      	mov	r0, r3
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40010800 	.word	0x40010800
 8004218:	40010c00 	.word	0x40010c00

0800421c <crc16>:




  uint16_t crc16( uint8_t *buf, uint16_t len )
  {
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
  	static const uint16_t table[2] = { 0x0000, 0xA001 };
  	uint16_t crc = 0xFFFF;
 8004228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422c:	81fb      	strh	r3, [r7, #14]
  	uint16_t i = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	81bb      	strh	r3, [r7, #12]
  	uint8_t bit = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	72fb      	strb	r3, [r7, #11]
  	uint16_t xor = 0;  /* USER CODE END Init */
 8004236:	2300      	movs	r3, #0
 8004238:	813b      	strh	r3, [r7, #8]

  	for( i = 0; i < len; i++ )
 800423a:	2300      	movs	r3, #0
 800423c:	81bb      	strh	r3, [r7, #12]
 800423e:	e021      	b.n	8004284 <crc16+0x68>
  	{
  		crc ^= buf[i];
 8004240:	89bb      	ldrh	r3, [r7, #12]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b29a      	uxth	r2, r3
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	4053      	eors	r3, r2
 800424e:	81fb      	strh	r3, [r7, #14]
  		for( bit = 0; bit < 8; bit++ )
 8004250:	2300      	movs	r3, #0
 8004252:	72fb      	strb	r3, [r7, #11]
 8004254:	e010      	b.n	8004278 <crc16+0x5c>
  		{
  			xor = crc & 0x01;
 8004256:	89fb      	ldrh	r3, [r7, #14]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	813b      	strh	r3, [r7, #8]
  			crc >>= 1;
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	81fb      	strh	r3, [r7, #14]
  			crc ^= table[xor];
 8004264:	893b      	ldrh	r3, [r7, #8]
 8004266:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <crc16+0x7c>)
 8004268:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	4053      	eors	r3, r2
 8004270:	81fb      	strh	r3, [r7, #14]
  		for( bit = 0; bit < 8; bit++ )
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	3301      	adds	r3, #1
 8004276:	72fb      	strb	r3, [r7, #11]
 8004278:	7afb      	ldrb	r3, [r7, #11]
 800427a:	2b07      	cmp	r3, #7
 800427c:	d9eb      	bls.n	8004256 <crc16+0x3a>
  	for( i = 0; i < len; i++ )
 800427e:	89bb      	ldrh	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	81bb      	strh	r3, [r7, #12]
 8004284:	89ba      	ldrh	r2, [r7, #12]
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	429a      	cmp	r2, r3
 800428a:	d3d9      	bcc.n	8004240 <crc16+0x24>
  		}
  	}
  	return crc;
 800428c:	89fb      	ldrh	r3, [r7, #14]
  }
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	08007eb4 	.word	0x08007eb4

0800429c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b090      	sub	sp, #64	; 0x40
 80042a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042a2:	f107 0318 	add.w	r3, r7, #24
 80042a6:	2228      	movs	r2, #40	; 0x28
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f002 f856 	bl	800635c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042be:	2301      	movs	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042cc:	2301      	movs	r3, #1
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042d0:	2302      	movs	r3, #2
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042e0:	f107 0318 	add.w	r3, r7, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 ff69 	bl	80051bc <HAL_RCC_OscConfig>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80042f0:	f000 f8e6 	bl	80044c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042f4:	230f      	movs	r3, #15
 80042f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f8:	2302      	movs	r3, #2
 80042fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	2102      	movs	r1, #2
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f9d4 	bl	80056bc <HAL_RCC_ClockConfig>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800431a:	f000 f8d1 	bl	80044c0 <Error_Handler>
  }
}
 800431e:	bf00      	nop
 8004320:	3740      	adds	r7, #64	; 0x40
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <MX_USART3_UART_Init+0x50>)
 8004330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 8004334:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 8004342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004346:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 8004350:	220c      	movs	r2, #12
 8004352:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 800435c:	2200      	movs	r2, #0
 800435e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <MX_USART3_UART_Init+0x4c>)
 8004362:	f001 fb47 	bl	80059f4 <HAL_UART_Init>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 800436c:	f000 f8a8 	bl	80044c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000013c 	.word	0x2000013c
 8004378:	40004800 	.word	0x40004800

0800437c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <MX_DMA_Init+0x48>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <MX_DMA_Init+0x48>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6153      	str	r3, [r2, #20]
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <MX_DMA_Init+0x48>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	200c      	movs	r0, #12
 80043a0:	f000 fb75 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80043a4:	200c      	movs	r0, #12
 80043a6:	f000 fb8e 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2100      	movs	r1, #0
 80043ae:	200d      	movs	r0, #13
 80043b0:	f000 fb6d 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80043b4:	200d      	movs	r0, #13
 80043b6:	f000 fb86 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000

080043c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ce:	f107 0310 	add.w	r3, r7, #16
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043dc:	4b35      	ldr	r3, [pc, #212]	; (80044b4 <MX_GPIO_Init+0xec>)
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4a34      	ldr	r2, [pc, #208]	; (80044b4 <MX_GPIO_Init+0xec>)
 80043e2:	f043 0320 	orr.w	r3, r3, #32
 80043e6:	6193      	str	r3, [r2, #24]
 80043e8:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <MX_GPIO_Init+0xec>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f4:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <MX_GPIO_Init+0xec>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <MX_GPIO_Init+0xec>)
 80043fa:	f043 0304 	orr.w	r3, r3, #4
 80043fe:	6193      	str	r3, [r2, #24]
 8004400:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <MX_GPIO_Init+0xec>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800440c:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <MX_GPIO_Init+0xec>)
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <MX_GPIO_Init+0xec>)
 8004412:	f043 0308 	orr.w	r3, r3, #8
 8004416:	6193      	str	r3, [r2, #24]
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <MX_GPIO_Init+0xec>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8004424:	2200      	movs	r2, #0
 8004426:	f640 71f2 	movw	r1, #4082	; 0xff2
 800442a:	4823      	ldr	r0, [pc, #140]	; (80044b8 <MX_GPIO_Init+0xf0>)
 800442c:	f000 fead 	bl	800518a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_PIN_Pin|RW_PIN_Pin|GPIO_PIN_13|E_PIN_Pin, GPIO_PIN_RESET);
 8004430:	2200      	movs	r2, #0
 8004432:	f242 0183 	movw	r1, #8323	; 0x2083
 8004436:	4821      	ldr	r0, [pc, #132]	; (80044bc <MX_GPIO_Init+0xf4>)
 8004438:	f000 fea7 	bl	800518a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800443c:	23f2      	movs	r3, #242	; 0xf2
 800443e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004440:	2301      	movs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2302      	movs	r3, #2
 800444a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	f107 0310 	add.w	r3, r7, #16
 8004450:	4619      	mov	r1, r3
 8004452:	4819      	ldr	r0, [pc, #100]	; (80044b8 <MX_GPIO_Init+0xf0>)
 8004454:	f000 fd28 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_PIN_Pin RW_PIN_Pin PB13 E_PIN_Pin */
  GPIO_InitStruct.Pin = RS_PIN_Pin|RW_PIN_Pin|GPIO_PIN_13|E_PIN_Pin;
 8004458:	f242 0383 	movw	r3, #8323	; 0x2083
 800445c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004466:	2302      	movs	r3, #2
 8004468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446a:	f107 0310 	add.w	r3, r7, #16
 800446e:	4619      	mov	r1, r3
 8004470:	4812      	ldr	r0, [pc, #72]	; (80044bc <MX_GPIO_Init+0xf4>)
 8004472:	f000 fd19 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004476:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800447a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004484:	2301      	movs	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004488:	f107 0310 	add.w	r3, r7, #16
 800448c:	4619      	mov	r1, r3
 800448e:	480a      	ldr	r0, [pc, #40]	; (80044b8 <MX_GPIO_Init+0xf0>)
 8004490:	f000 fd0a 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004494:	2378      	movs	r3, #120	; 0x78
 8004496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	4619      	mov	r1, r3
 80044a6:	4805      	ldr	r0, [pc, #20]	; (80044bc <MX_GPIO_Init+0xf4>)
 80044a8:	f000 fcfe 	bl	8004ea8 <HAL_GPIO_Init>

}
 80044ac:	bf00      	nop
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40010800 	.word	0x40010800
 80044bc:	40010c00 	.word	0x40010c00

080044c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_MspInit+0x5c>)
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_MspInit+0x5c>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6193      	str	r3, [r2, #24]
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_MspInit+0x5c>)
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_MspInit+0x5c>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <HAL_MspInit+0x5c>)
 80044f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f4:	61d3      	str	r3, [r2, #28]
 80044f6:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <HAL_MspInit+0x5c>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <HAL_MspInit+0x60>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_MspInit+0x60>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40021000 	.word	0x40021000
 800452c:	40010000 	.word	0x40010000

08004530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 0310 	add.w	r3, r7, #16
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_UART_MspInit+0x138>)
 800454c:	4293      	cmp	r3, r2
 800454e:	f040 8086 	bne.w	800465e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004552:	4b46      	ldr	r3, [pc, #280]	; (800466c <HAL_UART_MspInit+0x13c>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4a45      	ldr	r2, [pc, #276]	; (800466c <HAL_UART_MspInit+0x13c>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	61d3      	str	r3, [r2, #28]
 800455e:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_UART_MspInit+0x13c>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800456a:	4b40      	ldr	r3, [pc, #256]	; (800466c <HAL_UART_MspInit+0x13c>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	4a3f      	ldr	r2, [pc, #252]	; (800466c <HAL_UART_MspInit+0x13c>)
 8004570:	f043 0308 	orr.w	r3, r3, #8
 8004574:	6193      	str	r3, [r2, #24]
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <HAL_UART_MspInit+0x13c>)
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800458c:	2303      	movs	r3, #3
 800458e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	4619      	mov	r1, r3
 8004596:	4836      	ldr	r0, [pc, #216]	; (8004670 <HAL_UART_MspInit+0x140>)
 8004598:	f000 fc86 	bl	8004ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800459c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045aa:	f107 0310 	add.w	r3, r7, #16
 80045ae:	4619      	mov	r1, r3
 80045b0:	482f      	ldr	r0, [pc, #188]	; (8004670 <HAL_UART_MspInit+0x140>)
 80045b2:	f000 fc79 	bl	8004ea8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045b8:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <HAL_UART_MspInit+0x148>)
 80045ba:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045ce:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045dc:	2200      	movs	r2, #0
 80045de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80045e6:	4823      	ldr	r0, [pc, #140]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045e8:	f000 fa88 	bl	8004afc <HAL_DMA_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80045f2:	f7ff ff65 	bl	80044c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_UART_MspInit+0x144>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004604:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <HAL_UART_MspInit+0x150>)
 8004606:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <HAL_UART_MspInit+0x14c>)
 800460a:	2210      	movs	r2, #16
 800460c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800460e:	4b1b      	ldr	r3, [pc, #108]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_UART_MspInit+0x14c>)
 800461c:	2200      	movs	r2, #0
 800461e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004622:	2200      	movs	r2, #0
 8004624:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800462c:	4b13      	ldr	r3, [pc, #76]	; (800467c <HAL_UART_MspInit+0x14c>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004632:	4812      	ldr	r0, [pc, #72]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004634:	f000 fa62 	bl	8004afc <HAL_DMA_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800463e:	f7ff ff3f 	bl	80044c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <HAL_UART_MspInit+0x14c>)
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <HAL_UART_MspInit+0x14c>)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800464e:	2200      	movs	r2, #0
 8004650:	2100      	movs	r1, #0
 8004652:	2027      	movs	r0, #39	; 0x27
 8004654:	f000 fa1b 	bl	8004a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004658:	2027      	movs	r0, #39	; 0x27
 800465a:	f000 fa34 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800465e:	bf00      	nop
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40004800 	.word	0x40004800
 800466c:	40021000 	.word	0x40021000
 8004670:	40010c00 	.word	0x40010c00
 8004674:	200000f8 	.word	0x200000f8
 8004678:	40020030 	.word	0x40020030
 800467c:	2000017c 	.word	0x2000017c
 8004680:	4002001c 	.word	0x4002001c

08004684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004694:	e7fe      	b.n	8004694 <HardFault_Handler+0x4>

08004696 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800469a:	e7fe      	b.n	800469a <MemManage_Handler+0x4>

0800469c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046a0:	e7fe      	b.n	80046a0 <BusFault_Handler+0x4>

080046a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a6:	e7fe      	b.n	80046a6 <UsageFault_Handler+0x4>

080046a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046d0:	f000 f8c8 	bl	8004864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <DMA1_Channel2_IRQHandler+0x10>)
 80046de:	f000 fadd 	bl	8004c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	2000017c 	.word	0x2000017c

080046ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <DMA1_Channel3_IRQHandler+0x10>)
 80046f2:	f000 fad3 	bl	8004c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200000f8 	.word	0x200000f8

08004700 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004704:	4802      	ldr	r0, [pc, #8]	; (8004710 <USART3_IRQHandler+0x10>)
 8004706:	f001 faf3 	bl	8005cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	2000013c 	.word	0x2000013c

08004714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <_sbrk+0x5c>)
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <_sbrk+0x60>)
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <_sbrk+0x64>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <_sbrk+0x64>)
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <_sbrk+0x68>)
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <_sbrk+0x64>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	429a      	cmp	r2, r3
 8004742:	d207      	bcs.n	8004754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004744:	f001 fde0 	bl	8006308 <__errno>
 8004748:	4602      	mov	r2, r0
 800474a:	230c      	movs	r3, #12
 800474c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004752:	e009      	b.n	8004768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <_sbrk+0x64>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <_sbrk+0x64>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	4a05      	ldr	r2, [pc, #20]	; (8004778 <_sbrk+0x64>)
 8004764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20005000 	.word	0x20005000
 8004774:	00000400 	.word	0x00000400
 8004778:	200000ec 	.word	0x200000ec
 800477c:	200001d8 	.word	0x200001d8

08004780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800478c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800478e:	e003      	b.n	8004798 <LoopCopyDataInit>

08004790 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004792:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004794:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004796:	3104      	adds	r1, #4

08004798 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004798:	480a      	ldr	r0, [pc, #40]	; (80047c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800479c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800479e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80047a0:	d3f6      	bcc.n	8004790 <CopyDataInit>
  ldr r2, =_sbss
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80047a4:	e002      	b.n	80047ac <LoopFillZerobss>

080047a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80047a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80047a8:	f842 3b04 	str.w	r3, [r2], #4

080047ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80047ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80047b0:	d3f9      	bcc.n	80047a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047b2:	f7ff ffe5 	bl	8004780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047b6:	f001 fdad 	bl	8006314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ba:	f7fc fc23 	bl	8001004 <main>
  bx lr
 80047be:	4770      	bx	lr
  ldr r3, =_sidata
 80047c0:	08007f50 	.word	0x08007f50
  ldr r0, =_sdata
 80047c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80047c8:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 80047cc:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 80047d0:	200001d8 	.word	0x200001d8

080047d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047d4:	e7fe      	b.n	80047d4 <ADC1_2_IRQHandler>
	...

080047d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_Init+0x28>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_Init+0x28>)
 80047e2:	f043 0310 	orr.w	r3, r3, #16
 80047e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047e8:	2003      	movs	r0, #3
 80047ea:	f000 f945 	bl	8004a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f000 f808 	bl	8004804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047f4:	f7ff fe6a 	bl	80044cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40022000 	.word	0x40022000

08004804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_InitTick+0x54>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_InitTick+0x58>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481a:	fbb3 f3f1 	udiv	r3, r3, r1
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f95d 	bl	8004ae2 <HAL_SYSTICK_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e00e      	b.n	8004850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d80a      	bhi.n	800484e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004838:	2200      	movs	r2, #0
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004840:	f000 f925 	bl	8004a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004844:	4a06      	ldr	r2, [pc, #24]	; (8004860 <HAL_InitTick+0x5c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	2000001c 	.word	0x2000001c
 800485c:	20000024 	.word	0x20000024
 8004860:	20000020 	.word	0x20000020

08004864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_IncTick+0x1c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_IncTick+0x20>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4413      	add	r3, r2
 8004874:	4a03      	ldr	r2, [pc, #12]	; (8004884 <HAL_IncTick+0x20>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	20000024 	.word	0x20000024
 8004884:	200001d0 	.word	0x200001d0

08004888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return uwTick;
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <HAL_GetTick+0x10>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	200001d0 	.word	0x200001d0

0800489c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7ff fff0 	bl	8004888 <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b4:	d005      	beq.n	80048c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_Delay+0x40>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048c2:	bf00      	nop
 80048c4:	f7ff ffe0 	bl	8004888 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d8f7      	bhi.n	80048c4 <HAL_Delay+0x28>
  {
  }
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000024 	.word	0x20000024

080048e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <__NVIC_SetPriorityGrouping+0x44>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048fc:	4013      	ands	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004912:	4a04      	ldr	r2, [pc, #16]	; (8004924 <__NVIC_SetPriorityGrouping+0x44>)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	60d3      	str	r3, [r2, #12]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	e000ed00 	.word	0xe000ed00

08004928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <__NVIC_GetPriorityGrouping+0x18>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	f003 0307 	and.w	r3, r3, #7
}
 8004936:	4618      	mov	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	db0b      	blt.n	800496e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	f003 021f 	and.w	r2, r3, #31
 800495c:	4906      	ldr	r1, [pc, #24]	; (8004978 <__NVIC_EnableIRQ+0x34>)
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2001      	movs	r0, #1
 8004966:	fa00 f202 	lsl.w	r2, r0, r2
 800496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	e000e100 	.word	0xe000e100

0800497c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	2b00      	cmp	r3, #0
 800498e:	db0a      	blt.n	80049a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	490c      	ldr	r1, [pc, #48]	; (80049c8 <__NVIC_SetPriority+0x4c>)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	440b      	add	r3, r1
 80049a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a4:	e00a      	b.n	80049bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4908      	ldr	r1, [pc, #32]	; (80049cc <__NVIC_SetPriority+0x50>)
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3b04      	subs	r3, #4
 80049b4:	0112      	lsls	r2, r2, #4
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	440b      	add	r3, r1
 80049ba:	761a      	strb	r2, [r3, #24]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	e000e100 	.word	0xe000e100
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f1c3 0307 	rsb	r3, r3, #7
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	bf28      	it	cs
 80049ee:	2304      	movcs	r3, #4
 80049f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d902      	bls.n	8004a00 <NVIC_EncodePriority+0x30>
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3b03      	subs	r3, #3
 80049fe:	e000      	b.n	8004a02 <NVIC_EncodePriority+0x32>
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	401a      	ands	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a22:	43d9      	mvns	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a28:	4313      	orrs	r3, r2
         );
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3724      	adds	r7, #36	; 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a44:	d301      	bcc.n	8004a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00f      	b.n	8004a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <SysTick_Config+0x40>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a52:	210f      	movs	r1, #15
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a58:	f7ff ff90 	bl	800497c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <SysTick_Config+0x40>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <SysTick_Config+0x40>)
 8004a64:	2207      	movs	r2, #7
 8004a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	e000e010 	.word	0xe000e010

08004a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff2d 	bl	80048e0 <__NVIC_SetPriorityGrouping>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa0:	f7ff ff42 	bl	8004928 <__NVIC_GetPriorityGrouping>
 8004aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff ff90 	bl	80049d0 <NVIC_EncodePriority>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff5f 	bl	800497c <__NVIC_SetPriority>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff35 	bl	8004944 <__NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffa2 	bl	8004a34 <SysTick_Config>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e043      	b.n	8004b9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <HAL_DMA_Init+0xa8>)
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <HAL_DMA_Init+0xac>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	009a      	lsls	r2, r3, #2
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <HAL_DMA_Init+0xb0>)
 8004b2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	bffdfff8 	.word	0xbffdfff8
 8004ba8:	cccccccd 	.word	0xcccccccd
 8004bac:	40020000 	.word	0x40020000

08004bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d005      	beq.n	8004bd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	e051      	b.n	8004c76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 020e 	bic.w	r2, r2, #14
 8004be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <HAL_DMA_Abort_IT+0xd0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d029      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xa0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <HAL_DMA_Abort_IT+0xd4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d022      	beq.n	8004c4c <HAL_DMA_Abort_IT+0x9c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <HAL_DMA_Abort_IT+0xd8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d01a      	beq.n	8004c46 <HAL_DMA_Abort_IT+0x96>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <HAL_DMA_Abort_IT+0xdc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d012      	beq.n	8004c40 <HAL_DMA_Abort_IT+0x90>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_DMA_Abort_IT+0xe0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00a      	beq.n	8004c3a <HAL_DMA_Abort_IT+0x8a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <HAL_DMA_Abort_IT+0xe4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d102      	bne.n	8004c34 <HAL_DMA_Abort_IT+0x84>
 8004c2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c32:	e00e      	b.n	8004c52 <HAL_DMA_Abort_IT+0xa2>
 8004c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c38:	e00b      	b.n	8004c52 <HAL_DMA_Abort_IT+0xa2>
 8004c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c3e:	e008      	b.n	8004c52 <HAL_DMA_Abort_IT+0xa2>
 8004c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c44:	e005      	b.n	8004c52 <HAL_DMA_Abort_IT+0xa2>
 8004c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c4a:	e002      	b.n	8004c52 <HAL_DMA_Abort_IT+0xa2>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	e000      	b.n	8004c52 <HAL_DMA_Abort_IT+0xa2>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <HAL_DMA_Abort_IT+0xe8>)
 8004c54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
    } 
  }
  return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40020008 	.word	0x40020008
 8004c84:	4002001c 	.word	0x4002001c
 8004c88:	40020030 	.word	0x40020030
 8004c8c:	40020044 	.word	0x40020044
 8004c90:	40020058 	.word	0x40020058
 8004c94:	4002006c 	.word	0x4002006c
 8004c98:	40020000 	.word	0x40020000

08004c9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2204      	movs	r2, #4
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d04f      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xc8>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04a      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0204 	bic.w	r2, r2, #4
 8004cea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a66      	ldr	r2, [pc, #408]	; (8004e8c <HAL_DMA_IRQHandler+0x1f0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d029      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xae>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a65      	ldr	r2, [pc, #404]	; (8004e90 <HAL_DMA_IRQHandler+0x1f4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_DMA_IRQHandler+0xaa>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a63      	ldr	r2, [pc, #396]	; (8004e94 <HAL_DMA_IRQHandler+0x1f8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01a      	beq.n	8004d40 <HAL_DMA_IRQHandler+0xa4>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a62      	ldr	r2, [pc, #392]	; (8004e98 <HAL_DMA_IRQHandler+0x1fc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d012      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x9e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a60      	ldr	r2, [pc, #384]	; (8004e9c <HAL_DMA_IRQHandler+0x200>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00a      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x98>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5f      	ldr	r2, [pc, #380]	; (8004ea0 <HAL_DMA_IRQHandler+0x204>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d102      	bne.n	8004d2e <HAL_DMA_IRQHandler+0x92>
 8004d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d2c:	e00e      	b.n	8004d4c <HAL_DMA_IRQHandler+0xb0>
 8004d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d32:	e00b      	b.n	8004d4c <HAL_DMA_IRQHandler+0xb0>
 8004d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d38:	e008      	b.n	8004d4c <HAL_DMA_IRQHandler+0xb0>
 8004d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d3e:	e005      	b.n	8004d4c <HAL_DMA_IRQHandler+0xb0>
 8004d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d44:	e002      	b.n	8004d4c <HAL_DMA_IRQHandler+0xb0>
 8004d46:	2340      	movs	r3, #64	; 0x40
 8004d48:	e000      	b.n	8004d4c <HAL_DMA_IRQHandler+0xb0>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	4a55      	ldr	r2, [pc, #340]	; (8004ea4 <HAL_DMA_IRQHandler+0x208>)
 8004d4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8094 	beq.w	8004e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d62:	e08e      	b.n	8004e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	2202      	movs	r2, #2
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d056      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x186>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d051      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 020a 	bic.w	r2, r2, #10
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a38      	ldr	r2, [pc, #224]	; (8004e8c <HAL_DMA_IRQHandler+0x1f0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d029      	beq.n	8004e02 <HAL_DMA_IRQHandler+0x166>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a37      	ldr	r2, [pc, #220]	; (8004e90 <HAL_DMA_IRQHandler+0x1f4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x162>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <HAL_DMA_IRQHandler+0x1f8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01a      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x15c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a34      	ldr	r2, [pc, #208]	; (8004e98 <HAL_DMA_IRQHandler+0x1fc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d012      	beq.n	8004df2 <HAL_DMA_IRQHandler+0x156>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a32      	ldr	r2, [pc, #200]	; (8004e9c <HAL_DMA_IRQHandler+0x200>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00a      	beq.n	8004dec <HAL_DMA_IRQHandler+0x150>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a31      	ldr	r2, [pc, #196]	; (8004ea0 <HAL_DMA_IRQHandler+0x204>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d102      	bne.n	8004de6 <HAL_DMA_IRQHandler+0x14a>
 8004de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004de4:	e00e      	b.n	8004e04 <HAL_DMA_IRQHandler+0x168>
 8004de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dea:	e00b      	b.n	8004e04 <HAL_DMA_IRQHandler+0x168>
 8004dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004df0:	e008      	b.n	8004e04 <HAL_DMA_IRQHandler+0x168>
 8004df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004df6:	e005      	b.n	8004e04 <HAL_DMA_IRQHandler+0x168>
 8004df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dfc:	e002      	b.n	8004e04 <HAL_DMA_IRQHandler+0x168>
 8004dfe:	2320      	movs	r3, #32
 8004e00:	e000      	b.n	8004e04 <HAL_DMA_IRQHandler+0x168>
 8004e02:	2302      	movs	r3, #2
 8004e04:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <HAL_DMA_IRQHandler+0x208>)
 8004e06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d034      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e20:	e02f      	b.n	8004e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	2208      	movs	r2, #8
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d028      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x1e8>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d023      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 020e 	bic.w	r2, r2, #14
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
    }
  }
  return;
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
}
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40020008 	.word	0x40020008
 8004e90:	4002001c 	.word	0x4002001c
 8004e94:	40020030 	.word	0x40020030
 8004e98:	40020044 	.word	0x40020044
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	4002006c 	.word	0x4002006c
 8004ea4:	40020000 	.word	0x40020000

08004ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b08b      	sub	sp, #44	; 0x2c
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eba:	e127      	b.n	800510c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	f040 8116 	bne.w	8005106 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b12      	cmp	r3, #18
 8004ee0:	d034      	beq.n	8004f4c <HAL_GPIO_Init+0xa4>
 8004ee2:	2b12      	cmp	r3, #18
 8004ee4:	d80d      	bhi.n	8004f02 <HAL_GPIO_Init+0x5a>
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d02b      	beq.n	8004f42 <HAL_GPIO_Init+0x9a>
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d804      	bhi.n	8004ef8 <HAL_GPIO_Init+0x50>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d031      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d01c      	beq.n	8004f30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004ef6:	e048      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d043      	beq.n	8004f84 <HAL_GPIO_Init+0xdc>
 8004efc:	2b11      	cmp	r3, #17
 8004efe:	d01b      	beq.n	8004f38 <HAL_GPIO_Init+0x90>
          break;
 8004f00:	e043      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004f02:	4a89      	ldr	r2, [pc, #548]	; (8005128 <HAL_GPIO_Init+0x280>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d026      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
 8004f08:	4a87      	ldr	r2, [pc, #540]	; (8005128 <HAL_GPIO_Init+0x280>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d806      	bhi.n	8004f1c <HAL_GPIO_Init+0x74>
 8004f0e:	4a87      	ldr	r2, [pc, #540]	; (800512c <HAL_GPIO_Init+0x284>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d020      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
 8004f14:	4a86      	ldr	r2, [pc, #536]	; (8005130 <HAL_GPIO_Init+0x288>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01d      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
          break;
 8004f1a:	e036      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004f1c:	4a85      	ldr	r2, [pc, #532]	; (8005134 <HAL_GPIO_Init+0x28c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d019      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
 8004f22:	4a85      	ldr	r2, [pc, #532]	; (8005138 <HAL_GPIO_Init+0x290>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d016      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
 8004f28:	4a84      	ldr	r2, [pc, #528]	; (800513c <HAL_GPIO_Init+0x294>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_GPIO_Init+0xae>
          break;
 8004f2e:	e02c      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	623b      	str	r3, [r7, #32]
          break;
 8004f36:	e028      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	623b      	str	r3, [r7, #32]
          break;
 8004f40:	e023      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	3308      	adds	r3, #8
 8004f48:	623b      	str	r3, [r7, #32]
          break;
 8004f4a:	e01e      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	330c      	adds	r3, #12
 8004f52:	623b      	str	r3, [r7, #32]
          break;
 8004f54:	e019      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f5e:	2304      	movs	r3, #4
 8004f60:	623b      	str	r3, [r7, #32]
          break;
 8004f62:	e012      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d105      	bne.n	8004f78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	611a      	str	r2, [r3, #16]
          break;
 8004f76:	e008      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f78:	2308      	movs	r3, #8
 8004f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	615a      	str	r2, [r3, #20]
          break;
 8004f82:	e002      	b.n	8004f8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f84:	2300      	movs	r3, #0
 8004f86:	623b      	str	r3, [r7, #32]
          break;
 8004f88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2bff      	cmp	r3, #255	; 0xff
 8004f8e:	d801      	bhi.n	8004f94 <HAL_GPIO_Init+0xec>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	e001      	b.n	8004f98 <HAL_GPIO_Init+0xf0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2bff      	cmp	r3, #255	; 0xff
 8004f9e:	d802      	bhi.n	8004fa6 <HAL_GPIO_Init+0xfe>
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	e002      	b.n	8004fac <HAL_GPIO_Init+0x104>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	3b08      	subs	r3, #8
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	210f      	movs	r1, #15
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	401a      	ands	r2, r3
 8004fbe:	6a39      	ldr	r1, [r7, #32]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8096 	beq.w	8005106 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004fda:	4b59      	ldr	r3, [pc, #356]	; (8005140 <HAL_GPIO_Init+0x298>)
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	4a58      	ldr	r2, [pc, #352]	; (8005140 <HAL_GPIO_Init+0x298>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6193      	str	r3, [r2, #24]
 8004fe6:	4b56      	ldr	r3, [pc, #344]	; (8005140 <HAL_GPIO_Init+0x298>)
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ff2:	4a54      	ldr	r2, [pc, #336]	; (8005144 <HAL_GPIO_Init+0x29c>)
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	220f      	movs	r2, #15
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4b      	ldr	r2, [pc, #300]	; (8005148 <HAL_GPIO_Init+0x2a0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_GPIO_Init+0x19e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a4a      	ldr	r2, [pc, #296]	; (800514c <HAL_GPIO_Init+0x2a4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00d      	beq.n	8005042 <HAL_GPIO_Init+0x19a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a49      	ldr	r2, [pc, #292]	; (8005150 <HAL_GPIO_Init+0x2a8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <HAL_GPIO_Init+0x196>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a48      	ldr	r2, [pc, #288]	; (8005154 <HAL_GPIO_Init+0x2ac>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_GPIO_Init+0x192>
 8005036:	2303      	movs	r3, #3
 8005038:	e006      	b.n	8005048 <HAL_GPIO_Init+0x1a0>
 800503a:	2304      	movs	r3, #4
 800503c:	e004      	b.n	8005048 <HAL_GPIO_Init+0x1a0>
 800503e:	2302      	movs	r3, #2
 8005040:	e002      	b.n	8005048 <HAL_GPIO_Init+0x1a0>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_GPIO_Init+0x1a0>
 8005046:	2300      	movs	r3, #0
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	f002 0203 	and.w	r2, r2, #3
 800504e:	0092      	lsls	r2, r2, #2
 8005050:	4093      	lsls	r3, r2
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005058:	493a      	ldr	r1, [pc, #232]	; (8005144 <HAL_GPIO_Init+0x29c>)
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	3302      	adds	r3, #2
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005072:	4b39      	ldr	r3, [pc, #228]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4938      	ldr	r1, [pc, #224]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]
 800507e:	e006      	b.n	800508e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005080:	4b35      	ldr	r3, [pc, #212]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	43db      	mvns	r3, r3
 8005088:	4933      	ldr	r1, [pc, #204]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 800508a:	4013      	ands	r3, r2
 800508c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	492e      	ldr	r1, [pc, #184]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
 80050a6:	e006      	b.n	80050b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	4929      	ldr	r1, [pc, #164]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050c2:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	4924      	ldr	r1, [pc, #144]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
 80050ce:	e006      	b.n	80050de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80050d0:	4b21      	ldr	r3, [pc, #132]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	491f      	ldr	r1, [pc, #124]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050da:	4013      	ands	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	491a      	ldr	r1, [pc, #104]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60cb      	str	r3, [r1, #12]
 80050f6:	e006      	b.n	8005106 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050f8:	4b17      	ldr	r3, [pc, #92]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	43db      	mvns	r3, r3
 8005100:	4915      	ldr	r1, [pc, #84]	; (8005158 <HAL_GPIO_Init+0x2b0>)
 8005102:	4013      	ands	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	3301      	adds	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	fa22 f303 	lsr.w	r3, r2, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f47f aed0 	bne.w	8004ebc <HAL_GPIO_Init+0x14>
  }
}
 800511c:	bf00      	nop
 800511e:	372c      	adds	r7, #44	; 0x2c
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	10210000 	.word	0x10210000
 800512c:	10110000 	.word	0x10110000
 8005130:	10120000 	.word	0x10120000
 8005134:	10310000 	.word	0x10310000
 8005138:	10320000 	.word	0x10320000
 800513c:	10220000 	.word	0x10220000
 8005140:	40021000 	.word	0x40021000
 8005144:	40010000 	.word	0x40010000
 8005148:	40010800 	.word	0x40010800
 800514c:	40010c00 	.word	0x40010c00
 8005150:	40011000 	.word	0x40011000
 8005154:	40011400 	.word	0x40011400
 8005158:	40010400 	.word	0x40010400

0800515c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
 8005178:	e001      	b.n	800517e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	807b      	strh	r3, [r7, #2]
 8005196:	4613      	mov	r3, r2
 8005198:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800519a:	787b      	ldrb	r3, [r7, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051a0:	887a      	ldrh	r2, [r7, #2]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051a6:	e003      	b.n	80051b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	041a      	lsls	r2, r3, #16
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	611a      	str	r2, [r3, #16]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e26c      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8087 	beq.w	80052ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d00c      	beq.n	8005202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051e8:	4b8f      	ldr	r3, [pc, #572]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 030c 	and.w	r3, r3, #12
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d112      	bne.n	800521a <HAL_RCC_OscConfig+0x5e>
 80051f4:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d10b      	bne.n	800521a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005202:	4b89      	ldr	r3, [pc, #548]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d06c      	beq.n	80052e8 <HAL_RCC_OscConfig+0x12c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d168      	bne.n	80052e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e246      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005222:	d106      	bne.n	8005232 <HAL_RCC_OscConfig+0x76>
 8005224:	4b80      	ldr	r3, [pc, #512]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a7f      	ldr	r2, [pc, #508]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e02e      	b.n	8005290 <HAL_RCC_OscConfig+0xd4>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10c      	bne.n	8005254 <HAL_RCC_OscConfig+0x98>
 800523a:	4b7b      	ldr	r3, [pc, #492]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7a      	ldr	r2, [pc, #488]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b78      	ldr	r3, [pc, #480]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a77      	ldr	r2, [pc, #476]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800524c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e01d      	b.n	8005290 <HAL_RCC_OscConfig+0xd4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0xbc>
 800525e:	4b72      	ldr	r3, [pc, #456]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a71      	ldr	r2, [pc, #452]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6e      	ldr	r2, [pc, #440]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e00b      	b.n	8005290 <HAL_RCC_OscConfig+0xd4>
 8005278:	4b6b      	ldr	r3, [pc, #428]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a6a      	ldr	r2, [pc, #424]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b68      	ldr	r3, [pc, #416]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a67      	ldr	r2, [pc, #412]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800528a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800528e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7ff faf6 	bl	8004888 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a0:	f7ff faf2 	bl	8004888 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	; 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e1fa      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b2:	4b5d      	ldr	r3, [pc, #372]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0xe4>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7ff fae2 	bl	8004888 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c8:	f7ff fade 	bl	8004888 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	; 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1e6      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052da:	4b53      	ldr	r3, [pc, #332]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x10c>
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d063      	beq.n	80053be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052f6:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005302:	4b49      	ldr	r3, [pc, #292]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b08      	cmp	r3, #8
 800530c:	d11c      	bne.n	8005348 <HAL_RCC_OscConfig+0x18c>
 800530e:	4b46      	ldr	r3, [pc, #280]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531a:	4b43      	ldr	r3, [pc, #268]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_RCC_OscConfig+0x176>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d001      	beq.n	8005332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e1ba      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4939      	ldr	r1, [pc, #228]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005346:	e03a      	b.n	80053be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d020      	beq.n	8005392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCC_OscConfig+0x270>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005356:	f7ff fa97 	bl	8004888 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800535e:	f7ff fa93 	bl	8004888 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e19b      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005370:	4b2d      	ldr	r3, [pc, #180]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537c:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4927      	ldr	r1, [pc, #156]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	600b      	str	r3, [r1, #0]
 8005390:	e015      	b.n	80053be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005392:	4b26      	ldr	r3, [pc, #152]	; (800542c <HAL_RCC_OscConfig+0x270>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7ff fa76 	bl	8004888 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a0:	f7ff fa72 	bl	8004888 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e17a      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d03a      	beq.n	8005440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d019      	beq.n	8005406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d8:	f7ff fa56 	bl	8004888 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e0:	f7ff fa52 	bl	8004888 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e15a      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053fe:	2001      	movs	r0, #1
 8005400:	f000 fada 	bl	80059b8 <RCC_Delay>
 8005404:	e01c      	b.n	8005440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_RCC_OscConfig+0x274>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540c:	f7ff fa3c 	bl	8004888 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005412:	e00f      	b.n	8005434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005414:	f7ff fa38 	bl	8004888 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d908      	bls.n	8005434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e140      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	42420000 	.word	0x42420000
 8005430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005434:	4b9e      	ldr	r3, [pc, #632]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e9      	bne.n	8005414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a6 	beq.w	800559a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005452:	4b97      	ldr	r3, [pc, #604]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	4b94      	ldr	r3, [pc, #592]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	4a93      	ldr	r2, [pc, #588]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005468:	61d3      	str	r3, [r2, #28]
 800546a:	4b91      	ldr	r3, [pc, #580]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547a:	4b8e      	ldr	r3, [pc, #568]	; (80056b4 <HAL_RCC_OscConfig+0x4f8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d118      	bne.n	80054b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005486:	4b8b      	ldr	r3, [pc, #556]	; (80056b4 <HAL_RCC_OscConfig+0x4f8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a8a      	ldr	r2, [pc, #552]	; (80056b4 <HAL_RCC_OscConfig+0x4f8>)
 800548c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005492:	f7ff f9f9 	bl	8004888 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549a:	f7ff f9f5 	bl	8004888 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b64      	cmp	r3, #100	; 0x64
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e0fd      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ac:	4b81      	ldr	r3, [pc, #516]	; (80056b4 <HAL_RCC_OscConfig+0x4f8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d106      	bne.n	80054ce <HAL_RCC_OscConfig+0x312>
 80054c0:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4a7a      	ldr	r2, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6213      	str	r3, [r2, #32]
 80054cc:	e02d      	b.n	800552a <HAL_RCC_OscConfig+0x36e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x334>
 80054d6:	4b76      	ldr	r3, [pc, #472]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4a75      	ldr	r2, [pc, #468]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	6213      	str	r3, [r2, #32]
 80054e2:	4b73      	ldr	r3, [pc, #460]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4a72      	ldr	r2, [pc, #456]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	6213      	str	r3, [r2, #32]
 80054ee:	e01c      	b.n	800552a <HAL_RCC_OscConfig+0x36e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d10c      	bne.n	8005512 <HAL_RCC_OscConfig+0x356>
 80054f8:	4b6d      	ldr	r3, [pc, #436]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4a6c      	ldr	r2, [pc, #432]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80054fe:	f043 0304 	orr.w	r3, r3, #4
 8005502:	6213      	str	r3, [r2, #32]
 8005504:	4b6a      	ldr	r3, [pc, #424]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	4a69      	ldr	r2, [pc, #420]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	6213      	str	r3, [r2, #32]
 8005510:	e00b      	b.n	800552a <HAL_RCC_OscConfig+0x36e>
 8005512:	4b67      	ldr	r3, [pc, #412]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4a66      	ldr	r2, [pc, #408]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	6213      	str	r3, [r2, #32]
 800551e:	4b64      	ldr	r3, [pc, #400]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4a63      	ldr	r2, [pc, #396]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005524:	f023 0304 	bic.w	r3, r3, #4
 8005528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d015      	beq.n	800555e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005532:	f7ff f9a9 	bl	8004888 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005538:	e00a      	b.n	8005550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7ff f9a5 	bl	8004888 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	; 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e0ab      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0ee      	beq.n	800553a <HAL_RCC_OscConfig+0x37e>
 800555c:	e014      	b.n	8005588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555e:	f7ff f993 	bl	8004888 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005564:	e00a      	b.n	800557c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005566:	f7ff f98f 	bl	8004888 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f241 3288 	movw	r2, #5000	; 0x1388
 8005574:	4293      	cmp	r3, r2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e095      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557c:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ee      	bne.n	8005566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d105      	bne.n	800559a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4b48      	ldr	r3, [pc, #288]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	4a47      	ldr	r2, [pc, #284]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8081 	beq.w	80056a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d061      	beq.n	8005674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d146      	bne.n	8005646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b8:	4b3f      	ldr	r3, [pc, #252]	; (80056b8 <HAL_RCC_OscConfig+0x4fc>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055be:	f7ff f963 	bl	8004888 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c6:	f7ff f95f 	bl	8004888 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e067      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d8:	4b35      	ldr	r3, [pc, #212]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d108      	bne.n	8005600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055ee:	4b30      	ldr	r3, [pc, #192]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	492d      	ldr	r1, [pc, #180]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005600:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a19      	ldr	r1, [r3, #32]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	430b      	orrs	r3, r1
 8005612:	4927      	ldr	r1, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005618:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <HAL_RCC_OscConfig+0x4fc>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561e:	f7ff f933 	bl	8004888 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005626:	f7ff f92f 	bl	8004888 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e037      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005638:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x46a>
 8005644:	e02f      	b.n	80056a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005646:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <HAL_RCC_OscConfig+0x4fc>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564c:	f7ff f91c 	bl	8004888 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7ff f918 	bl	8004888 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e020      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x498>
 8005672:	e018      	b.n	80056a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e013      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_RCC_OscConfig+0x4f4>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	429a      	cmp	r2, r3
 8005692:	d106      	bne.n	80056a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40007000 	.word	0x40007000
 80056b8:	42420060 	.word	0x42420060

080056bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0d0      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056d0:	4b6a      	ldr	r3, [pc, #424]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d910      	bls.n	8005700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b67      	ldr	r3, [pc, #412]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 0207 	bic.w	r2, r3, #7
 80056e6:	4965      	ldr	r1, [pc, #404]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ee:	4b63      	ldr	r3, [pc, #396]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d001      	beq.n	8005700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0b8      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d020      	beq.n	800574e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005718:	4b59      	ldr	r3, [pc, #356]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4a58      	ldr	r2, [pc, #352]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800571e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005730:	4b53      	ldr	r3, [pc, #332]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a52      	ldr	r2, [pc, #328]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800573a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800573c:	4b50      	ldr	r3, [pc, #320]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	494d      	ldr	r1, [pc, #308]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d040      	beq.n	80057dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d107      	bne.n	8005772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d115      	bne.n	800579a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e07f      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577a:	4b41      	ldr	r3, [pc, #260]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e073      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578a:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e06b      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800579a:	4b39      	ldr	r3, [pc, #228]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4936      	ldr	r1, [pc, #216]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057ac:	f7ff f86c 	bl	8004888 <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7ff f868 	bl	8004888 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e053      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 020c 	and.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1eb      	bne.n	80057b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d210      	bcs.n	800580c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b24      	ldr	r3, [pc, #144]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 0207 	bic.w	r2, r3, #7
 80057f2:	4922      	ldr	r1, [pc, #136]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b20      	ldr	r3, [pc, #128]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e032      	b.n	8005872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005818:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4916      	ldr	r1, [pc, #88]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	490e      	ldr	r1, [pc, #56]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005846:	4313      	orrs	r3, r2
 8005848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800584a:	f000 f821 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 800584e:	4601      	mov	r1, r0
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <HAL_RCC_ClockConfig+0x1c8>)
 800585c:	5cd3      	ldrb	r3, [r2, r3]
 800585e:	fa21 f303 	lsr.w	r3, r1, r3
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <HAL_RCC_ClockConfig+0x1cc>)
 8005864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <HAL_RCC_ClockConfig+0x1d0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe ffca 	bl	8004804 <HAL_InitTick>

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40022000 	.word	0x40022000
 8005880:	40021000 	.word	0x40021000
 8005884:	08007eb8 	.word	0x08007eb8
 8005888:	2000001c 	.word	0x2000001c
 800588c:	20000020 	.word	0x20000020

08005890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005890:	b490      	push	{r4, r7}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005896:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005898:	1d3c      	adds	r4, r7, #4
 800589a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800589c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80058a0:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d002      	beq.n	80058d0 <HAL_RCC_GetSysClockFreq+0x40>
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d003      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0x46>
 80058ce:	e02d      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058d0:	4b1e      	ldr	r3, [pc, #120]	; (800594c <HAL_RCC_GetSysClockFreq+0xbc>)
 80058d2:	623b      	str	r3, [r7, #32]
      break;
 80058d4:	e02d      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	0c9b      	lsrs	r3, r3, #18
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058e2:	4413      	add	r3, r2
 80058e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80058e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058f4:	4b14      	ldr	r3, [pc, #80]	; (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	0c5b      	lsrs	r3, r3, #17
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005902:	4413      	add	r3, r2
 8005904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	4a0f      	ldr	r2, [pc, #60]	; (800594c <HAL_RCC_GetSysClockFreq+0xbc>)
 800590e:	fb02 f203 	mul.w	r2, r2, r3
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
 800591a:	e004      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005920:	fb02 f303 	mul.w	r3, r2, r3
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	623b      	str	r3, [r7, #32]
      break;
 800592a:	e002      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_RCC_GetSysClockFreq+0xbc>)
 800592e:	623b      	str	r3, [r7, #32]
      break;
 8005930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005932:	6a3b      	ldr	r3, [r7, #32]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bc90      	pop	{r4, r7}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	08007ea0 	.word	0x08007ea0
 8005944:	08007eb0 	.word	0x08007eb0
 8005948:	40021000 	.word	0x40021000
 800594c:	007a1200 	.word	0x007a1200
 8005950:	003d0900 	.word	0x003d0900

08005954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <HAL_RCC_GetHCLKFreq+0x10>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr
 8005964:	2000001c 	.word	0x2000001c

08005968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800596c:	f7ff fff2 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005970:	4601      	mov	r1, r0
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	4a03      	ldr	r2, [pc, #12]	; (800598c <HAL_RCC_GetPCLK1Freq+0x24>)
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40021000 	.word	0x40021000
 800598c:	08007ec8 	.word	0x08007ec8

08005990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005994:	f7ff ffde 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005998:	4601      	mov	r1, r0
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	0adb      	lsrs	r3, r3, #11
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	4a03      	ldr	r2, [pc, #12]	; (80059b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a6:	5cd3      	ldrb	r3, [r2, r3]
 80059a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40021000 	.word	0x40021000
 80059b4:	08007ec8 	.word	0x08007ec8

080059b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <RCC_Delay+0x34>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <RCC_Delay+0x38>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	0a5b      	lsrs	r3, r3, #9
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059d4:	bf00      	nop
  }
  while (Delay --);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	60fa      	str	r2, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f9      	bne.n	80059d4 <RCC_Delay+0x1c>
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	2000001c 	.word	0x2000001c
 80059f0:	10624dd3 	.word	0x10624dd3

080059f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03f      	b.n	8005a86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe fd88 	bl	8004530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2224      	movs	r2, #36	; 0x24
 8005a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fbd7 	bl	80061ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b08a      	sub	sp, #40	; 0x28
 8005a92:	af02      	add	r7, sp, #8
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d17c      	bne.n	8005ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_UART_Transmit+0x2c>
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e075      	b.n	8005baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_UART_Transmit+0x3e>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e06e      	b.n	8005baa <HAL_UART_Transmit+0x11c>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	; 0x21
 8005ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ae2:	f7fe fed1 	bl	8004888 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d108      	bne.n	8005b10 <HAL_UART_Transmit+0x82>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e003      	b.n	8005b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b20:	e02a      	b.n	8005b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f9fa 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e036      	b.n	8005baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	3302      	adds	r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e007      	b.n	8005b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cf      	bne.n	8005b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2140      	movs	r1, #64	; 0x40
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f9ca 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b08a      	sub	sp, #40	; 0x28
 8005bb6:	af02      	add	r7, sp, #8
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f040 8089 	bne.w	8005ce6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_Receive+0x2e>
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e081      	b.n	8005ce8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Receive+0x40>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e07a      	b.n	8005ce8 <HAL_UART_Receive+0x136>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2222      	movs	r2, #34	; 0x22
 8005c04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c08:	f7fe fe3e 	bl	8004888 <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d108      	bne.n	8005c36 <HAL_UART_Receive+0x84>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e003      	b.n	8005c3e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c46:	e043      	b.n	8005cd0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2120      	movs	r1, #32
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f967 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e042      	b.n	8005ce8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10c      	bne.n	8005c82 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e01f      	b.n	8005cc2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d007      	beq.n	8005c9c <HAL_UART_Receive+0xea>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <HAL_UART_Receive+0xf8>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e008      	b.n	8005cbc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1b6      	bne.n	8005c48 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e000      	b.n	8005ce8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
  }
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10d      	bne.n	8005d42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_UART_IRQHandler+0x52>
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9d5 	bl	80060ea <UART_Receive_IT>
      return;
 8005d40:	e0d1      	b.n	8005ee6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80b0 	beq.w	8005eaa <HAL_UART_IRQHandler+0x1ba>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <HAL_UART_IRQHandler+0x70>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80a5 	beq.w	8005eaa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_UART_IRQHandler+0x90>
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_UART_IRQHandler+0xb0>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	f043 0202 	orr.w	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_UART_IRQHandler+0xd0>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	f043 0204 	orr.w	r2, r3, #4
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00f      	beq.n	8005dea <HAL_UART_IRQHandler+0xfa>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_UART_IRQHandler+0xee>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	f043 0208 	orr.w	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d078      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <HAL_UART_IRQHandler+0x11c>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f96f 	bl	80060ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <HAL_UART_IRQHandler+0x144>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d031      	beq.n	8005e98 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8c0 	bl	8005fba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d023      	beq.n	8005e90 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e56:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d013      	beq.n	8005e88 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	4a21      	ldr	r2, [pc, #132]	; (8005eec <HAL_UART_IRQHandler+0x1fc>)
 8005e66:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fe9f 	bl	8004bb0 <HAL_DMA_Abort_IT>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d016      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e82:	4610      	mov	r0, r2
 8005e84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	e00e      	b.n	8005ea6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f843 	bl	8005f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8e:	e00a      	b.n	8005ea6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f83f 	bl	8005f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e96:	e006      	b.n	8005ea6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f83b 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ea4:	e01e      	b.n	8005ee4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea6:	bf00      	nop
    return;
 8005ea8:	e01c      	b.n	8005ee4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d008      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x1d6>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8ac 	bl	800601c <UART_Transmit_IT>
    return;
 8005ec4:	e00f      	b.n	8005ee6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x1f6>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8ed 	bl	80060ba <UART_EndTransmit_IT>
    return;
 8005ee0:	bf00      	nop
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005ee4:	bf00      	nop
  }
}
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	08005ff5 	.word	0x08005ff5

08005ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	e02c      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3e:	d028      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f46:	f7fe fc9f 	bl	8004888 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d21d      	bcs.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f64:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e00f      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d0c3      	beq.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fd0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff ff80 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b21      	cmp	r3, #33	; 0x21
 800602e:	d13e      	bne.n	80060ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d114      	bne.n	8006064 <UART_Transmit_IT+0x48>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d110      	bne.n	8006064 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006056:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	621a      	str	r2, [r3, #32]
 8006062:	e008      	b.n	8006076 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	1c59      	adds	r1, r3, #1
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6211      	str	r1, [r2, #32]
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29b      	uxth	r3, r3
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4619      	mov	r1, r3
 8006084:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006098:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff ff08 	bl	8005ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b22      	cmp	r3, #34	; 0x22
 80060fc:	d170      	bne.n	80061e0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d117      	bne.n	8006138 <UART_Receive_IT+0x4e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d113      	bne.n	8006138 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	b29a      	uxth	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	1c9a      	adds	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
 8006136:	e026      	b.n	8006186 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d007      	beq.n	800615c <UART_Receive_IT+0x72>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <UART_Receive_IT+0x80>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e008      	b.n	800617c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4619      	mov	r1, r3
 8006194:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006196:	2b00      	cmp	r3, #0
 8006198:	d120      	bne.n	80061dc <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0220 	bic.w	r2, r2, #32
 80061a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe95 	bl	8005f02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e002      	b.n	80061e2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	e000      	b.n	80061e2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006226:	f023 030c 	bic.w	r3, r3, #12
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	430b      	orrs	r3, r1
 8006232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <UART_SetConfig+0x114>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d103      	bne.n	800625c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006254:	f7ff fb9c 	bl	8005990 <HAL_RCC_GetPCLK2Freq>
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	e002      	b.n	8006262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7ff fb84 	bl	8005968 <HAL_RCC_GetPCLK1Freq>
 8006260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009a      	lsls	r2, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	4a22      	ldr	r2, [pc, #136]	; (8006304 <UART_SetConfig+0x118>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	0119      	lsls	r1, r3, #4
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009a      	lsls	r2, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	fbb2 f2f3 	udiv	r2, r2, r3
 8006298:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <UART_SetConfig+0x118>)
 800629a:	fba3 0302 	umull	r0, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2064      	movs	r0, #100	; 0x64
 80062a2:	fb00 f303 	mul.w	r3, r0, r3
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	3332      	adds	r3, #50	; 0x32
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <UART_SetConfig+0x118>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b8:	4419      	add	r1, r3
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009a      	lsls	r2, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <UART_SetConfig+0x118>)
 80062d2:	fba3 0302 	umull	r0, r3, r3, r2
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	2064      	movs	r0, #100	; 0x64
 80062da:	fb00 f303 	mul.w	r3, r0, r3
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	3332      	adds	r3, #50	; 0x32
 80062e4:	4a07      	ldr	r2, [pc, #28]	; (8006304 <UART_SetConfig+0x118>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	440a      	add	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40013800 	.word	0x40013800
 8006304:	51eb851f 	.word	0x51eb851f

08006308 <__errno>:
 8006308:	4b01      	ldr	r3, [pc, #4]	; (8006310 <__errno+0x8>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000028 	.word	0x20000028

08006314 <__libc_init_array>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	2500      	movs	r5, #0
 8006318:	4e0c      	ldr	r6, [pc, #48]	; (800634c <__libc_init_array+0x38>)
 800631a:	4c0d      	ldr	r4, [pc, #52]	; (8006350 <__libc_init_array+0x3c>)
 800631c:	1ba4      	subs	r4, r4, r6
 800631e:	10a4      	asrs	r4, r4, #2
 8006320:	42a5      	cmp	r5, r4
 8006322:	d109      	bne.n	8006338 <__libc_init_array+0x24>
 8006324:	f001 fc5c 	bl	8007be0 <_init>
 8006328:	2500      	movs	r5, #0
 800632a:	4e0a      	ldr	r6, [pc, #40]	; (8006354 <__libc_init_array+0x40>)
 800632c:	4c0a      	ldr	r4, [pc, #40]	; (8006358 <__libc_init_array+0x44>)
 800632e:	1ba4      	subs	r4, r4, r6
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	42a5      	cmp	r5, r4
 8006334:	d105      	bne.n	8006342 <__libc_init_array+0x2e>
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800633c:	4798      	blx	r3
 800633e:	3501      	adds	r5, #1
 8006340:	e7ee      	b.n	8006320 <__libc_init_array+0xc>
 8006342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006346:	4798      	blx	r3
 8006348:	3501      	adds	r5, #1
 800634a:	e7f2      	b.n	8006332 <__libc_init_array+0x1e>
 800634c:	08007f48 	.word	0x08007f48
 8006350:	08007f48 	.word	0x08007f48
 8006354:	08007f48 	.word	0x08007f48
 8006358:	08007f4c 	.word	0x08007f4c

0800635c <memset>:
 800635c:	4603      	mov	r3, r0
 800635e:	4402      	add	r2, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <_vsiprintf_r>:
 800636c:	b500      	push	{lr}
 800636e:	b09b      	sub	sp, #108	; 0x6c
 8006370:	9100      	str	r1, [sp, #0]
 8006372:	9104      	str	r1, [sp, #16]
 8006374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006378:	9105      	str	r1, [sp, #20]
 800637a:	9102      	str	r1, [sp, #8]
 800637c:	4905      	ldr	r1, [pc, #20]	; (8006394 <_vsiprintf_r+0x28>)
 800637e:	9103      	str	r1, [sp, #12]
 8006380:	4669      	mov	r1, sp
 8006382:	f000 f86d 	bl	8006460 <_svfiprintf_r>
 8006386:	2200      	movs	r2, #0
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	b01b      	add	sp, #108	; 0x6c
 800638e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006392:	bf00      	nop
 8006394:	ffff0208 	.word	0xffff0208

08006398 <vsiprintf>:
 8006398:	4613      	mov	r3, r2
 800639a:	460a      	mov	r2, r1
 800639c:	4601      	mov	r1, r0
 800639e:	4802      	ldr	r0, [pc, #8]	; (80063a8 <vsiprintf+0x10>)
 80063a0:	6800      	ldr	r0, [r0, #0]
 80063a2:	f7ff bfe3 	b.w	800636c <_vsiprintf_r>
 80063a6:	bf00      	nop
 80063a8:	20000028 	.word	0x20000028

080063ac <__ssputs_r>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	688e      	ldr	r6, [r1, #8]
 80063b2:	4682      	mov	sl, r0
 80063b4:	429e      	cmp	r6, r3
 80063b6:	460c      	mov	r4, r1
 80063b8:	4690      	mov	r8, r2
 80063ba:	4699      	mov	r9, r3
 80063bc:	d837      	bhi.n	800642e <__ssputs_r+0x82>
 80063be:	898a      	ldrh	r2, [r1, #12]
 80063c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063c4:	d031      	beq.n	800642a <__ssputs_r+0x7e>
 80063c6:	2302      	movs	r3, #2
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	6909      	ldr	r1, [r1, #16]
 80063cc:	1a6f      	subs	r7, r5, r1
 80063ce:	6965      	ldr	r5, [r4, #20]
 80063d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80063d8:	f109 0301 	add.w	r3, r9, #1
 80063dc:	443b      	add	r3, r7
 80063de:	429d      	cmp	r5, r3
 80063e0:	bf38      	it	cc
 80063e2:	461d      	movcc	r5, r3
 80063e4:	0553      	lsls	r3, r2, #21
 80063e6:	d530      	bpl.n	800644a <__ssputs_r+0x9e>
 80063e8:	4629      	mov	r1, r5
 80063ea:	f000 fb37 	bl	8006a5c <_malloc_r>
 80063ee:	4606      	mov	r6, r0
 80063f0:	b950      	cbnz	r0, 8006408 <__ssputs_r+0x5c>
 80063f2:	230c      	movs	r3, #12
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f8:	f8ca 3000 	str.w	r3, [sl]
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	463a      	mov	r2, r7
 800640a:	6921      	ldr	r1, [r4, #16]
 800640c:	f000 fab6 	bl	800697c <memcpy>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	6126      	str	r6, [r4, #16]
 800641e:	443e      	add	r6, r7
 8006420:	6026      	str	r6, [r4, #0]
 8006422:	464e      	mov	r6, r9
 8006424:	6165      	str	r5, [r4, #20]
 8006426:	1bed      	subs	r5, r5, r7
 8006428:	60a5      	str	r5, [r4, #8]
 800642a:	454e      	cmp	r6, r9
 800642c:	d900      	bls.n	8006430 <__ssputs_r+0x84>
 800642e:	464e      	mov	r6, r9
 8006430:	4632      	mov	r2, r6
 8006432:	4641      	mov	r1, r8
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	f000 faac 	bl	8006992 <memmove>
 800643a:	68a3      	ldr	r3, [r4, #8]
 800643c:	2000      	movs	r0, #0
 800643e:	1b9b      	subs	r3, r3, r6
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	441e      	add	r6, r3
 8006446:	6026      	str	r6, [r4, #0]
 8006448:	e7dc      	b.n	8006404 <__ssputs_r+0x58>
 800644a:	462a      	mov	r2, r5
 800644c:	f000 fb60 	bl	8006b10 <_realloc_r>
 8006450:	4606      	mov	r6, r0
 8006452:	2800      	cmp	r0, #0
 8006454:	d1e2      	bne.n	800641c <__ssputs_r+0x70>
 8006456:	6921      	ldr	r1, [r4, #16]
 8006458:	4650      	mov	r0, sl
 800645a:	f000 fab3 	bl	80069c4 <_free_r>
 800645e:	e7c8      	b.n	80063f2 <__ssputs_r+0x46>

08006460 <_svfiprintf_r>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	461d      	mov	r5, r3
 8006466:	898b      	ldrh	r3, [r1, #12]
 8006468:	b09d      	sub	sp, #116	; 0x74
 800646a:	061f      	lsls	r7, r3, #24
 800646c:	4680      	mov	r8, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4616      	mov	r6, r2
 8006472:	d50f      	bpl.n	8006494 <_svfiprintf_r+0x34>
 8006474:	690b      	ldr	r3, [r1, #16]
 8006476:	b96b      	cbnz	r3, 8006494 <_svfiprintf_r+0x34>
 8006478:	2140      	movs	r1, #64	; 0x40
 800647a:	f000 faef 	bl	8006a5c <_malloc_r>
 800647e:	6020      	str	r0, [r4, #0]
 8006480:	6120      	str	r0, [r4, #16]
 8006482:	b928      	cbnz	r0, 8006490 <_svfiprintf_r+0x30>
 8006484:	230c      	movs	r3, #12
 8006486:	f8c8 3000 	str.w	r3, [r8]
 800648a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800648e:	e0c8      	b.n	8006622 <_svfiprintf_r+0x1c2>
 8006490:	2340      	movs	r3, #64	; 0x40
 8006492:	6163      	str	r3, [r4, #20]
 8006494:	2300      	movs	r3, #0
 8006496:	9309      	str	r3, [sp, #36]	; 0x24
 8006498:	2320      	movs	r3, #32
 800649a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649e:	2330      	movs	r3, #48	; 0x30
 80064a0:	f04f 0b01 	mov.w	fp, #1
 80064a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064a8:	9503      	str	r5, [sp, #12]
 80064aa:	4637      	mov	r7, r6
 80064ac:	463d      	mov	r5, r7
 80064ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064b2:	b10b      	cbz	r3, 80064b8 <_svfiprintf_r+0x58>
 80064b4:	2b25      	cmp	r3, #37	; 0x25
 80064b6:	d13e      	bne.n	8006536 <_svfiprintf_r+0xd6>
 80064b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80064bc:	d00b      	beq.n	80064d6 <_svfiprintf_r+0x76>
 80064be:	4653      	mov	r3, sl
 80064c0:	4632      	mov	r2, r6
 80064c2:	4621      	mov	r1, r4
 80064c4:	4640      	mov	r0, r8
 80064c6:	f7ff ff71 	bl	80063ac <__ssputs_r>
 80064ca:	3001      	adds	r0, #1
 80064cc:	f000 80a4 	beq.w	8006618 <_svfiprintf_r+0x1b8>
 80064d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d2:	4453      	add	r3, sl
 80064d4:	9309      	str	r3, [sp, #36]	; 0x24
 80064d6:	783b      	ldrb	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 809d 	beq.w	8006618 <_svfiprintf_r+0x1b8>
 80064de:	2300      	movs	r3, #0
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	9307      	str	r3, [sp, #28]
 80064ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f0:	931a      	str	r3, [sp, #104]	; 0x68
 80064f2:	462f      	mov	r7, r5
 80064f4:	2205      	movs	r2, #5
 80064f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064fa:	4850      	ldr	r0, [pc, #320]	; (800663c <_svfiprintf_r+0x1dc>)
 80064fc:	f000 fa30 	bl	8006960 <memchr>
 8006500:	9b04      	ldr	r3, [sp, #16]
 8006502:	b9d0      	cbnz	r0, 800653a <_svfiprintf_r+0xda>
 8006504:	06d9      	lsls	r1, r3, #27
 8006506:	bf44      	itt	mi
 8006508:	2220      	movmi	r2, #32
 800650a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800650e:	071a      	lsls	r2, r3, #28
 8006510:	bf44      	itt	mi
 8006512:	222b      	movmi	r2, #43	; 0x2b
 8006514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006518:	782a      	ldrb	r2, [r5, #0]
 800651a:	2a2a      	cmp	r2, #42	; 0x2a
 800651c:	d015      	beq.n	800654a <_svfiprintf_r+0xea>
 800651e:	462f      	mov	r7, r5
 8006520:	2000      	movs	r0, #0
 8006522:	250a      	movs	r5, #10
 8006524:	9a07      	ldr	r2, [sp, #28]
 8006526:	4639      	mov	r1, r7
 8006528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800652c:	3b30      	subs	r3, #48	; 0x30
 800652e:	2b09      	cmp	r3, #9
 8006530:	d94d      	bls.n	80065ce <_svfiprintf_r+0x16e>
 8006532:	b1b8      	cbz	r0, 8006564 <_svfiprintf_r+0x104>
 8006534:	e00f      	b.n	8006556 <_svfiprintf_r+0xf6>
 8006536:	462f      	mov	r7, r5
 8006538:	e7b8      	b.n	80064ac <_svfiprintf_r+0x4c>
 800653a:	4a40      	ldr	r2, [pc, #256]	; (800663c <_svfiprintf_r+0x1dc>)
 800653c:	463d      	mov	r5, r7
 800653e:	1a80      	subs	r0, r0, r2
 8006540:	fa0b f000 	lsl.w	r0, fp, r0
 8006544:	4318      	orrs	r0, r3
 8006546:	9004      	str	r0, [sp, #16]
 8006548:	e7d3      	b.n	80064f2 <_svfiprintf_r+0x92>
 800654a:	9a03      	ldr	r2, [sp, #12]
 800654c:	1d11      	adds	r1, r2, #4
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	9103      	str	r1, [sp, #12]
 8006552:	2a00      	cmp	r2, #0
 8006554:	db01      	blt.n	800655a <_svfiprintf_r+0xfa>
 8006556:	9207      	str	r2, [sp, #28]
 8006558:	e004      	b.n	8006564 <_svfiprintf_r+0x104>
 800655a:	4252      	negs	r2, r2
 800655c:	f043 0302 	orr.w	r3, r3, #2
 8006560:	9207      	str	r2, [sp, #28]
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	783b      	ldrb	r3, [r7, #0]
 8006566:	2b2e      	cmp	r3, #46	; 0x2e
 8006568:	d10c      	bne.n	8006584 <_svfiprintf_r+0x124>
 800656a:	787b      	ldrb	r3, [r7, #1]
 800656c:	2b2a      	cmp	r3, #42	; 0x2a
 800656e:	d133      	bne.n	80065d8 <_svfiprintf_r+0x178>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	3702      	adds	r7, #2
 8006574:	1d1a      	adds	r2, r3, #4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	9203      	str	r2, [sp, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	bfb8      	it	lt
 800657e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	4d2e      	ldr	r5, [pc, #184]	; (8006640 <_svfiprintf_r+0x1e0>)
 8006586:	2203      	movs	r2, #3
 8006588:	7839      	ldrb	r1, [r7, #0]
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f9e8 	bl	8006960 <memchr>
 8006590:	b138      	cbz	r0, 80065a2 <_svfiprintf_r+0x142>
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	1b40      	subs	r0, r0, r5
 8006596:	fa03 f000 	lsl.w	r0, r3, r0
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	3701      	adds	r7, #1
 800659e:	4303      	orrs	r3, r0
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	7839      	ldrb	r1, [r7, #0]
 80065a4:	2206      	movs	r2, #6
 80065a6:	4827      	ldr	r0, [pc, #156]	; (8006644 <_svfiprintf_r+0x1e4>)
 80065a8:	1c7e      	adds	r6, r7, #1
 80065aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ae:	f000 f9d7 	bl	8006960 <memchr>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d038      	beq.n	8006628 <_svfiprintf_r+0x1c8>
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <_svfiprintf_r+0x1e8>)
 80065b8:	bb13      	cbnz	r3, 8006600 <_svfiprintf_r+0x1a0>
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	3307      	adds	r3, #7
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	3308      	adds	r3, #8
 80065c4:	9303      	str	r3, [sp, #12]
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	444b      	add	r3, r9
 80065ca:	9309      	str	r3, [sp, #36]	; 0x24
 80065cc:	e76d      	b.n	80064aa <_svfiprintf_r+0x4a>
 80065ce:	fb05 3202 	mla	r2, r5, r2, r3
 80065d2:	2001      	movs	r0, #1
 80065d4:	460f      	mov	r7, r1
 80065d6:	e7a6      	b.n	8006526 <_svfiprintf_r+0xc6>
 80065d8:	2300      	movs	r3, #0
 80065da:	250a      	movs	r5, #10
 80065dc:	4619      	mov	r1, r3
 80065de:	3701      	adds	r7, #1
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	4638      	mov	r0, r7
 80065e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e8:	3a30      	subs	r2, #48	; 0x30
 80065ea:	2a09      	cmp	r2, #9
 80065ec:	d903      	bls.n	80065f6 <_svfiprintf_r+0x196>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0c8      	beq.n	8006584 <_svfiprintf_r+0x124>
 80065f2:	9105      	str	r1, [sp, #20]
 80065f4:	e7c6      	b.n	8006584 <_svfiprintf_r+0x124>
 80065f6:	fb05 2101 	mla	r1, r5, r1, r2
 80065fa:	2301      	movs	r3, #1
 80065fc:	4607      	mov	r7, r0
 80065fe:	e7f0      	b.n	80065e2 <_svfiprintf_r+0x182>
 8006600:	ab03      	add	r3, sp, #12
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4622      	mov	r2, r4
 8006606:	4b11      	ldr	r3, [pc, #68]	; (800664c <_svfiprintf_r+0x1ec>)
 8006608:	a904      	add	r1, sp, #16
 800660a:	4640      	mov	r0, r8
 800660c:	f3af 8000 	nop.w
 8006610:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006614:	4681      	mov	r9, r0
 8006616:	d1d6      	bne.n	80065c6 <_svfiprintf_r+0x166>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	065b      	lsls	r3, r3, #25
 800661c:	f53f af35 	bmi.w	800648a <_svfiprintf_r+0x2a>
 8006620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006622:	b01d      	add	sp, #116	; 0x74
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	ab03      	add	r3, sp, #12
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4622      	mov	r2, r4
 800662e:	4b07      	ldr	r3, [pc, #28]	; (800664c <_svfiprintf_r+0x1ec>)
 8006630:	a904      	add	r1, sp, #16
 8006632:	4640      	mov	r0, r8
 8006634:	f000 f882 	bl	800673c <_printf_i>
 8006638:	e7ea      	b.n	8006610 <_svfiprintf_r+0x1b0>
 800663a:	bf00      	nop
 800663c:	08007ed0 	.word	0x08007ed0
 8006640:	08007ed6 	.word	0x08007ed6
 8006644:	08007eda 	.word	0x08007eda
 8006648:	00000000 	.word	0x00000000
 800664c:	080063ad 	.word	0x080063ad

08006650 <_printf_common>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	4691      	mov	r9, r2
 8006656:	461f      	mov	r7, r3
 8006658:	688a      	ldr	r2, [r1, #8]
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	4606      	mov	r6, r0
 800665e:	4293      	cmp	r3, r2
 8006660:	bfb8      	it	lt
 8006662:	4613      	movlt	r3, r2
 8006664:	f8c9 3000 	str.w	r3, [r9]
 8006668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800666c:	460c      	mov	r4, r1
 800666e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006672:	b112      	cbz	r2, 800667a <_printf_common+0x2a>
 8006674:	3301      	adds	r3, #1
 8006676:	f8c9 3000 	str.w	r3, [r9]
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	0699      	lsls	r1, r3, #26
 800667e:	bf42      	ittt	mi
 8006680:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006684:	3302      	addmi	r3, #2
 8006686:	f8c9 3000 	strmi.w	r3, [r9]
 800668a:	6825      	ldr	r5, [r4, #0]
 800668c:	f015 0506 	ands.w	r5, r5, #6
 8006690:	d107      	bne.n	80066a2 <_printf_common+0x52>
 8006692:	f104 0a19 	add.w	sl, r4, #25
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	f8d9 2000 	ldr.w	r2, [r9]
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	42ab      	cmp	r3, r5
 80066a0:	dc29      	bgt.n	80066f6 <_printf_common+0xa6>
 80066a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	3300      	adds	r3, #0
 80066aa:	bf18      	it	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	0692      	lsls	r2, r2, #26
 80066b0:	d42e      	bmi.n	8006710 <_printf_common+0xc0>
 80066b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b6:	4639      	mov	r1, r7
 80066b8:	4630      	mov	r0, r6
 80066ba:	47c0      	blx	r8
 80066bc:	3001      	adds	r0, #1
 80066be:	d021      	beq.n	8006704 <_printf_common+0xb4>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	68e5      	ldr	r5, [r4, #12]
 80066c4:	f003 0306 	and.w	r3, r3, #6
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	bf18      	it	ne
 80066cc:	2500      	movne	r5, #0
 80066ce:	f8d9 2000 	ldr.w	r2, [r9]
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	bf08      	it	eq
 80066d8:	1aad      	subeq	r5, r5, r2
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	bf08      	it	eq
 80066e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e4:	4293      	cmp	r3, r2
 80066e6:	bfc4      	itt	gt
 80066e8:	1a9b      	subgt	r3, r3, r2
 80066ea:	18ed      	addgt	r5, r5, r3
 80066ec:	341a      	adds	r4, #26
 80066ee:	454d      	cmp	r5, r9
 80066f0:	d11a      	bne.n	8006728 <_printf_common+0xd8>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e008      	b.n	8006708 <_printf_common+0xb8>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4652      	mov	r2, sl
 80066fa:	4639      	mov	r1, r7
 80066fc:	4630      	mov	r0, r6
 80066fe:	47c0      	blx	r8
 8006700:	3001      	adds	r0, #1
 8006702:	d103      	bne.n	800670c <_printf_common+0xbc>
 8006704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	3501      	adds	r5, #1
 800670e:	e7c2      	b.n	8006696 <_printf_common+0x46>
 8006710:	2030      	movs	r0, #48	; 0x30
 8006712:	18e1      	adds	r1, r4, r3
 8006714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800671e:	4422      	add	r2, r4
 8006720:	3302      	adds	r3, #2
 8006722:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006726:	e7c4      	b.n	80066b2 <_printf_common+0x62>
 8006728:	2301      	movs	r3, #1
 800672a:	4622      	mov	r2, r4
 800672c:	4639      	mov	r1, r7
 800672e:	4630      	mov	r0, r6
 8006730:	47c0      	blx	r8
 8006732:	3001      	adds	r0, #1
 8006734:	d0e6      	beq.n	8006704 <_printf_common+0xb4>
 8006736:	f109 0901 	add.w	r9, r9, #1
 800673a:	e7d8      	b.n	80066ee <_printf_common+0x9e>

0800673c <_printf_i>:
 800673c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006740:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006744:	460c      	mov	r4, r1
 8006746:	7e09      	ldrb	r1, [r1, #24]
 8006748:	b085      	sub	sp, #20
 800674a:	296e      	cmp	r1, #110	; 0x6e
 800674c:	4617      	mov	r7, r2
 800674e:	4606      	mov	r6, r0
 8006750:	4698      	mov	r8, r3
 8006752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006754:	f000 80b3 	beq.w	80068be <_printf_i+0x182>
 8006758:	d822      	bhi.n	80067a0 <_printf_i+0x64>
 800675a:	2963      	cmp	r1, #99	; 0x63
 800675c:	d036      	beq.n	80067cc <_printf_i+0x90>
 800675e:	d80a      	bhi.n	8006776 <_printf_i+0x3a>
 8006760:	2900      	cmp	r1, #0
 8006762:	f000 80b9 	beq.w	80068d8 <_printf_i+0x19c>
 8006766:	2958      	cmp	r1, #88	; 0x58
 8006768:	f000 8083 	beq.w	8006872 <_printf_i+0x136>
 800676c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006770:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006774:	e032      	b.n	80067dc <_printf_i+0xa0>
 8006776:	2964      	cmp	r1, #100	; 0x64
 8006778:	d001      	beq.n	800677e <_printf_i+0x42>
 800677a:	2969      	cmp	r1, #105	; 0x69
 800677c:	d1f6      	bne.n	800676c <_printf_i+0x30>
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	6813      	ldr	r3, [r2, #0]
 8006782:	0605      	lsls	r5, r0, #24
 8006784:	f103 0104 	add.w	r1, r3, #4
 8006788:	d52a      	bpl.n	80067e0 <_printf_i+0xa4>
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6011      	str	r1, [r2, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da03      	bge.n	800679a <_printf_i+0x5e>
 8006792:	222d      	movs	r2, #45	; 0x2d
 8006794:	425b      	negs	r3, r3
 8006796:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800679a:	486f      	ldr	r0, [pc, #444]	; (8006958 <_printf_i+0x21c>)
 800679c:	220a      	movs	r2, #10
 800679e:	e039      	b.n	8006814 <_printf_i+0xd8>
 80067a0:	2973      	cmp	r1, #115	; 0x73
 80067a2:	f000 809d 	beq.w	80068e0 <_printf_i+0x1a4>
 80067a6:	d808      	bhi.n	80067ba <_printf_i+0x7e>
 80067a8:	296f      	cmp	r1, #111	; 0x6f
 80067aa:	d020      	beq.n	80067ee <_printf_i+0xb2>
 80067ac:	2970      	cmp	r1, #112	; 0x70
 80067ae:	d1dd      	bne.n	800676c <_printf_i+0x30>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	f043 0320 	orr.w	r3, r3, #32
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	e003      	b.n	80067c2 <_printf_i+0x86>
 80067ba:	2975      	cmp	r1, #117	; 0x75
 80067bc:	d017      	beq.n	80067ee <_printf_i+0xb2>
 80067be:	2978      	cmp	r1, #120	; 0x78
 80067c0:	d1d4      	bne.n	800676c <_printf_i+0x30>
 80067c2:	2378      	movs	r3, #120	; 0x78
 80067c4:	4865      	ldr	r0, [pc, #404]	; (800695c <_printf_i+0x220>)
 80067c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ca:	e055      	b.n	8006878 <_printf_i+0x13c>
 80067cc:	6813      	ldr	r3, [r2, #0]
 80067ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d2:	1d19      	adds	r1, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6011      	str	r1, [r2, #0]
 80067d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067dc:	2301      	movs	r3, #1
 80067de:	e08c      	b.n	80068fa <_printf_i+0x1be>
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067e6:	6011      	str	r1, [r2, #0]
 80067e8:	bf18      	it	ne
 80067ea:	b21b      	sxthne	r3, r3
 80067ec:	e7cf      	b.n	800678e <_printf_i+0x52>
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	6825      	ldr	r5, [r4, #0]
 80067f2:	1d18      	adds	r0, r3, #4
 80067f4:	6010      	str	r0, [r2, #0]
 80067f6:	0628      	lsls	r0, r5, #24
 80067f8:	d501      	bpl.n	80067fe <_printf_i+0xc2>
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	e002      	b.n	8006804 <_printf_i+0xc8>
 80067fe:	0668      	lsls	r0, r5, #25
 8006800:	d5fb      	bpl.n	80067fa <_printf_i+0xbe>
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	296f      	cmp	r1, #111	; 0x6f
 8006806:	bf14      	ite	ne
 8006808:	220a      	movne	r2, #10
 800680a:	2208      	moveq	r2, #8
 800680c:	4852      	ldr	r0, [pc, #328]	; (8006958 <_printf_i+0x21c>)
 800680e:	2100      	movs	r1, #0
 8006810:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006814:	6865      	ldr	r5, [r4, #4]
 8006816:	2d00      	cmp	r5, #0
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	f2c0 8095 	blt.w	8006948 <_printf_i+0x20c>
 800681e:	6821      	ldr	r1, [r4, #0]
 8006820:	f021 0104 	bic.w	r1, r1, #4
 8006824:	6021      	str	r1, [r4, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d13d      	bne.n	80068a6 <_printf_i+0x16a>
 800682a:	2d00      	cmp	r5, #0
 800682c:	f040 808e 	bne.w	800694c <_printf_i+0x210>
 8006830:	4665      	mov	r5, ip
 8006832:	2a08      	cmp	r2, #8
 8006834:	d10b      	bne.n	800684e <_printf_i+0x112>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	07db      	lsls	r3, r3, #31
 800683a:	d508      	bpl.n	800684e <_printf_i+0x112>
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	bfde      	ittt	le
 8006844:	2330      	movle	r3, #48	; 0x30
 8006846:	f805 3c01 	strble.w	r3, [r5, #-1]
 800684a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800684e:	ebac 0305 	sub.w	r3, ip, r5
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	f8cd 8000 	str.w	r8, [sp]
 8006858:	463b      	mov	r3, r7
 800685a:	aa03      	add	r2, sp, #12
 800685c:	4621      	mov	r1, r4
 800685e:	4630      	mov	r0, r6
 8006860:	f7ff fef6 	bl	8006650 <_printf_common>
 8006864:	3001      	adds	r0, #1
 8006866:	d14d      	bne.n	8006904 <_printf_i+0x1c8>
 8006868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800686c:	b005      	add	sp, #20
 800686e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006872:	4839      	ldr	r0, [pc, #228]	; (8006958 <_printf_i+0x21c>)
 8006874:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006878:	6813      	ldr	r3, [r2, #0]
 800687a:	6821      	ldr	r1, [r4, #0]
 800687c:	1d1d      	adds	r5, r3, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6015      	str	r5, [r2, #0]
 8006882:	060a      	lsls	r2, r1, #24
 8006884:	d50b      	bpl.n	800689e <_printf_i+0x162>
 8006886:	07ca      	lsls	r2, r1, #31
 8006888:	bf44      	itt	mi
 800688a:	f041 0120 	orrmi.w	r1, r1, #32
 800688e:	6021      	strmi	r1, [r4, #0]
 8006890:	b91b      	cbnz	r3, 800689a <_printf_i+0x15e>
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	f022 0220 	bic.w	r2, r2, #32
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	2210      	movs	r2, #16
 800689c:	e7b7      	b.n	800680e <_printf_i+0xd2>
 800689e:	064d      	lsls	r5, r1, #25
 80068a0:	bf48      	it	mi
 80068a2:	b29b      	uxthmi	r3, r3
 80068a4:	e7ef      	b.n	8006886 <_printf_i+0x14a>
 80068a6:	4665      	mov	r5, ip
 80068a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80068ac:	fb02 3311 	mls	r3, r2, r1, r3
 80068b0:	5cc3      	ldrb	r3, [r0, r3]
 80068b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068b6:	460b      	mov	r3, r1
 80068b8:	2900      	cmp	r1, #0
 80068ba:	d1f5      	bne.n	80068a8 <_printf_i+0x16c>
 80068bc:	e7b9      	b.n	8006832 <_printf_i+0xf6>
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	6825      	ldr	r5, [r4, #0]
 80068c2:	1d18      	adds	r0, r3, #4
 80068c4:	6961      	ldr	r1, [r4, #20]
 80068c6:	6010      	str	r0, [r2, #0]
 80068c8:	0628      	lsls	r0, r5, #24
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	d501      	bpl.n	80068d2 <_printf_i+0x196>
 80068ce:	6019      	str	r1, [r3, #0]
 80068d0:	e002      	b.n	80068d8 <_printf_i+0x19c>
 80068d2:	066a      	lsls	r2, r5, #25
 80068d4:	d5fb      	bpl.n	80068ce <_printf_i+0x192>
 80068d6:	8019      	strh	r1, [r3, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	4665      	mov	r5, ip
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	e7b9      	b.n	8006854 <_printf_i+0x118>
 80068e0:	6813      	ldr	r3, [r2, #0]
 80068e2:	1d19      	adds	r1, r3, #4
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	681d      	ldr	r5, [r3, #0]
 80068e8:	6862      	ldr	r2, [r4, #4]
 80068ea:	2100      	movs	r1, #0
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f837 	bl	8006960 <memchr>
 80068f2:	b108      	cbz	r0, 80068f8 <_printf_i+0x1bc>
 80068f4:	1b40      	subs	r0, r0, r5
 80068f6:	6060      	str	r0, [r4, #4]
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	6123      	str	r3, [r4, #16]
 80068fc:	2300      	movs	r3, #0
 80068fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006902:	e7a7      	b.n	8006854 <_printf_i+0x118>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	462a      	mov	r2, r5
 8006908:	4639      	mov	r1, r7
 800690a:	4630      	mov	r0, r6
 800690c:	47c0      	blx	r8
 800690e:	3001      	adds	r0, #1
 8006910:	d0aa      	beq.n	8006868 <_printf_i+0x12c>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	079b      	lsls	r3, r3, #30
 8006916:	d413      	bmi.n	8006940 <_printf_i+0x204>
 8006918:	68e0      	ldr	r0, [r4, #12]
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	4298      	cmp	r0, r3
 800691e:	bfb8      	it	lt
 8006920:	4618      	movlt	r0, r3
 8006922:	e7a3      	b.n	800686c <_printf_i+0x130>
 8006924:	2301      	movs	r3, #1
 8006926:	464a      	mov	r2, r9
 8006928:	4639      	mov	r1, r7
 800692a:	4630      	mov	r0, r6
 800692c:	47c0      	blx	r8
 800692e:	3001      	adds	r0, #1
 8006930:	d09a      	beq.n	8006868 <_printf_i+0x12c>
 8006932:	3501      	adds	r5, #1
 8006934:	68e3      	ldr	r3, [r4, #12]
 8006936:	9a03      	ldr	r2, [sp, #12]
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	42ab      	cmp	r3, r5
 800693c:	dcf2      	bgt.n	8006924 <_printf_i+0x1e8>
 800693e:	e7eb      	b.n	8006918 <_printf_i+0x1dc>
 8006940:	2500      	movs	r5, #0
 8006942:	f104 0919 	add.w	r9, r4, #25
 8006946:	e7f5      	b.n	8006934 <_printf_i+0x1f8>
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ac      	bne.n	80068a6 <_printf_i+0x16a>
 800694c:	7803      	ldrb	r3, [r0, #0]
 800694e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006956:	e76c      	b.n	8006832 <_printf_i+0xf6>
 8006958:	08007ee1 	.word	0x08007ee1
 800695c:	08007ef2 	.word	0x08007ef2

08006960 <memchr>:
 8006960:	b510      	push	{r4, lr}
 8006962:	b2c9      	uxtb	r1, r1
 8006964:	4402      	add	r2, r0
 8006966:	4290      	cmp	r0, r2
 8006968:	4603      	mov	r3, r0
 800696a:	d101      	bne.n	8006970 <memchr+0x10>
 800696c:	2300      	movs	r3, #0
 800696e:	e003      	b.n	8006978 <memchr+0x18>
 8006970:	781c      	ldrb	r4, [r3, #0]
 8006972:	3001      	adds	r0, #1
 8006974:	428c      	cmp	r4, r1
 8006976:	d1f6      	bne.n	8006966 <memchr+0x6>
 8006978:	4618      	mov	r0, r3
 800697a:	bd10      	pop	{r4, pc}

0800697c <memcpy>:
 800697c:	b510      	push	{r4, lr}
 800697e:	1e43      	subs	r3, r0, #1
 8006980:	440a      	add	r2, r1
 8006982:	4291      	cmp	r1, r2
 8006984:	d100      	bne.n	8006988 <memcpy+0xc>
 8006986:	bd10      	pop	{r4, pc}
 8006988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006990:	e7f7      	b.n	8006982 <memcpy+0x6>

08006992 <memmove>:
 8006992:	4288      	cmp	r0, r1
 8006994:	b510      	push	{r4, lr}
 8006996:	eb01 0302 	add.w	r3, r1, r2
 800699a:	d807      	bhi.n	80069ac <memmove+0x1a>
 800699c:	1e42      	subs	r2, r0, #1
 800699e:	4299      	cmp	r1, r3
 80069a0:	d00a      	beq.n	80069b8 <memmove+0x26>
 80069a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069aa:	e7f8      	b.n	800699e <memmove+0xc>
 80069ac:	4283      	cmp	r3, r0
 80069ae:	d9f5      	bls.n	800699c <memmove+0xa>
 80069b0:	1881      	adds	r1, r0, r2
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	42d3      	cmn	r3, r2
 80069b6:	d100      	bne.n	80069ba <memmove+0x28>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069c2:	e7f7      	b.n	80069b4 <memmove+0x22>

080069c4 <_free_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4605      	mov	r5, r0
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d043      	beq.n	8006a54 <_free_r+0x90>
 80069cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d0:	1f0c      	subs	r4, r1, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bfb8      	it	lt
 80069d6:	18e4      	addlt	r4, r4, r3
 80069d8:	f000 f8d0 	bl	8006b7c <__malloc_lock>
 80069dc:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <_free_r+0x94>)
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	4610      	mov	r0, r2
 80069e2:	b933      	cbnz	r3, 80069f2 <_free_r+0x2e>
 80069e4:	6063      	str	r3, [r4, #4]
 80069e6:	6014      	str	r4, [r2, #0]
 80069e8:	4628      	mov	r0, r5
 80069ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ee:	f000 b8c6 	b.w	8006b7e <__malloc_unlock>
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	d90b      	bls.n	8006a0e <_free_r+0x4a>
 80069f6:	6821      	ldr	r1, [r4, #0]
 80069f8:	1862      	adds	r2, r4, r1
 80069fa:	4293      	cmp	r3, r2
 80069fc:	bf01      	itttt	eq
 80069fe:	681a      	ldreq	r2, [r3, #0]
 8006a00:	685b      	ldreq	r3, [r3, #4]
 8006a02:	1852      	addeq	r2, r2, r1
 8006a04:	6022      	streq	r2, [r4, #0]
 8006a06:	6063      	str	r3, [r4, #4]
 8006a08:	6004      	str	r4, [r0, #0]
 8006a0a:	e7ed      	b.n	80069e8 <_free_r+0x24>
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	b10a      	cbz	r2, 8006a16 <_free_r+0x52>
 8006a12:	42a2      	cmp	r2, r4
 8006a14:	d9fa      	bls.n	8006a0c <_free_r+0x48>
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	1858      	adds	r0, r3, r1
 8006a1a:	42a0      	cmp	r0, r4
 8006a1c:	d10b      	bne.n	8006a36 <_free_r+0x72>
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	4401      	add	r1, r0
 8006a22:	1858      	adds	r0, r3, r1
 8006a24:	4282      	cmp	r2, r0
 8006a26:	6019      	str	r1, [r3, #0]
 8006a28:	d1de      	bne.n	80069e8 <_free_r+0x24>
 8006a2a:	6810      	ldr	r0, [r2, #0]
 8006a2c:	6852      	ldr	r2, [r2, #4]
 8006a2e:	4401      	add	r1, r0
 8006a30:	6019      	str	r1, [r3, #0]
 8006a32:	605a      	str	r2, [r3, #4]
 8006a34:	e7d8      	b.n	80069e8 <_free_r+0x24>
 8006a36:	d902      	bls.n	8006a3e <_free_r+0x7a>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	e7d4      	b.n	80069e8 <_free_r+0x24>
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	1821      	adds	r1, r4, r0
 8006a42:	428a      	cmp	r2, r1
 8006a44:	bf01      	itttt	eq
 8006a46:	6811      	ldreq	r1, [r2, #0]
 8006a48:	6852      	ldreq	r2, [r2, #4]
 8006a4a:	1809      	addeq	r1, r1, r0
 8006a4c:	6021      	streq	r1, [r4, #0]
 8006a4e:	6062      	str	r2, [r4, #4]
 8006a50:	605c      	str	r4, [r3, #4]
 8006a52:	e7c9      	b.n	80069e8 <_free_r+0x24>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	200000f0 	.word	0x200000f0

08006a5c <_malloc_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	1ccd      	adds	r5, r1, #3
 8006a60:	f025 0503 	bic.w	r5, r5, #3
 8006a64:	3508      	adds	r5, #8
 8006a66:	2d0c      	cmp	r5, #12
 8006a68:	bf38      	it	cc
 8006a6a:	250c      	movcc	r5, #12
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	db01      	blt.n	8006a76 <_malloc_r+0x1a>
 8006a72:	42a9      	cmp	r1, r5
 8006a74:	d903      	bls.n	8006a7e <_malloc_r+0x22>
 8006a76:	230c      	movs	r3, #12
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	f000 f87d 	bl	8006b7c <__malloc_lock>
 8006a82:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <_malloc_r+0xac>)
 8006a84:	6814      	ldr	r4, [r2, #0]
 8006a86:	4621      	mov	r1, r4
 8006a88:	b991      	cbnz	r1, 8006ab0 <_malloc_r+0x54>
 8006a8a:	4c20      	ldr	r4, [pc, #128]	; (8006b0c <_malloc_r+0xb0>)
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	b91b      	cbnz	r3, 8006a98 <_malloc_r+0x3c>
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f863 	bl	8006b5c <_sbrk_r>
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f85e 	bl	8006b5c <_sbrk_r>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d124      	bne.n	8006aee <_malloc_r+0x92>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	f000 f868 	bl	8006b7e <__malloc_unlock>
 8006aae:	e7e4      	b.n	8006a7a <_malloc_r+0x1e>
 8006ab0:	680b      	ldr	r3, [r1, #0]
 8006ab2:	1b5b      	subs	r3, r3, r5
 8006ab4:	d418      	bmi.n	8006ae8 <_malloc_r+0x8c>
 8006ab6:	2b0b      	cmp	r3, #11
 8006ab8:	d90f      	bls.n	8006ada <_malloc_r+0x7e>
 8006aba:	600b      	str	r3, [r1, #0]
 8006abc:	18cc      	adds	r4, r1, r3
 8006abe:	50cd      	str	r5, [r1, r3]
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 f85c 	bl	8006b7e <__malloc_unlock>
 8006ac6:	f104 000b 	add.w	r0, r4, #11
 8006aca:	1d23      	adds	r3, r4, #4
 8006acc:	f020 0007 	bic.w	r0, r0, #7
 8006ad0:	1ac3      	subs	r3, r0, r3
 8006ad2:	d0d3      	beq.n	8006a7c <_malloc_r+0x20>
 8006ad4:	425a      	negs	r2, r3
 8006ad6:	50e2      	str	r2, [r4, r3]
 8006ad8:	e7d0      	b.n	8006a7c <_malloc_r+0x20>
 8006ada:	684b      	ldr	r3, [r1, #4]
 8006adc:	428c      	cmp	r4, r1
 8006ade:	bf16      	itet	ne
 8006ae0:	6063      	strne	r3, [r4, #4]
 8006ae2:	6013      	streq	r3, [r2, #0]
 8006ae4:	460c      	movne	r4, r1
 8006ae6:	e7eb      	b.n	8006ac0 <_malloc_r+0x64>
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6849      	ldr	r1, [r1, #4]
 8006aec:	e7cc      	b.n	8006a88 <_malloc_r+0x2c>
 8006aee:	1cc4      	adds	r4, r0, #3
 8006af0:	f024 0403 	bic.w	r4, r4, #3
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d005      	beq.n	8006b04 <_malloc_r+0xa8>
 8006af8:	1a21      	subs	r1, r4, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 f82e 	bl	8006b5c <_sbrk_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d0cf      	beq.n	8006aa4 <_malloc_r+0x48>
 8006b04:	6025      	str	r5, [r4, #0]
 8006b06:	e7db      	b.n	8006ac0 <_malloc_r+0x64>
 8006b08:	200000f0 	.word	0x200000f0
 8006b0c:	200000f4 	.word	0x200000f4

08006b10 <_realloc_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	4607      	mov	r7, r0
 8006b14:	4614      	mov	r4, r2
 8006b16:	460e      	mov	r6, r1
 8006b18:	b921      	cbnz	r1, 8006b24 <_realloc_r+0x14>
 8006b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b1e:	4611      	mov	r1, r2
 8006b20:	f7ff bf9c 	b.w	8006a5c <_malloc_r>
 8006b24:	b922      	cbnz	r2, 8006b30 <_realloc_r+0x20>
 8006b26:	f7ff ff4d 	bl	80069c4 <_free_r>
 8006b2a:	4625      	mov	r5, r4
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	f000 f826 	bl	8006b80 <_malloc_usable_size_r>
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d20f      	bcs.n	8006b58 <_realloc_r+0x48>
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f7ff ff8e 	bl	8006a5c <_malloc_r>
 8006b40:	4605      	mov	r5, r0
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d0f2      	beq.n	8006b2c <_realloc_r+0x1c>
 8006b46:	4631      	mov	r1, r6
 8006b48:	4622      	mov	r2, r4
 8006b4a:	f7ff ff17 	bl	800697c <memcpy>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff ff37 	bl	80069c4 <_free_r>
 8006b56:	e7e9      	b.n	8006b2c <_realloc_r+0x1c>
 8006b58:	4635      	mov	r5, r6
 8006b5a:	e7e7      	b.n	8006b2c <_realloc_r+0x1c>

08006b5c <_sbrk_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4c05      	ldr	r4, [pc, #20]	; (8006b78 <_sbrk_r+0x1c>)
 8006b62:	4605      	mov	r5, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	f7fd fdd4 	bl	8004714 <_sbrk>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_sbrk_r+0x1a>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_sbrk_r+0x1a>
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	200001d4 	.word	0x200001d4

08006b7c <__malloc_lock>:
 8006b7c:	4770      	bx	lr

08006b7e <__malloc_unlock>:
 8006b7e:	4770      	bx	lr

08006b80 <_malloc_usable_size_r>:
 8006b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b84:	1f18      	subs	r0, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bfbc      	itt	lt
 8006b8a:	580b      	ldrlt	r3, [r1, r0]
 8006b8c:	18c0      	addlt	r0, r0, r3
 8006b8e:	4770      	bx	lr

08006b90 <pow>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	b08f      	sub	sp, #60	; 0x3c
 8006b96:	461d      	mov	r5, r3
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	f000 f953 	bl	8006e48 <__ieee754_pow>
 8006ba2:	4fa1      	ldr	r7, [pc, #644]	; (8006e28 <pow+0x298>)
 8006ba4:	e9cd 0100 	strd	r0, r1, [sp]
 8006ba8:	f997 3000 	ldrsb.w	r3, [r7]
 8006bac:	463e      	mov	r6, r7
 8006bae:	9302      	str	r3, [sp, #8]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	d05f      	beq.n	8006c74 <pow+0xe4>
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f7f9 ff26 	bl	8000a0c <__aeabi_dcmpun>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d156      	bne.n	8006c74 <pow+0xe4>
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	464b      	mov	r3, r9
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 ff1d 	bl	8000a0c <__aeabi_dcmpun>
 8006bd2:	9003      	str	r0, [sp, #12]
 8006bd4:	b1e8      	cbz	r0, 8006c12 <pow+0x82>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4629      	mov	r1, r5
 8006bde:	f7f9 fee3 	bl	80009a8 <__aeabi_dcmpeq>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d046      	beq.n	8006c74 <pow+0xe4>
 8006be6:	2301      	movs	r3, #1
 8006be8:	2200      	movs	r2, #0
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	4b8f      	ldr	r3, [pc, #572]	; (8006e2c <pow+0x29c>)
 8006bee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	4b8e      	ldr	r3, [pc, #568]	; (8006e30 <pow+0x2a0>)
 8006bf6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006bfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006bfe:	9b02      	ldr	r3, [sp, #8]
 8006c00:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d031      	beq.n	8006c6c <pow+0xdc>
 8006c08:	a804      	add	r0, sp, #16
 8006c0a:	f000 fedd 	bl	80079c8 <matherr>
 8006c0e:	bb38      	cbnz	r0, 8006c60 <pow+0xd0>
 8006c10:	e058      	b.n	8006cc4 <pow+0x134>
 8006c12:	f04f 0a00 	mov.w	sl, #0
 8006c16:	f04f 0b00 	mov.w	fp, #0
 8006c1a:	4652      	mov	r2, sl
 8006c1c:	465b      	mov	r3, fp
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7f9 fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d051      	beq.n	8006cce <pow+0x13e>
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7f9 feb9 	bl	80009a8 <__aeabi_dcmpeq>
 8006c36:	4606      	mov	r6, r0
 8006c38:	b308      	cbz	r0, 8006c7e <pow+0xee>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	; (8006e2c <pow+0x29c>)
 8006c40:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c4e:	9b02      	ldr	r3, [sp, #8]
 8006c50:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0d7      	beq.n	8006c08 <pow+0x78>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4b75      	ldr	r3, [pc, #468]	; (8006e30 <pow+0x2a0>)
 8006c5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c62:	b11b      	cbz	r3, 8006c6c <pow+0xdc>
 8006c64:	f7ff fb50 	bl	8006308 <__errno>
 8006c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6a:	6003      	str	r3, [r0, #0]
 8006c6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006c70:	e9cd 3400 	strd	r3, r4, [sp]
 8006c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c78:	b00f      	add	sp, #60	; 0x3c
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f000 fe9b 	bl	80079bc <finite>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0f4      	beq.n	8006c74 <pow+0xe4>
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 fe93 	bl	80009bc <__aeabi_dcmplt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0ec      	beq.n	8006c74 <pow+0xe4>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	4b63      	ldr	r3, [pc, #396]	; (8006e2c <pow+0x29c>)
 8006ca0:	960c      	str	r6, [sp, #48]	; 0x30
 8006ca2:	9305      	str	r3, [sp, #20]
 8006ca4:	f997 3000 	ldrsb.w	r3, [r7]
 8006ca8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006cac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <pow+0x128>
 8006cb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006cb6:	e7a7      	b.n	8006c08 <pow+0x78>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	495e      	ldr	r1, [pc, #376]	; (8006e34 <pow+0x2a4>)
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006cc2:	d1a1      	bne.n	8006c08 <pow+0x78>
 8006cc4:	f7ff fb20 	bl	8006308 <__errno>
 8006cc8:	2321      	movs	r3, #33	; 0x21
 8006cca:	6003      	str	r3, [r0, #0]
 8006ccc:	e7c8      	b.n	8006c60 <pow+0xd0>
 8006cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cd2:	f000 fe73 	bl	80079bc <finite>
 8006cd6:	9002      	str	r0, [sp, #8]
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d177      	bne.n	8006dcc <pow+0x23c>
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4649      	mov	r1, r9
 8006ce0:	f000 fe6c 	bl	80079bc <finite>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d071      	beq.n	8006dcc <pow+0x23c>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	f000 fe66 	bl	80079bc <finite>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d06b      	beq.n	8006dcc <pow+0x23c>
 8006cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f7f9 fe86 	bl	8000a0c <__aeabi_dcmpun>
 8006d00:	f997 7000 	ldrsb.w	r7, [r7]
 8006d04:	4b49      	ldr	r3, [pc, #292]	; (8006e2c <pow+0x29c>)
 8006d06:	b1a0      	cbz	r0, 8006d32 <pow+0x1a2>
 8006d08:	2201      	movs	r2, #1
 8006d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006d14:	930c      	str	r3, [sp, #48]	; 0x30
 8006d16:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006d1a:	2f00      	cmp	r7, #0
 8006d1c:	d0c9      	beq.n	8006cb2 <pow+0x122>
 8006d1e:	4652      	mov	r2, sl
 8006d20:	465b      	mov	r3, fp
 8006d22:	4650      	mov	r0, sl
 8006d24:	4659      	mov	r1, fp
 8006d26:	f7f9 fd01 	bl	800072c <__aeabi_ddiv>
 8006d2a:	2f02      	cmp	r7, #2
 8006d2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d30:	e7c7      	b.n	8006cc2 <pow+0x132>
 8006d32:	2203      	movs	r2, #3
 8006d34:	900c      	str	r0, [sp, #48]	; 0x30
 8006d36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <pow+0x2a8>)
 8006d42:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006d46:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006d4a:	f7f9 fbc5 	bl	80004d8 <__aeabi_dmul>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	460d      	mov	r5, r1
 8006d52:	bb17      	cbnz	r7, 8006d9a <pow+0x20a>
 8006d54:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006d58:	4b38      	ldr	r3, [pc, #224]	; (8006e3c <pow+0x2ac>)
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d60:	4649      	mov	r1, r9
 8006d62:	4652      	mov	r2, sl
 8006d64:	465b      	mov	r3, fp
 8006d66:	f7f9 fe29 	bl	80009bc <__aeabi_dcmplt>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d054      	beq.n	8006e18 <pow+0x288>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f000 fe31 	bl	80079d8 <rint>
 8006d76:	4622      	mov	r2, r4
 8006d78:	462b      	mov	r3, r5
 8006d7a:	f7f9 fe15 	bl	80009a8 <__aeabi_dcmpeq>
 8006d7e:	b920      	cbnz	r0, 8006d8a <pow+0x1fa>
 8006d80:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006d84:	4b2e      	ldr	r3, [pc, #184]	; (8006e40 <pow+0x2b0>)
 8006d86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d8a:	f996 3000 	ldrsb.w	r3, [r6]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d142      	bne.n	8006e18 <pow+0x288>
 8006d92:	f7ff fab9 	bl	8006308 <__errno>
 8006d96:	2322      	movs	r3, #34	; 0x22
 8006d98:	e797      	b.n	8006cca <pow+0x13a>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <pow+0x2b4>)
 8006d9e:	4640      	mov	r0, r8
 8006da0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006da4:	4649      	mov	r1, r9
 8006da6:	4652      	mov	r2, sl
 8006da8:	465b      	mov	r3, fp
 8006daa:	f7f9 fe07 	bl	80009bc <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0eb      	beq.n	8006d8a <pow+0x1fa>
 8006db2:	4620      	mov	r0, r4
 8006db4:	4629      	mov	r1, r5
 8006db6:	f000 fe0f 	bl	80079d8 <rint>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	f7f9 fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1e1      	bne.n	8006d8a <pow+0x1fa>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <pow+0x2a4>)
 8006dca:	e7dc      	b.n	8006d86 <pow+0x1f6>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f7f9 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	f43f af4b 	beq.w	8006c74 <pow+0xe4>
 8006dde:	4640      	mov	r0, r8
 8006de0:	4649      	mov	r1, r9
 8006de2:	f000 fdeb 	bl	80079bc <finite>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f af44 	beq.w	8006c74 <pow+0xe4>
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	f000 fde4 	bl	80079bc <finite>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f43f af3d 	beq.w	8006c74 <pow+0xe4>
 8006dfa:	2304      	movs	r3, #4
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <pow+0x29c>)
 8006e00:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006e04:	9305      	str	r3, [sp, #20]
 8006e06:	2300      	movs	r3, #0
 8006e08:	2400      	movs	r4, #0
 8006e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006e12:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006e16:	e7b8      	b.n	8006d8a <pow+0x1fa>
 8006e18:	a804      	add	r0, sp, #16
 8006e1a:	f000 fdd5 	bl	80079c8 <matherr>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f47f af1e 	bne.w	8006c60 <pow+0xd0>
 8006e24:	e7b5      	b.n	8006d92 <pow+0x202>
 8006e26:	bf00      	nop
 8006e28:	2000008c 	.word	0x2000008c
 8006e2c:	08007f03 	.word	0x08007f03
 8006e30:	3ff00000 	.word	0x3ff00000
 8006e34:	fff00000 	.word	0xfff00000
 8006e38:	3fe00000 	.word	0x3fe00000
 8006e3c:	47efffff 	.word	0x47efffff
 8006e40:	c7efffff 	.word	0xc7efffff
 8006e44:	7ff00000 	.word	0x7ff00000

08006e48 <__ieee754_pow>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	b091      	sub	sp, #68	; 0x44
 8006e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e52:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8006e56:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006e5a:	ea55 0302 	orrs.w	r3, r5, r2
 8006e5e:	4607      	mov	r7, r0
 8006e60:	4688      	mov	r8, r1
 8006e62:	f000 84b7 	beq.w	80077d4 <__ieee754_pow+0x98c>
 8006e66:	4b80      	ldr	r3, [pc, #512]	; (8007068 <__ieee754_pow+0x220>)
 8006e68:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	4689      	mov	r9, r1
 8006e70:	4682      	mov	sl, r0
 8006e72:	dc09      	bgt.n	8006e88 <__ieee754_pow+0x40>
 8006e74:	d103      	bne.n	8006e7e <__ieee754_pow+0x36>
 8006e76:	b938      	cbnz	r0, 8006e88 <__ieee754_pow+0x40>
 8006e78:	42a5      	cmp	r5, r4
 8006e7a:	dc0d      	bgt.n	8006e98 <__ieee754_pow+0x50>
 8006e7c:	e001      	b.n	8006e82 <__ieee754_pow+0x3a>
 8006e7e:	429d      	cmp	r5, r3
 8006e80:	dc02      	bgt.n	8006e88 <__ieee754_pow+0x40>
 8006e82:	429d      	cmp	r5, r3
 8006e84:	d10e      	bne.n	8006ea4 <__ieee754_pow+0x5c>
 8006e86:	b16a      	cbz	r2, 8006ea4 <__ieee754_pow+0x5c>
 8006e88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e90:	ea54 030a 	orrs.w	r3, r4, sl
 8006e94:	f000 849e 	beq.w	80077d4 <__ieee754_pow+0x98c>
 8006e98:	4874      	ldr	r0, [pc, #464]	; (800706c <__ieee754_pow+0x224>)
 8006e9a:	b011      	add	sp, #68	; 0x44
 8006e9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	f000 bd94 	b.w	80079cc <nan>
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	da53      	bge.n	8006f52 <__ieee754_pow+0x10a>
 8006eaa:	4b71      	ldr	r3, [pc, #452]	; (8007070 <__ieee754_pow+0x228>)
 8006eac:	429d      	cmp	r5, r3
 8006eae:	dc4e      	bgt.n	8006f4e <__ieee754_pow+0x106>
 8006eb0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006eb4:	429d      	cmp	r5, r3
 8006eb6:	dd4c      	ble.n	8006f52 <__ieee754_pow+0x10a>
 8006eb8:	152b      	asrs	r3, r5, #20
 8006eba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ebe:	2b14      	cmp	r3, #20
 8006ec0:	dd28      	ble.n	8006f14 <__ieee754_pow+0xcc>
 8006ec2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006ec6:	fa22 f103 	lsr.w	r1, r2, r3
 8006eca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d13f      	bne.n	8006f52 <__ieee754_pow+0x10a>
 8006ed2:	f001 0101 	and.w	r1, r1, #1
 8006ed6:	f1c1 0302 	rsb	r3, r1, #2
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	d15c      	bne.n	8006f9a <__ieee754_pow+0x152>
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <__ieee754_pow+0x220>)
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	d126      	bne.n	8006f34 <__ieee754_pow+0xec>
 8006ee6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006eea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006eee:	ea53 030a 	orrs.w	r3, r3, sl
 8006ef2:	f000 846f 	beq.w	80077d4 <__ieee754_pow+0x98c>
 8006ef6:	4b5f      	ldr	r3, [pc, #380]	; (8007074 <__ieee754_pow+0x22c>)
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	dd2c      	ble.n	8006f56 <__ieee754_pow+0x10e>
 8006efc:	2e00      	cmp	r6, #0
 8006efe:	f280 846f 	bge.w	80077e0 <__ieee754_pow+0x998>
 8006f02:	f04f 0b00 	mov.w	fp, #0
 8006f06:	f04f 0c00 	mov.w	ip, #0
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	4661      	mov	r1, ip
 8006f0e:	b011      	add	sp, #68	; 0x44
 8006f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d13e      	bne.n	8006f96 <__ieee754_pow+0x14e>
 8006f18:	f1c3 0314 	rsb	r3, r3, #20
 8006f1c:	fa45 f103 	asr.w	r1, r5, r3
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	f040 8463 	bne.w	80077f0 <__ieee754_pow+0x9a8>
 8006f2a:	f001 0101 	and.w	r1, r1, #1
 8006f2e:	f1c1 0302 	rsb	r3, r1, #2
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4b50      	ldr	r3, [pc, #320]	; (8007078 <__ieee754_pow+0x230>)
 8006f36:	429d      	cmp	r5, r3
 8006f38:	d114      	bne.n	8006f64 <__ieee754_pow+0x11c>
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	f280 8454 	bge.w	80077e8 <__ieee754_pow+0x9a0>
 8006f40:	463a      	mov	r2, r7
 8006f42:	4643      	mov	r3, r8
 8006f44:	2000      	movs	r0, #0
 8006f46:	494c      	ldr	r1, [pc, #304]	; (8007078 <__ieee754_pow+0x230>)
 8006f48:	f7f9 fbf0 	bl	800072c <__aeabi_ddiv>
 8006f4c:	e013      	b.n	8006f76 <__ieee754_pow+0x12e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e7c3      	b.n	8006eda <__ieee754_pow+0x92>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e7c1      	b.n	8006eda <__ieee754_pow+0x92>
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	dad3      	bge.n	8006f02 <__ieee754_pow+0xba>
 8006f5a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006f5e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006f62:	e7d2      	b.n	8006f0a <__ieee754_pow+0xc2>
 8006f64:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006f68:	d108      	bne.n	8006f7c <__ieee754_pow+0x134>
 8006f6a:	463a      	mov	r2, r7
 8006f6c:	4643      	mov	r3, r8
 8006f6e:	4638      	mov	r0, r7
 8006f70:	4641      	mov	r1, r8
 8006f72:	f7f9 fab1 	bl	80004d8 <__aeabi_dmul>
 8006f76:	4683      	mov	fp, r0
 8006f78:	468c      	mov	ip, r1
 8006f7a:	e7c6      	b.n	8006f0a <__ieee754_pow+0xc2>
 8006f7c:	4b3f      	ldr	r3, [pc, #252]	; (800707c <__ieee754_pow+0x234>)
 8006f7e:	429e      	cmp	r6, r3
 8006f80:	d10b      	bne.n	8006f9a <__ieee754_pow+0x152>
 8006f82:	f1b9 0f00 	cmp.w	r9, #0
 8006f86:	db08      	blt.n	8006f9a <__ieee754_pow+0x152>
 8006f88:	4638      	mov	r0, r7
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	b011      	add	sp, #68	; 0x44
 8006f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f92:	f000 bc63 	b.w	800785c <__ieee754_sqrt>
 8006f96:	2300      	movs	r3, #0
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	f000 fd09 	bl	80079b4 <fabs>
 8006fa2:	4683      	mov	fp, r0
 8006fa4:	468c      	mov	ip, r1
 8006fa6:	f1ba 0f00 	cmp.w	sl, #0
 8006faa:	d12b      	bne.n	8007004 <__ieee754_pow+0x1bc>
 8006fac:	b124      	cbz	r4, 8006fb8 <__ieee754_pow+0x170>
 8006fae:	4b32      	ldr	r3, [pc, #200]	; (8007078 <__ieee754_pow+0x230>)
 8006fb0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d125      	bne.n	8007004 <__ieee754_pow+0x1bc>
 8006fb8:	2e00      	cmp	r6, #0
 8006fba:	da07      	bge.n	8006fcc <__ieee754_pow+0x184>
 8006fbc:	465a      	mov	r2, fp
 8006fbe:	4663      	mov	r3, ip
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	492d      	ldr	r1, [pc, #180]	; (8007078 <__ieee754_pow+0x230>)
 8006fc4:	f7f9 fbb2 	bl	800072c <__aeabi_ddiv>
 8006fc8:	4683      	mov	fp, r0
 8006fca:	468c      	mov	ip, r1
 8006fcc:	f1b9 0f00 	cmp.w	r9, #0
 8006fd0:	da9b      	bge.n	8006f0a <__ieee754_pow+0xc2>
 8006fd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006fdc:	4323      	orrs	r3, r4
 8006fde:	d108      	bne.n	8006ff2 <__ieee754_pow+0x1aa>
 8006fe0:	465a      	mov	r2, fp
 8006fe2:	4663      	mov	r3, ip
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	4661      	mov	r1, ip
 8006fe8:	f7f9 f8be 	bl	8000168 <__aeabi_dsub>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	e7aa      	b.n	8006f48 <__ieee754_pow+0x100>
 8006ff2:	9b00      	ldr	r3, [sp, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d188      	bne.n	8006f0a <__ieee754_pow+0xc2>
 8006ff8:	4658      	mov	r0, fp
 8006ffa:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006ffe:	4683      	mov	fp, r0
 8007000:	469c      	mov	ip, r3
 8007002:	e782      	b.n	8006f0a <__ieee754_pow+0xc2>
 8007004:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007008:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800700c:	930d      	str	r3, [sp, #52]	; 0x34
 800700e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007010:	9b00      	ldr	r3, [sp, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	d104      	bne.n	8007020 <__ieee754_pow+0x1d8>
 8007016:	463a      	mov	r2, r7
 8007018:	4643      	mov	r3, r8
 800701a:	4638      	mov	r0, r7
 800701c:	4641      	mov	r1, r8
 800701e:	e7e3      	b.n	8006fe8 <__ieee754_pow+0x1a0>
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <__ieee754_pow+0x238>)
 8007022:	429d      	cmp	r5, r3
 8007024:	f340 80fe 	ble.w	8007224 <__ieee754_pow+0x3dc>
 8007028:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800702c:	429d      	cmp	r5, r3
 800702e:	dd0b      	ble.n	8007048 <__ieee754_pow+0x200>
 8007030:	4b10      	ldr	r3, [pc, #64]	; (8007074 <__ieee754_pow+0x22c>)
 8007032:	429c      	cmp	r4, r3
 8007034:	dc0e      	bgt.n	8007054 <__ieee754_pow+0x20c>
 8007036:	2e00      	cmp	r6, #0
 8007038:	f6bf af63 	bge.w	8006f02 <__ieee754_pow+0xba>
 800703c:	a308      	add	r3, pc, #32	; (adr r3, 8007060 <__ieee754_pow+0x218>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	e794      	b.n	8006f72 <__ieee754_pow+0x12a>
 8007048:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <__ieee754_pow+0x23c>)
 800704a:	429c      	cmp	r4, r3
 800704c:	ddf3      	ble.n	8007036 <__ieee754_pow+0x1ee>
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <__ieee754_pow+0x230>)
 8007050:	429c      	cmp	r4, r3
 8007052:	dd19      	ble.n	8007088 <__ieee754_pow+0x240>
 8007054:	2e00      	cmp	r6, #0
 8007056:	dcf1      	bgt.n	800703c <__ieee754_pow+0x1f4>
 8007058:	e753      	b.n	8006f02 <__ieee754_pow+0xba>
 800705a:	bf00      	nop
 800705c:	f3af 8000 	nop.w
 8007060:	8800759c 	.word	0x8800759c
 8007064:	7e37e43c 	.word	0x7e37e43c
 8007068:	7ff00000 	.word	0x7ff00000
 800706c:	08007ed5 	.word	0x08007ed5
 8007070:	433fffff 	.word	0x433fffff
 8007074:	3fefffff 	.word	0x3fefffff
 8007078:	3ff00000 	.word	0x3ff00000
 800707c:	3fe00000 	.word	0x3fe00000
 8007080:	41e00000 	.word	0x41e00000
 8007084:	3feffffe 	.word	0x3feffffe
 8007088:	4661      	mov	r1, ip
 800708a:	2200      	movs	r2, #0
 800708c:	4b60      	ldr	r3, [pc, #384]	; (8007210 <__ieee754_pow+0x3c8>)
 800708e:	4658      	mov	r0, fp
 8007090:	f7f9 f86a 	bl	8000168 <__aeabi_dsub>
 8007094:	a354      	add	r3, pc, #336	; (adr r3, 80071e8 <__ieee754_pow+0x3a0>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	4604      	mov	r4, r0
 800709c:	460d      	mov	r5, r1
 800709e:	f7f9 fa1b 	bl	80004d8 <__aeabi_dmul>
 80070a2:	a353      	add	r3, pc, #332	; (adr r3, 80071f0 <__ieee754_pow+0x3a8>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	4606      	mov	r6, r0
 80070aa:	460f      	mov	r7, r1
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 fa12 	bl	80004d8 <__aeabi_dmul>
 80070b4:	2200      	movs	r2, #0
 80070b6:	4682      	mov	sl, r0
 80070b8:	468b      	mov	fp, r1
 80070ba:	4b56      	ldr	r3, [pc, #344]	; (8007214 <__ieee754_pow+0x3cc>)
 80070bc:	4620      	mov	r0, r4
 80070be:	4629      	mov	r1, r5
 80070c0:	f7f9 fa0a 	bl	80004d8 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	a14b      	add	r1, pc, #300	; (adr r1, 80071f8 <__ieee754_pow+0x3b0>)
 80070ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ce:	f7f9 f84b 	bl	8000168 <__aeabi_dsub>
 80070d2:	4622      	mov	r2, r4
 80070d4:	462b      	mov	r3, r5
 80070d6:	f7f9 f9ff 	bl	80004d8 <__aeabi_dmul>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	2000      	movs	r0, #0
 80070e0:	494d      	ldr	r1, [pc, #308]	; (8007218 <__ieee754_pow+0x3d0>)
 80070e2:	f7f9 f841 	bl	8000168 <__aeabi_dsub>
 80070e6:	4622      	mov	r2, r4
 80070e8:	462b      	mov	r3, r5
 80070ea:	4680      	mov	r8, r0
 80070ec:	4689      	mov	r9, r1
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 f9eb 	bl	80004d8 <__aeabi_dmul>
 8007102:	a33f      	add	r3, pc, #252	; (adr r3, 8007200 <__ieee754_pow+0x3b8>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f9e6 	bl	80004d8 <__aeabi_dmul>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4650      	mov	r0, sl
 8007112:	4659      	mov	r1, fp
 8007114:	f7f9 f828 	bl	8000168 <__aeabi_dsub>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 f822 	bl	800016c <__adddf3>
 8007128:	2000      	movs	r0, #0
 800712a:	468b      	mov	fp, r1
 800712c:	4682      	mov	sl, r0
 800712e:	4632      	mov	r2, r6
 8007130:	463b      	mov	r3, r7
 8007132:	f7f9 f819 	bl	8000168 <__aeabi_dsub>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4620      	mov	r0, r4
 800713c:	4629      	mov	r1, r5
 800713e:	f7f9 f813 	bl	8000168 <__aeabi_dsub>
 8007142:	9b00      	ldr	r3, [sp, #0]
 8007144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007146:	3b01      	subs	r3, #1
 8007148:	4313      	orrs	r3, r2
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	bf0c      	ite	eq
 8007150:	4c32      	ldreq	r4, [pc, #200]	; (800721c <__ieee754_pow+0x3d4>)
 8007152:	4c2f      	ldrne	r4, [pc, #188]	; (8007210 <__ieee754_pow+0x3c8>)
 8007154:	4606      	mov	r6, r0
 8007156:	e9cd 3400 	strd	r3, r4, [sp]
 800715a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800715e:	2400      	movs	r4, #0
 8007160:	460f      	mov	r7, r1
 8007162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	f7f8 fffd 	bl	8000168 <__aeabi_dsub>
 800716e:	4652      	mov	r2, sl
 8007170:	465b      	mov	r3, fp
 8007172:	f7f9 f9b1 	bl	80004d8 <__aeabi_dmul>
 8007176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	4630      	mov	r0, r6
 8007180:	4639      	mov	r1, r7
 8007182:	f7f9 f9a9 	bl	80004d8 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	f7f8 ffed 	bl	800016c <__adddf3>
 8007192:	4622      	mov	r2, r4
 8007194:	462b      	mov	r3, r5
 8007196:	4680      	mov	r8, r0
 8007198:	4689      	mov	r9, r1
 800719a:	4650      	mov	r0, sl
 800719c:	4659      	mov	r1, fp
 800719e:	f7f9 f99b 	bl	80004d8 <__aeabi_dmul>
 80071a2:	4604      	mov	r4, r0
 80071a4:	460d      	mov	r5, r1
 80071a6:	460b      	mov	r3, r1
 80071a8:	4602      	mov	r2, r0
 80071aa:	4649      	mov	r1, r9
 80071ac:	4640      	mov	r0, r8
 80071ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80071b2:	f7f8 ffdb 	bl	800016c <__adddf3>
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <__ieee754_pow+0x3d8>)
 80071b8:	4682      	mov	sl, r0
 80071ba:	4299      	cmp	r1, r3
 80071bc:	460f      	mov	r7, r1
 80071be:	460e      	mov	r6, r1
 80071c0:	f340 82e1 	ble.w	8007786 <__ieee754_pow+0x93e>
 80071c4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80071c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80071cc:	4303      	orrs	r3, r0
 80071ce:	f000 81db 	beq.w	8007588 <__ieee754_pow+0x740>
 80071d2:	a30d      	add	r3, pc, #52	; (adr r3, 8007208 <__ieee754_pow+0x3c0>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071dc:	f7f9 f97c 	bl	80004d8 <__aeabi_dmul>
 80071e0:	a309      	add	r3, pc, #36	; (adr r3, 8007208 <__ieee754_pow+0x3c0>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	e6c4      	b.n	8006f72 <__ieee754_pow+0x12a>
 80071e8:	60000000 	.word	0x60000000
 80071ec:	3ff71547 	.word	0x3ff71547
 80071f0:	f85ddf44 	.word	0xf85ddf44
 80071f4:	3e54ae0b 	.word	0x3e54ae0b
 80071f8:	55555555 	.word	0x55555555
 80071fc:	3fd55555 	.word	0x3fd55555
 8007200:	652b82fe 	.word	0x652b82fe
 8007204:	3ff71547 	.word	0x3ff71547
 8007208:	8800759c 	.word	0x8800759c
 800720c:	7e37e43c 	.word	0x7e37e43c
 8007210:	3ff00000 	.word	0x3ff00000
 8007214:	3fd00000 	.word	0x3fd00000
 8007218:	3fe00000 	.word	0x3fe00000
 800721c:	bff00000 	.word	0xbff00000
 8007220:	408fffff 	.word	0x408fffff
 8007224:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	da08      	bge.n	8007240 <__ieee754_pow+0x3f8>
 800722e:	4658      	mov	r0, fp
 8007230:	4bcd      	ldr	r3, [pc, #820]	; (8007568 <__ieee754_pow+0x720>)
 8007232:	4661      	mov	r1, ip
 8007234:	f7f9 f950 	bl	80004d8 <__aeabi_dmul>
 8007238:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800723c:	4683      	mov	fp, r0
 800723e:	460c      	mov	r4, r1
 8007240:	1523      	asrs	r3, r4, #20
 8007242:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007246:	4413      	add	r3, r2
 8007248:	930c      	str	r3, [sp, #48]	; 0x30
 800724a:	4bc8      	ldr	r3, [pc, #800]	; (800756c <__ieee754_pow+0x724>)
 800724c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007250:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007254:	429c      	cmp	r4, r3
 8007256:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800725a:	dd08      	ble.n	800726e <__ieee754_pow+0x426>
 800725c:	4bc4      	ldr	r3, [pc, #784]	; (8007570 <__ieee754_pow+0x728>)
 800725e:	429c      	cmp	r4, r3
 8007260:	f340 815b 	ble.w	800751a <__ieee754_pow+0x6d2>
 8007264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007266:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800726a:	3301      	adds	r3, #1
 800726c:	930c      	str	r3, [sp, #48]	; 0x30
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	4658      	mov	r0, fp
 8007274:	4629      	mov	r1, r5
 8007276:	4bbf      	ldr	r3, [pc, #764]	; (8007574 <__ieee754_pow+0x72c>)
 8007278:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800727c:	444b      	add	r3, r9
 800727e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007282:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007286:	461a      	mov	r2, r3
 8007288:	4623      	mov	r3, r4
 800728a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800728e:	f7f8 ff6b 	bl	8000168 <__aeabi_dsub>
 8007292:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800729e:	f7f8 ff65 	bl	800016c <__adddf3>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	2000      	movs	r0, #0
 80072a8:	49b3      	ldr	r1, [pc, #716]	; (8007578 <__ieee754_pow+0x730>)
 80072aa:	f7f9 fa3f 	bl	800072c <__aeabi_ddiv>
 80072ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f9 f90d 	bl	80004d8 <__aeabi_dmul>
 80072be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072c2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80072c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	2200      	movs	r2, #0
 80072ce:	106d      	asrs	r5, r5, #1
 80072d0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80072da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80072de:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80072e2:	4650      	mov	r0, sl
 80072e4:	4659      	mov	r1, fp
 80072e6:	4614      	mov	r4, r2
 80072e8:	461d      	mov	r5, r3
 80072ea:	f7f9 f8f5 	bl	80004d8 <__aeabi_dmul>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4630      	mov	r0, r6
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f8 ff37 	bl	8000168 <__aeabi_dsub>
 80072fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072fe:	4606      	mov	r6, r0
 8007300:	460f      	mov	r7, r1
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f8 ff2f 	bl	8000168 <__aeabi_dsub>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007312:	f7f8 ff29 	bl	8000168 <__aeabi_dsub>
 8007316:	4652      	mov	r2, sl
 8007318:	465b      	mov	r3, fp
 800731a:	f7f9 f8dd 	bl	80004d8 <__aeabi_dmul>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f8 ff1f 	bl	8000168 <__aeabi_dsub>
 800732a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800732e:	f7f9 f8d3 	bl	80004d8 <__aeabi_dmul>
 8007332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800733a:	4610      	mov	r0, r2
 800733c:	4619      	mov	r1, r3
 800733e:	f7f9 f8cb 	bl	80004d8 <__aeabi_dmul>
 8007342:	a377      	add	r3, pc, #476	; (adr r3, 8007520 <__ieee754_pow+0x6d8>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	4604      	mov	r4, r0
 800734a:	460d      	mov	r5, r1
 800734c:	f7f9 f8c4 	bl	80004d8 <__aeabi_dmul>
 8007350:	a375      	add	r3, pc, #468	; (adr r3, 8007528 <__ieee754_pow+0x6e0>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f8 ff09 	bl	800016c <__adddf3>
 800735a:	4622      	mov	r2, r4
 800735c:	462b      	mov	r3, r5
 800735e:	f7f9 f8bb 	bl	80004d8 <__aeabi_dmul>
 8007362:	a373      	add	r3, pc, #460	; (adr r3, 8007530 <__ieee754_pow+0x6e8>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff00 	bl	800016c <__adddf3>
 800736c:	4622      	mov	r2, r4
 800736e:	462b      	mov	r3, r5
 8007370:	f7f9 f8b2 	bl	80004d8 <__aeabi_dmul>
 8007374:	a370      	add	r3, pc, #448	; (adr r3, 8007538 <__ieee754_pow+0x6f0>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 fef7 	bl	800016c <__adddf3>
 800737e:	4622      	mov	r2, r4
 8007380:	462b      	mov	r3, r5
 8007382:	f7f9 f8a9 	bl	80004d8 <__aeabi_dmul>
 8007386:	a36e      	add	r3, pc, #440	; (adr r3, 8007540 <__ieee754_pow+0x6f8>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f8 feee 	bl	800016c <__adddf3>
 8007390:	4622      	mov	r2, r4
 8007392:	462b      	mov	r3, r5
 8007394:	f7f9 f8a0 	bl	80004d8 <__aeabi_dmul>
 8007398:	a36b      	add	r3, pc, #428	; (adr r3, 8007548 <__ieee754_pow+0x700>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f8 fee5 	bl	800016c <__adddf3>
 80073a2:	4622      	mov	r2, r4
 80073a4:	4606      	mov	r6, r0
 80073a6:	460f      	mov	r7, r1
 80073a8:	462b      	mov	r3, r5
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f9 f893 	bl	80004d8 <__aeabi_dmul>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4630      	mov	r0, r6
 80073b8:	4639      	mov	r1, r7
 80073ba:	f7f9 f88d 	bl	80004d8 <__aeabi_dmul>
 80073be:	4604      	mov	r4, r0
 80073c0:	460d      	mov	r5, r1
 80073c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073c6:	4652      	mov	r2, sl
 80073c8:	465b      	mov	r3, fp
 80073ca:	f7f8 fecf 	bl	800016c <__adddf3>
 80073ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073d2:	f7f9 f881 	bl	80004d8 <__aeabi_dmul>
 80073d6:	4622      	mov	r2, r4
 80073d8:	462b      	mov	r3, r5
 80073da:	f7f8 fec7 	bl	800016c <__adddf3>
 80073de:	4652      	mov	r2, sl
 80073e0:	4606      	mov	r6, r0
 80073e2:	460f      	mov	r7, r1
 80073e4:	465b      	mov	r3, fp
 80073e6:	4650      	mov	r0, sl
 80073e8:	4659      	mov	r1, fp
 80073ea:	f7f9 f875 	bl	80004d8 <__aeabi_dmul>
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b62      	ldr	r3, [pc, #392]	; (800757c <__ieee754_pow+0x734>)
 80073f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073f6:	f7f8 feb9 	bl	800016c <__adddf3>
 80073fa:	4632      	mov	r2, r6
 80073fc:	463b      	mov	r3, r7
 80073fe:	f7f8 feb5 	bl	800016c <__adddf3>
 8007402:	9804      	ldr	r0, [sp, #16]
 8007404:	460d      	mov	r5, r1
 8007406:	4604      	mov	r4, r0
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4650      	mov	r0, sl
 800740e:	4659      	mov	r1, fp
 8007410:	f7f9 f862 	bl	80004d8 <__aeabi_dmul>
 8007414:	2200      	movs	r2, #0
 8007416:	4682      	mov	sl, r0
 8007418:	468b      	mov	fp, r1
 800741a:	4b58      	ldr	r3, [pc, #352]	; (800757c <__ieee754_pow+0x734>)
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f8 fea2 	bl	8000168 <__aeabi_dsub>
 8007424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007428:	f7f8 fe9e 	bl	8000168 <__aeabi_dsub>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f8 fe98 	bl	8000168 <__aeabi_dsub>
 8007438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800743c:	f7f9 f84c 	bl	80004d8 <__aeabi_dmul>
 8007440:	4622      	mov	r2, r4
 8007442:	4606      	mov	r6, r0
 8007444:	460f      	mov	r7, r1
 8007446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800744a:	462b      	mov	r3, r5
 800744c:	f7f9 f844 	bl	80004d8 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4630      	mov	r0, r6
 8007456:	4639      	mov	r1, r7
 8007458:	f7f8 fe88 	bl	800016c <__adddf3>
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4650      	mov	r0, sl
 8007466:	4659      	mov	r1, fp
 8007468:	f7f8 fe80 	bl	800016c <__adddf3>
 800746c:	a338      	add	r3, pc, #224	; (adr r3, 8007550 <__ieee754_pow+0x708>)
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	9804      	ldr	r0, [sp, #16]
 8007474:	460d      	mov	r5, r1
 8007476:	4604      	mov	r4, r0
 8007478:	f7f9 f82e 	bl	80004d8 <__aeabi_dmul>
 800747c:	4652      	mov	r2, sl
 800747e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007482:	465b      	mov	r3, fp
 8007484:	4620      	mov	r0, r4
 8007486:	4629      	mov	r1, r5
 8007488:	f7f8 fe6e 	bl	8000168 <__aeabi_dsub>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f8 fe68 	bl	8000168 <__aeabi_dsub>
 8007498:	a32f      	add	r3, pc, #188	; (adr r3, 8007558 <__ieee754_pow+0x710>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f81b 	bl	80004d8 <__aeabi_dmul>
 80074a2:	a32f      	add	r3, pc, #188	; (adr r3, 8007560 <__ieee754_pow+0x718>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	4620      	mov	r0, r4
 80074ae:	4629      	mov	r1, r5
 80074b0:	f7f9 f812 	bl	80004d8 <__aeabi_dmul>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f8 fe56 	bl	800016c <__adddf3>
 80074c0:	4b2f      	ldr	r3, [pc, #188]	; (8007580 <__ieee754_pow+0x738>)
 80074c2:	444b      	add	r3, r9
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	f7f8 fe50 	bl	800016c <__adddf3>
 80074cc:	4604      	mov	r4, r0
 80074ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074d0:	460d      	mov	r5, r1
 80074d2:	f7f8 ff97 	bl	8000404 <__aeabi_i2d>
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	4b2a      	ldr	r3, [pc, #168]	; (8007584 <__ieee754_pow+0x73c>)
 80074dc:	4622      	mov	r2, r4
 80074de:	444b      	add	r3, r9
 80074e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074e4:	462b      	mov	r3, r5
 80074e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ea:	f7f8 fe3f 	bl	800016c <__adddf3>
 80074ee:	4642      	mov	r2, r8
 80074f0:	464b      	mov	r3, r9
 80074f2:	f7f8 fe3b 	bl	800016c <__adddf3>
 80074f6:	4632      	mov	r2, r6
 80074f8:	463b      	mov	r3, r7
 80074fa:	f7f8 fe37 	bl	800016c <__adddf3>
 80074fe:	9804      	ldr	r0, [sp, #16]
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	4682      	mov	sl, r0
 8007506:	468b      	mov	fp, r1
 8007508:	f7f8 fe2e 	bl	8000168 <__aeabi_dsub>
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	f7f8 fe2a 	bl	8000168 <__aeabi_dsub>
 8007514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007518:	e60b      	b.n	8007132 <__ieee754_pow+0x2ea>
 800751a:	f04f 0801 	mov.w	r8, #1
 800751e:	e6a8      	b.n	8007272 <__ieee754_pow+0x42a>
 8007520:	4a454eef 	.word	0x4a454eef
 8007524:	3fca7e28 	.word	0x3fca7e28
 8007528:	93c9db65 	.word	0x93c9db65
 800752c:	3fcd864a 	.word	0x3fcd864a
 8007530:	a91d4101 	.word	0xa91d4101
 8007534:	3fd17460 	.word	0x3fd17460
 8007538:	518f264d 	.word	0x518f264d
 800753c:	3fd55555 	.word	0x3fd55555
 8007540:	db6fabff 	.word	0xdb6fabff
 8007544:	3fdb6db6 	.word	0x3fdb6db6
 8007548:	33333303 	.word	0x33333303
 800754c:	3fe33333 	.word	0x3fe33333
 8007550:	e0000000 	.word	0xe0000000
 8007554:	3feec709 	.word	0x3feec709
 8007558:	dc3a03fd 	.word	0xdc3a03fd
 800755c:	3feec709 	.word	0x3feec709
 8007560:	145b01f5 	.word	0x145b01f5
 8007564:	be3e2fe0 	.word	0xbe3e2fe0
 8007568:	43400000 	.word	0x43400000
 800756c:	0003988e 	.word	0x0003988e
 8007570:	000bb679 	.word	0x000bb679
 8007574:	08007f08 	.word	0x08007f08
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	40080000 	.word	0x40080000
 8007580:	08007f28 	.word	0x08007f28
 8007584:	08007f18 	.word	0x08007f18
 8007588:	a39b      	add	r3, pc, #620	; (adr r3, 80077f8 <__ieee754_pow+0x9b0>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f8 fdeb 	bl	800016c <__adddf3>
 8007596:	4622      	mov	r2, r4
 8007598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800759c:	462b      	mov	r3, r5
 800759e:	4650      	mov	r0, sl
 80075a0:	4639      	mov	r1, r7
 80075a2:	f7f8 fde1 	bl	8000168 <__aeabi_dsub>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ae:	f7f9 fa23 	bl	80009f8 <__aeabi_dcmpgt>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f47f ae0d 	bne.w	80071d2 <__ieee754_pow+0x38a>
 80075b8:	4aa3      	ldr	r2, [pc, #652]	; (8007848 <__ieee754_pow+0xa00>)
 80075ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80075be:	4293      	cmp	r3, r2
 80075c0:	f340 8103 	ble.w	80077ca <__ieee754_pow+0x982>
 80075c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80075c8:	2000      	movs	r0, #0
 80075ca:	151b      	asrs	r3, r3, #20
 80075cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80075d0:	fa4a f303 	asr.w	r3, sl, r3
 80075d4:	4433      	add	r3, r6
 80075d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80075da:	4f9c      	ldr	r7, [pc, #624]	; (800784c <__ieee754_pow+0xa04>)
 80075dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80075e0:	4117      	asrs	r7, r2
 80075e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80075e6:	ea23 0107 	bic.w	r1, r3, r7
 80075ea:	f1c2 0214 	rsb	r2, r2, #20
 80075ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80075f2:	fa4a fa02 	asr.w	sl, sl, r2
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	bfb8      	it	lt
 8007602:	f1ca 0a00 	rsblt	sl, sl, #0
 8007606:	f7f8 fdaf 	bl	8000168 <__aeabi_dsub>
 800760a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	4642      	mov	r2, r8
 8007614:	464b      	mov	r3, r9
 8007616:	f7f8 fda9 	bl	800016c <__adddf3>
 800761a:	a379      	add	r3, pc, #484	; (adr r3, 8007800 <__ieee754_pow+0x9b8>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	2000      	movs	r0, #0
 8007622:	460d      	mov	r5, r1
 8007624:	4604      	mov	r4, r0
 8007626:	f7f8 ff57 	bl	80004d8 <__aeabi_dmul>
 800762a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f8 fd97 	bl	8000168 <__aeabi_dsub>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4640      	mov	r0, r8
 8007640:	4649      	mov	r1, r9
 8007642:	f7f8 fd91 	bl	8000168 <__aeabi_dsub>
 8007646:	a370      	add	r3, pc, #448	; (adr r3, 8007808 <__ieee754_pow+0x9c0>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 ff44 	bl	80004d8 <__aeabi_dmul>
 8007650:	a36f      	add	r3, pc, #444	; (adr r3, 8007810 <__ieee754_pow+0x9c8>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	4680      	mov	r8, r0
 8007658:	4689      	mov	r9, r1
 800765a:	4620      	mov	r0, r4
 800765c:	4629      	mov	r1, r5
 800765e:	f7f8 ff3b 	bl	80004d8 <__aeabi_dmul>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f8 fd7f 	bl	800016c <__adddf3>
 800766e:	4604      	mov	r4, r0
 8007670:	460d      	mov	r5, r1
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f8 fd77 	bl	800016c <__adddf3>
 800767e:	4632      	mov	r2, r6
 8007680:	463b      	mov	r3, r7
 8007682:	4680      	mov	r8, r0
 8007684:	4689      	mov	r9, r1
 8007686:	f7f8 fd6f 	bl	8000168 <__aeabi_dsub>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f8 fd69 	bl	8000168 <__aeabi_dsub>
 8007696:	4642      	mov	r2, r8
 8007698:	4606      	mov	r6, r0
 800769a:	460f      	mov	r7, r1
 800769c:	464b      	mov	r3, r9
 800769e:	4640      	mov	r0, r8
 80076a0:	4649      	mov	r1, r9
 80076a2:	f7f8 ff19 	bl	80004d8 <__aeabi_dmul>
 80076a6:	a35c      	add	r3, pc, #368	; (adr r3, 8007818 <__ieee754_pow+0x9d0>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	4604      	mov	r4, r0
 80076ae:	460d      	mov	r5, r1
 80076b0:	f7f8 ff12 	bl	80004d8 <__aeabi_dmul>
 80076b4:	a35a      	add	r3, pc, #360	; (adr r3, 8007820 <__ieee754_pow+0x9d8>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fd55 	bl	8000168 <__aeabi_dsub>
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	f7f8 ff09 	bl	80004d8 <__aeabi_dmul>
 80076c6:	a358      	add	r3, pc, #352	; (adr r3, 8007828 <__ieee754_pow+0x9e0>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f7f8 fd4e 	bl	800016c <__adddf3>
 80076d0:	4622      	mov	r2, r4
 80076d2:	462b      	mov	r3, r5
 80076d4:	f7f8 ff00 	bl	80004d8 <__aeabi_dmul>
 80076d8:	a355      	add	r3, pc, #340	; (adr r3, 8007830 <__ieee754_pow+0x9e8>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 fd43 	bl	8000168 <__aeabi_dsub>
 80076e2:	4622      	mov	r2, r4
 80076e4:	462b      	mov	r3, r5
 80076e6:	f7f8 fef7 	bl	80004d8 <__aeabi_dmul>
 80076ea:	a353      	add	r3, pc, #332	; (adr r3, 8007838 <__ieee754_pow+0x9f0>)
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f7f8 fd3c 	bl	800016c <__adddf3>
 80076f4:	4622      	mov	r2, r4
 80076f6:	462b      	mov	r3, r5
 80076f8:	f7f8 feee 	bl	80004d8 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f8 fd30 	bl	8000168 <__aeabi_dsub>
 8007708:	4604      	mov	r4, r0
 800770a:	460d      	mov	r5, r1
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	f7f8 fee0 	bl	80004d8 <__aeabi_dmul>
 8007718:	2200      	movs	r2, #0
 800771a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800771e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fd1f 	bl	8000168 <__aeabi_dsub>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007732:	f7f8 fffb 	bl	800072c <__aeabi_ddiv>
 8007736:	4632      	mov	r2, r6
 8007738:	4604      	mov	r4, r0
 800773a:	460d      	mov	r5, r1
 800773c:	463b      	mov	r3, r7
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f8 fec9 	bl	80004d8 <__aeabi_dmul>
 8007746:	4632      	mov	r2, r6
 8007748:	463b      	mov	r3, r7
 800774a:	f7f8 fd0f 	bl	800016c <__adddf3>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 fd07 	bl	8000168 <__aeabi_dsub>
 800775a:	4642      	mov	r2, r8
 800775c:	464b      	mov	r3, r9
 800775e:	f7f8 fd03 	bl	8000168 <__aeabi_dsub>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	2000      	movs	r0, #0
 8007768:	4939      	ldr	r1, [pc, #228]	; (8007850 <__ieee754_pow+0xa08>)
 800776a:	f7f8 fcfd 	bl	8000168 <__aeabi_dsub>
 800776e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007772:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007776:	da2b      	bge.n	80077d0 <__ieee754_pow+0x988>
 8007778:	4652      	mov	r2, sl
 800777a:	f000 f9b9 	bl	8007af0 <scalbn>
 800777e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007782:	f7ff bbf6 	b.w	8006f72 <__ieee754_pow+0x12a>
 8007786:	4b33      	ldr	r3, [pc, #204]	; (8007854 <__ieee754_pow+0xa0c>)
 8007788:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800778c:	429f      	cmp	r7, r3
 800778e:	f77f af13 	ble.w	80075b8 <__ieee754_pow+0x770>
 8007792:	4b31      	ldr	r3, [pc, #196]	; (8007858 <__ieee754_pow+0xa10>)
 8007794:	440b      	add	r3, r1
 8007796:	4303      	orrs	r3, r0
 8007798:	d00b      	beq.n	80077b2 <__ieee754_pow+0x96a>
 800779a:	a329      	add	r3, pc, #164	; (adr r3, 8007840 <__ieee754_pow+0x9f8>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a4:	f7f8 fe98 	bl	80004d8 <__aeabi_dmul>
 80077a8:	a325      	add	r3, pc, #148	; (adr r3, 8007840 <__ieee754_pow+0x9f8>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7ff bbe0 	b.w	8006f72 <__ieee754_pow+0x12a>
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 fcd7 	bl	8000168 <__aeabi_dsub>
 80077ba:	4642      	mov	r2, r8
 80077bc:	464b      	mov	r3, r9
 80077be:	f7f9 f911 	bl	80009e4 <__aeabi_dcmpge>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f aef8 	beq.w	80075b8 <__ieee754_pow+0x770>
 80077c8:	e7e7      	b.n	800779a <__ieee754_pow+0x952>
 80077ca:	f04f 0a00 	mov.w	sl, #0
 80077ce:	e71e      	b.n	800760e <__ieee754_pow+0x7c6>
 80077d0:	4621      	mov	r1, r4
 80077d2:	e7d4      	b.n	800777e <__ieee754_pow+0x936>
 80077d4:	f04f 0b00 	mov.w	fp, #0
 80077d8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007850 <__ieee754_pow+0xa08>
 80077dc:	f7ff bb95 	b.w	8006f0a <__ieee754_pow+0xc2>
 80077e0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80077e4:	f7ff bb91 	b.w	8006f0a <__ieee754_pow+0xc2>
 80077e8:	4638      	mov	r0, r7
 80077ea:	4641      	mov	r1, r8
 80077ec:	f7ff bbc3 	b.w	8006f76 <__ieee754_pow+0x12e>
 80077f0:	9200      	str	r2, [sp, #0]
 80077f2:	f7ff bb9f 	b.w	8006f34 <__ieee754_pow+0xec>
 80077f6:	bf00      	nop
 80077f8:	652b82fe 	.word	0x652b82fe
 80077fc:	3c971547 	.word	0x3c971547
 8007800:	00000000 	.word	0x00000000
 8007804:	3fe62e43 	.word	0x3fe62e43
 8007808:	fefa39ef 	.word	0xfefa39ef
 800780c:	3fe62e42 	.word	0x3fe62e42
 8007810:	0ca86c39 	.word	0x0ca86c39
 8007814:	be205c61 	.word	0xbe205c61
 8007818:	72bea4d0 	.word	0x72bea4d0
 800781c:	3e663769 	.word	0x3e663769
 8007820:	c5d26bf1 	.word	0xc5d26bf1
 8007824:	3ebbbd41 	.word	0x3ebbbd41
 8007828:	af25de2c 	.word	0xaf25de2c
 800782c:	3f11566a 	.word	0x3f11566a
 8007830:	16bebd93 	.word	0x16bebd93
 8007834:	3f66c16c 	.word	0x3f66c16c
 8007838:	5555553e 	.word	0x5555553e
 800783c:	3fc55555 	.word	0x3fc55555
 8007840:	c2f8f359 	.word	0xc2f8f359
 8007844:	01a56e1f 	.word	0x01a56e1f
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	000fffff 	.word	0x000fffff
 8007850:	3ff00000 	.word	0x3ff00000
 8007854:	4090cbff 	.word	0x4090cbff
 8007858:	3f6f3400 	.word	0x3f6f3400

0800785c <__ieee754_sqrt>:
 800785c:	4b54      	ldr	r3, [pc, #336]	; (80079b0 <__ieee754_sqrt+0x154>)
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	438b      	bics	r3, r1
 8007864:	4606      	mov	r6, r0
 8007866:	460d      	mov	r5, r1
 8007868:	460a      	mov	r2, r1
 800786a:	460c      	mov	r4, r1
 800786c:	d10f      	bne.n	800788e <__ieee754_sqrt+0x32>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	f7f8 fe31 	bl	80004d8 <__aeabi_dmul>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4630      	mov	r0, r6
 800787c:	4629      	mov	r1, r5
 800787e:	f7f8 fc75 	bl	800016c <__adddf3>
 8007882:	4606      	mov	r6, r0
 8007884:	460d      	mov	r5, r1
 8007886:	4630      	mov	r0, r6
 8007888:	4629      	mov	r1, r5
 800788a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800788e:	2900      	cmp	r1, #0
 8007890:	4607      	mov	r7, r0
 8007892:	4603      	mov	r3, r0
 8007894:	dc0e      	bgt.n	80078b4 <__ieee754_sqrt+0x58>
 8007896:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800789a:	ea5c 0707 	orrs.w	r7, ip, r7
 800789e:	d0f2      	beq.n	8007886 <__ieee754_sqrt+0x2a>
 80078a0:	b141      	cbz	r1, 80078b4 <__ieee754_sqrt+0x58>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	f7f8 fc5f 	bl	8000168 <__aeabi_dsub>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	f7f8 ff3d 	bl	800072c <__aeabi_ddiv>
 80078b2:	e7e6      	b.n	8007882 <__ieee754_sqrt+0x26>
 80078b4:	1512      	asrs	r2, r2, #20
 80078b6:	d074      	beq.n	80079a2 <__ieee754_sqrt+0x146>
 80078b8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80078bc:	07d5      	lsls	r5, r2, #31
 80078be:	f04f 0500 	mov.w	r5, #0
 80078c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80078c6:	bf48      	it	mi
 80078c8:	0fd9      	lsrmi	r1, r3, #31
 80078ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80078ce:	bf44      	itt	mi
 80078d0:	005b      	lslmi	r3, r3, #1
 80078d2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80078d6:	1051      	asrs	r1, r2, #1
 80078d8:	0fda      	lsrs	r2, r3, #31
 80078da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80078de:	4628      	mov	r0, r5
 80078e0:	2216      	movs	r2, #22
 80078e2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	1987      	adds	r7, r0, r6
 80078ea:	42a7      	cmp	r7, r4
 80078ec:	bfde      	ittt	le
 80078ee:	19b8      	addle	r0, r7, r6
 80078f0:	1be4      	suble	r4, r4, r7
 80078f2:	19ad      	addle	r5, r5, r6
 80078f4:	0fdf      	lsrs	r7, r3, #31
 80078f6:	3a01      	subs	r2, #1
 80078f8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80078fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007900:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007904:	d1f0      	bne.n	80078e8 <__ieee754_sqrt+0x8c>
 8007906:	f04f 0c20 	mov.w	ip, #32
 800790a:	4696      	mov	lr, r2
 800790c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007910:	4284      	cmp	r4, r0
 8007912:	eb06 070e 	add.w	r7, r6, lr
 8007916:	dc02      	bgt.n	800791e <__ieee754_sqrt+0xc2>
 8007918:	d112      	bne.n	8007940 <__ieee754_sqrt+0xe4>
 800791a:	429f      	cmp	r7, r3
 800791c:	d810      	bhi.n	8007940 <__ieee754_sqrt+0xe4>
 800791e:	2f00      	cmp	r7, #0
 8007920:	eb07 0e06 	add.w	lr, r7, r6
 8007924:	da42      	bge.n	80079ac <__ieee754_sqrt+0x150>
 8007926:	f1be 0f00 	cmp.w	lr, #0
 800792a:	db3f      	blt.n	80079ac <__ieee754_sqrt+0x150>
 800792c:	f100 0801 	add.w	r8, r0, #1
 8007930:	1a24      	subs	r4, r4, r0
 8007932:	4640      	mov	r0, r8
 8007934:	429f      	cmp	r7, r3
 8007936:	bf88      	it	hi
 8007938:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800793c:	1bdb      	subs	r3, r3, r7
 800793e:	4432      	add	r2, r6
 8007940:	0064      	lsls	r4, r4, #1
 8007942:	f1bc 0c01 	subs.w	ip, ip, #1
 8007946:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800794a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800794e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007952:	d1dd      	bne.n	8007910 <__ieee754_sqrt+0xb4>
 8007954:	4323      	orrs	r3, r4
 8007956:	d006      	beq.n	8007966 <__ieee754_sqrt+0x10a>
 8007958:	1c54      	adds	r4, r2, #1
 800795a:	bf0b      	itete	eq
 800795c:	4662      	moveq	r2, ip
 800795e:	3201      	addne	r2, #1
 8007960:	3501      	addeq	r5, #1
 8007962:	f022 0201 	bicne.w	r2, r2, #1
 8007966:	106b      	asrs	r3, r5, #1
 8007968:	0852      	lsrs	r2, r2, #1
 800796a:	07e8      	lsls	r0, r5, #31
 800796c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007970:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007974:	bf48      	it	mi
 8007976:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800797a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800797e:	4616      	mov	r6, r2
 8007980:	e781      	b.n	8007886 <__ieee754_sqrt+0x2a>
 8007982:	0adc      	lsrs	r4, r3, #11
 8007984:	3915      	subs	r1, #21
 8007986:	055b      	lsls	r3, r3, #21
 8007988:	2c00      	cmp	r4, #0
 800798a:	d0fa      	beq.n	8007982 <__ieee754_sqrt+0x126>
 800798c:	02e6      	lsls	r6, r4, #11
 800798e:	d50a      	bpl.n	80079a6 <__ieee754_sqrt+0x14a>
 8007990:	f1c2 0020 	rsb	r0, r2, #32
 8007994:	fa23 f000 	lsr.w	r0, r3, r0
 8007998:	1e55      	subs	r5, r2, #1
 800799a:	4093      	lsls	r3, r2
 800799c:	4304      	orrs	r4, r0
 800799e:	1b4a      	subs	r2, r1, r5
 80079a0:	e78a      	b.n	80078b8 <__ieee754_sqrt+0x5c>
 80079a2:	4611      	mov	r1, r2
 80079a4:	e7f0      	b.n	8007988 <__ieee754_sqrt+0x12c>
 80079a6:	0064      	lsls	r4, r4, #1
 80079a8:	3201      	adds	r2, #1
 80079aa:	e7ef      	b.n	800798c <__ieee754_sqrt+0x130>
 80079ac:	4680      	mov	r8, r0
 80079ae:	e7bf      	b.n	8007930 <__ieee754_sqrt+0xd4>
 80079b0:	7ff00000 	.word	0x7ff00000

080079b4 <fabs>:
 80079b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079b8:	4619      	mov	r1, r3
 80079ba:	4770      	bx	lr

080079bc <finite>:
 80079bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80079c0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80079c4:	0fc0      	lsrs	r0, r0, #31
 80079c6:	4770      	bx	lr

080079c8 <matherr>:
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr

080079cc <nan>:
 80079cc:	2000      	movs	r0, #0
 80079ce:	4901      	ldr	r1, [pc, #4]	; (80079d4 <nan+0x8>)
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	7ff80000 	.word	0x7ff80000

080079d8 <rint>:
 80079d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079de:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80079e2:	f1bc 0f13 	cmp.w	ip, #19
 80079e6:	4604      	mov	r4, r0
 80079e8:	460d      	mov	r5, r1
 80079ea:	460b      	mov	r3, r1
 80079ec:	4606      	mov	r6, r0
 80079ee:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80079f2:	dc5a      	bgt.n	8007aaa <rint+0xd2>
 80079f4:	f1bc 0f00 	cmp.w	ip, #0
 80079f8:	da2b      	bge.n	8007a52 <rint+0x7a>
 80079fa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80079fe:	4302      	orrs	r2, r0
 8007a00:	d023      	beq.n	8007a4a <rint+0x72>
 8007a02:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007a06:	4302      	orrs	r2, r0
 8007a08:	4256      	negs	r6, r2
 8007a0a:	4316      	orrs	r6, r2
 8007a0c:	0c4b      	lsrs	r3, r1, #17
 8007a0e:	0b36      	lsrs	r6, r6, #12
 8007a10:	4934      	ldr	r1, [pc, #208]	; (8007ae4 <rint+0x10c>)
 8007a12:	045b      	lsls	r3, r3, #17
 8007a14:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007a18:	ea46 0503 	orr.w	r5, r6, r3
 8007a1c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007a20:	4602      	mov	r2, r0
 8007a22:	462b      	mov	r3, r5
 8007a24:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007a28:	4620      	mov	r0, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7f8 fb9e 	bl	800016c <__adddf3>
 8007a30:	e9cd 0100 	strd	r0, r1, [sp]
 8007a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a38:	462b      	mov	r3, r5
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	f7f8 fb94 	bl	8000168 <__aeabi_dsub>
 8007a40:	4604      	mov	r4, r0
 8007a42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a46:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	b003      	add	sp, #12
 8007a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a52:	4a25      	ldr	r2, [pc, #148]	; (8007ae8 <rint+0x110>)
 8007a54:	fa42 f20c 	asr.w	r2, r2, ip
 8007a58:	4011      	ands	r1, r2
 8007a5a:	4301      	orrs	r1, r0
 8007a5c:	d0f5      	beq.n	8007a4a <rint+0x72>
 8007a5e:	0852      	lsrs	r2, r2, #1
 8007a60:	ea05 0102 	and.w	r1, r5, r2
 8007a64:	ea50 0601 	orrs.w	r6, r0, r1
 8007a68:	d00c      	beq.n	8007a84 <rint+0xac>
 8007a6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a6e:	f1bc 0f13 	cmp.w	ip, #19
 8007a72:	bf0c      	ite	eq
 8007a74:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007a78:	2600      	movne	r6, #0
 8007a7a:	ea25 0202 	bic.w	r2, r5, r2
 8007a7e:	fa43 f30c 	asr.w	r3, r3, ip
 8007a82:	4313      	orrs	r3, r2
 8007a84:	4917      	ldr	r1, [pc, #92]	; (8007ae4 <rint+0x10c>)
 8007a86:	4632      	mov	r2, r6
 8007a88:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8007a8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a90:	4620      	mov	r0, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7f8 fb6a 	bl	800016c <__adddf3>
 8007a98:	e9cd 0100 	strd	r0, r1, [sp]
 8007a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	462b      	mov	r3, r5
 8007aa4:	f7f8 fb60 	bl	8000168 <__aeabi_dsub>
 8007aa8:	e008      	b.n	8007abc <rint+0xe4>
 8007aaa:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8007aae:	dd08      	ble.n	8007ac2 <rint+0xea>
 8007ab0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8007ab4:	d1c9      	bne.n	8007a4a <rint+0x72>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	f7f8 fb58 	bl	800016c <__adddf3>
 8007abc:	4604      	mov	r4, r0
 8007abe:	460d      	mov	r5, r1
 8007ac0:	e7c3      	b.n	8007a4a <rint+0x72>
 8007ac2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aca:	40ca      	lsrs	r2, r1
 8007acc:	4210      	tst	r0, r2
 8007ace:	d0bc      	beq.n	8007a4a <rint+0x72>
 8007ad0:	0852      	lsrs	r2, r2, #1
 8007ad2:	4210      	tst	r0, r2
 8007ad4:	bf1f      	itttt	ne
 8007ad6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8007ada:	ea20 0202 	bicne.w	r2, r0, r2
 8007ade:	410e      	asrne	r6, r1
 8007ae0:	4316      	orrne	r6, r2
 8007ae2:	e7cf      	b.n	8007a84 <rint+0xac>
 8007ae4:	08007f38 	.word	0x08007f38
 8007ae8:	000fffff 	.word	0x000fffff
 8007aec:	00000000 	.word	0x00000000

08007af0 <scalbn>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	4616      	mov	r6, r2
 8007af4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007af8:	4604      	mov	r4, r0
 8007afa:	460d      	mov	r5, r1
 8007afc:	460b      	mov	r3, r1
 8007afe:	b982      	cbnz	r2, 8007b22 <scalbn+0x32>
 8007b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b04:	4303      	orrs	r3, r0
 8007b06:	d034      	beq.n	8007b72 <scalbn+0x82>
 8007b08:	4b2d      	ldr	r3, [pc, #180]	; (8007bc0 <scalbn+0xd0>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f8 fce4 	bl	80004d8 <__aeabi_dmul>
 8007b10:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <scalbn+0xd4>)
 8007b12:	4604      	mov	r4, r0
 8007b14:	429e      	cmp	r6, r3
 8007b16:	460d      	mov	r5, r1
 8007b18:	da0d      	bge.n	8007b36 <scalbn+0x46>
 8007b1a:	a325      	add	r3, pc, #148	; (adr r3, 8007bb0 <scalbn+0xc0>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	e01c      	b.n	8007b5c <scalbn+0x6c>
 8007b22:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007b26:	42ba      	cmp	r2, r7
 8007b28:	d109      	bne.n	8007b3e <scalbn+0x4e>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	f7f8 fb1e 	bl	800016c <__adddf3>
 8007b30:	4604      	mov	r4, r0
 8007b32:	460d      	mov	r5, r1
 8007b34:	e01d      	b.n	8007b72 <scalbn+0x82>
 8007b36:	460b      	mov	r3, r1
 8007b38:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b3c:	3a36      	subs	r2, #54	; 0x36
 8007b3e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007b42:	4432      	add	r2, r6
 8007b44:	428a      	cmp	r2, r1
 8007b46:	dd0c      	ble.n	8007b62 <scalbn+0x72>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	a11a      	add	r1, pc, #104	; (adr r1, 8007bb8 <scalbn+0xc8>)
 8007b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b52:	f000 f83b 	bl	8007bcc <copysign>
 8007b56:	a318      	add	r3, pc, #96	; (adr r3, 8007bb8 <scalbn+0xc8>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fcbc 	bl	80004d8 <__aeabi_dmul>
 8007b60:	e7e6      	b.n	8007b30 <scalbn+0x40>
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	dd08      	ble.n	8007b78 <scalbn+0x88>
 8007b66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b6e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b78:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007b7c:	da0b      	bge.n	8007b96 <scalbn+0xa6>
 8007b7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007b82:	429e      	cmp	r6, r3
 8007b84:	4622      	mov	r2, r4
 8007b86:	462b      	mov	r3, r5
 8007b88:	dce0      	bgt.n	8007b4c <scalbn+0x5c>
 8007b8a:	a109      	add	r1, pc, #36	; (adr r1, 8007bb0 <scalbn+0xc0>)
 8007b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b90:	f000 f81c 	bl	8007bcc <copysign>
 8007b94:	e7c1      	b.n	8007b1a <scalbn+0x2a>
 8007b96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b9a:	3236      	adds	r2, #54	; 0x36
 8007b9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ba0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <scalbn+0xd8>)
 8007bac:	e7d6      	b.n	8007b5c <scalbn+0x6c>
 8007bae:	bf00      	nop
 8007bb0:	c2f8f359 	.word	0xc2f8f359
 8007bb4:	01a56e1f 	.word	0x01a56e1f
 8007bb8:	8800759c 	.word	0x8800759c
 8007bbc:	7e37e43c 	.word	0x7e37e43c
 8007bc0:	43500000 	.word	0x43500000
 8007bc4:	ffff3cb0 	.word	0xffff3cb0
 8007bc8:	3c900000 	.word	0x3c900000

08007bcc <copysign>:
 8007bcc:	b530      	push	{r4, r5, lr}
 8007bce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bd6:	ea42 0503 	orr.w	r5, r2, r3
 8007bda:	4629      	mov	r1, r5
 8007bdc:	bd30      	pop	{r4, r5, pc}
	...

08007be0 <_init>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	bf00      	nop
 8007be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be6:	bc08      	pop	{r3}
 8007be8:	469e      	mov	lr, r3
 8007bea:	4770      	bx	lr

08007bec <_fini>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr
